// generated by gen-nodes from `v2cc-chunk.t'.  Do not edit.

#ifndef V2CC_H
#define V2CC_H

#include <freehdl/vaul-chunk.h>
#include <string>
#include <set>
#include <list>
#include <vector>
#include <map>
#include <deque>
#include <vector>
#include <algorithm>
#include "v2cc.h"
enum op_type { NO_OP, STD_OP, BASIC_OP, USER_OP };

extern tree_chunk_info v2cc_chunk_info;
extern tree_ctype_info set_string_ctype_info;
extern tree_ctype_info list_string_ctype_info;
extern tree_ctype_info list_expr_pair_ref_ctype_info;
extern tree_ctype_info vector_string_ctype_info;
extern tree_ctype_info vector_string_ref_ctype_info;
extern tree_ctype_info vector_bool_ctype_info;
extern tree_ctype_info vector_lint_ref_ctype_info;
extern tree_ctype_info RegionStack_ctype_info;
extern tree_ctype_info RegionStack_ref_ctype_info;
extern tree_ctype_info ContextInfo_ctype_info;
extern tree_ctype_info ContextInfo_ref_ctype_info;
extern tree_ctype_info pContextInfo_ctype_info;
extern tree_ctype_info pAccessDescriptor_ctype_info;
extern tree_ctype_info lint_ctype_info;
extern tree_ctype_info StaticDataType_ctype_info;
extern tree_ctype_info string_ctype_info;
extern tree_ctype_info string_ref_ctype_info;
extern tree_ctype_info set_IIR_SimpleReference_ctype_info;
extern tree_ctype_info pIIR_ObjectDeclaration_ctype_info;
extern tree_ctype_info RangeDescriptor_vec_ctype_info;
extern tree_ctype_info RuntimeCheckFlags_ctype_info;
extern tree_ctype_info id_type_ctype_info;
extern tree_ctype_info op_type_ctype_info;
struct V2CC_InternalObjectDeclaration;
typedef V2CC_InternalObjectDeclaration *pV2CC_InternalObjectDeclaration;
extern tree_kind_info V2CC_INTERNAL_OBJECT_DECLARATION_kind_info;
#define V2CC_INTERNAL_OBJECT_DECLARATION (&V2CC_INTERNAL_OBJECT_DECLARATION_kind_info)
struct V2CC_ImplicitSignalDeclaration;
typedef V2CC_ImplicitSignalDeclaration *pV2CC_ImplicitSignalDeclaration;
extern tree_kind_info V2CC_IMPLICIT_SIGNAL_DECLARATION_kind_info;
#define V2CC_IMPLICIT_SIGNAL_DECLARATION (&V2CC_IMPLICIT_SIGNAL_DECLARATION_kind_info)
struct V2CC_ImplicitSignalDeclaration_WaitFor;
typedef V2CC_ImplicitSignalDeclaration_WaitFor *pV2CC_ImplicitSignalDeclaration_WaitFor;
extern tree_kind_info V2CC_IMPLICIT_SIGNAL_DECLARATION_WAIT_FOR_kind_info;
#define V2CC_IMPLICIT_SIGNAL_DECLARATION_WAIT_FOR (&V2CC_IMPLICIT_SIGNAL_DECLARATION_WAIT_FOR_kind_info)
struct V2CC_ImplicitSignalDeclaration_Transaction;
typedef V2CC_ImplicitSignalDeclaration_Transaction *pV2CC_ImplicitSignalDeclaration_Transaction;
extern tree_kind_info V2CC_IMPLICIT_SIGNAL_DECLARATION_TRANSACTION_kind_info;
#define V2CC_IMPLICIT_SIGNAL_DECLARATION_TRANSACTION (&V2CC_IMPLICIT_SIGNAL_DECLARATION_TRANSACTION_kind_info)
struct V2CC_InternalCode;
typedef V2CC_InternalCode *pV2CC_InternalCode;
extern tree_kind_info V2CC_INTERNAL_CODE_kind_info;
#define V2CC_INTERNAL_CODE (&V2CC_INTERNAL_CODE_kind_info)
struct V2CC_ImplicitSubtypeDeclaration;
typedef V2CC_ImplicitSubtypeDeclaration *pV2CC_ImplicitSubtypeDeclaration;
extern tree_kind_info V2CC_IMPLICIT_SUBTYPE_DECLARATION_kind_info;
#define V2CC_IMPLICIT_SUBTYPE_DECLARATION (&V2CC_IMPLICIT_SUBTYPE_DECLARATION_kind_info)

struct V2CC_InternalObjectDeclaration : IIR_ObjectDeclaration {
  string cpp_type_string;
  string cpp_initial_string;
  int flags;

  V2CC_InternalObjectDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_ObjectReference alias_base, string cpp_type_string, string cpp_initial_string, int flags) 
  : IIR_ObjectDeclaration (pos, declarator, declarative_region, attributes, seqno, subtype, initial_value, alias_base),
    cpp_type_string (cpp_type_string),
    cpp_initial_string (cpp_initial_string),
    flags (flags)
    { }

  tree_kind kind ();
};

struct V2CC_ImplicitSignalDeclaration : IIR_SignalDeclaration {

  V2CC_ImplicitSignalDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_ObjectReference alias_base, IR_SignalKind signal_kind) 
  : IIR_SignalDeclaration (pos, declarator, declarative_region, attributes, seqno, subtype, initial_value, alias_base, signal_kind)
    { }

  tree_kind kind ();
};

struct V2CC_ImplicitSignalDeclaration_WaitFor : V2CC_ImplicitSignalDeclaration {

  V2CC_ImplicitSignalDeclaration_WaitFor (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_ObjectReference alias_base, IR_SignalKind signal_kind) 
  : V2CC_ImplicitSignalDeclaration (pos, declarator, declarative_region, attributes, seqno, subtype, initial_value, alias_base, signal_kind)
    { }

  tree_kind kind ();
};

struct V2CC_ImplicitSignalDeclaration_Transaction : V2CC_ImplicitSignalDeclaration {

  V2CC_ImplicitSignalDeclaration_Transaction (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_ObjectReference alias_base, IR_SignalKind signal_kind) 
  : V2CC_ImplicitSignalDeclaration (pos, declarator, declarative_region, attributes, seqno, subtype, initial_value, alias_base, signal_kind)
    { }

  tree_kind kind ();
};

struct V2CC_InternalCode : IIR_ObjectDeclaration {
  string cpp_header_string;
  string cpp_impl_string;
  int flags;

  V2CC_InternalCode (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_ObjectReference alias_base, string cpp_header_string, string cpp_impl_string, int flags) 
  : IIR_ObjectDeclaration (pos, declarator, declarative_region, attributes, seqno, subtype, initial_value, alias_base),
    cpp_header_string (cpp_header_string),
    cpp_impl_string (cpp_impl_string),
    flags (flags)
    { }

  tree_kind kind ();
};

struct V2CC_ImplicitSubtypeDeclaration : IIR_SubtypeDeclaration {

  V2CC_ImplicitSubtypeDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion declarative_region, pIIR_AttributeValueList attributes, int seqno, pIIR_Type type) 
  : IIR_SubtypeDeclaration (pos, declarator, declarative_region, attributes, seqno, type)
    { }

  tree_kind kind ();
};

typedef void (*v2cc_generic_0_mtype) (tree_base_node*, string& str, RegionStack & ctxt, int l);
extern tree_generic<v2cc_generic_0_mtype> v2cc_generic_0;
void emit_decl (tree_base_node *, string& str, RegionStack & ctxt, int l);

typedef void (*v2cc_generic_1_mtype) (tree_base_node*, string& str, RegionStack & ctxt, int l);
extern tree_generic<v2cc_generic_1_mtype> v2cc_generic_1;
void emit_main (tree_base_node *, string& str, RegionStack & ctxt, int l);

typedef bool (*v2cc_generic_2_mtype) (tree_base_node*, string& str, RegionStack & ctxt, id_type t);
extern tree_generic<v2cc_generic_2_mtype> v2cc_generic_2;
bool emit_expr (tree_base_node *, string& str, RegionStack & ctxt, id_type t);

typedef bool (*v2cc_generic_3_mtype) (tree_base_node*, string& str, RegionStack & ctxt, id_type t);
extern tree_generic<v2cc_generic_3_mtype> v2cc_generic_3;
bool cdfg_emit_expr (tree_base_node *, string& str, RegionStack & ctxt, id_type t);

typedef void (*v2cc_generic_4_mtype) (tree_base_node*, string& str, RegionStack & ctxt, int l);
extern tree_generic<v2cc_generic_4_mtype> v2cc_generic_4;
void emit_hdr (tree_base_node *, string& str, RegionStack & ctxt, int l);

typedef void (*v2cc_generic_5_mtype) (tree_base_node*, string& str, RegionStack & ctxt, int l);
extern tree_generic<v2cc_generic_5_mtype> v2cc_generic_5;
void emit_impl (tree_base_node *, string& str, RegionStack & ctxt, int l);

typedef void (*v2cc_generic_6_mtype) (tree_base_node*, string& str, RegionStack & ctxt, int l);
extern tree_generic<v2cc_generic_6_mtype> v2cc_generic_6;
void cdfg_emit_impl (tree_base_node *, string& str, RegionStack & ctxt, int l);

typedef IR_StaticLevel (*v2cc_generic_7_mtype) (tree_base_node*, string& str, RegionStack & ctxt, bool static_info, int l);
extern tree_generic<v2cc_generic_7_mtype> v2cc_generic_7;
IR_StaticLevel emit_info_init (tree_base_node *, string& str, RegionStack & ctxt, bool static_info, int l);

typedef bool (*v2cc_generic_8_mtype) (tree_base_node*, list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
extern tree_generic<v2cc_generic_8_mtype> v2cc_generic_8;
bool get_acl (tree_base_node *, list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);

typedef bool (*v2cc_generic_9_mtype) (tree_base_node*, string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
extern tree_generic<v2cc_generic_9_mtype> v2cc_generic_9;
bool cdfg_get_static_expr (tree_base_node *, string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);

typedef int (*v2cc_generic_10_mtype) (tree_base_node*, RegionStack & rstack, bool collect_access_info);
extern tree_generic<v2cc_generic_10_mtype> v2cc_generic_10;
int explore_and_check (tree_base_node *, RegionStack & rstack, bool collect_access_info);

typedef pAccessDescriptor (*v2cc_generic_11_mtype) (tree_base_node*, ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
extern tree_generic<v2cc_generic_11_mtype> v2cc_generic_11;
pAccessDescriptor get_context (tree_base_node *, ContextInfo & ctxt, RegionStack & rstack, bool target, int level);

typedef int (*v2cc_generic_12_mtype) (tree_base_node*, RegionStack & rstack);
extern tree_generic<v2cc_generic_12_mtype> v2cc_generic_12;
int check_expression (tree_base_node *, RegionStack & rstack);

typedef op_type (*v2cc_generic_13_mtype) (tree_base_node*);
extern tree_generic<v2cc_generic_13_mtype> v2cc_generic_13;
op_type get_operator_type (tree_base_node *);

typedef pIIR_ObjectDeclaration (*v2cc_generic_14_mtype) (tree_base_node*);
extern tree_generic<v2cc_generic_14_mtype> v2cc_generic_14;
pIIR_ObjectDeclaration get_object_declaration (tree_base_node *);

typedef string (*v2cc_generic_15_mtype) (tree_base_node*, RegionStack & rstack, id_type obj_access);
extern tree_generic<v2cc_generic_15_mtype> v2cc_generic_15;
string qid (tree_base_node *, RegionStack & rstack, id_type obj_access);

typedef string (*v2cc_generic_16_mtype) (tree_base_node*, RegionStack & rstack, bool static_object);
extern tree_generic<v2cc_generic_16_mtype> v2cc_generic_16;
string get_type_info_obj (tree_base_node *, RegionStack & rstack, bool static_object);

typedef vector<RangeDescriptor> (*v2cc_generic_17_mtype) (tree_base_node*, RegionStack & rstack, IR_StaticLevel slevel);
extern tree_generic<v2cc_generic_17_mtype> v2cc_generic_17;
vector<RangeDescriptor> get_discrete_range (tree_base_node *, RegionStack & rstack, IR_StaticLevel slevel);

typedef IR_StaticLevel (*v2cc_generic_18_mtype) (tree_base_node*, RegionStack & rstack);
extern tree_generic<v2cc_generic_18_mtype> v2cc_generic_18;
IR_StaticLevel get_static_level (tree_base_node *, RegionStack & rstack);

typedef int (*v2cc_generic_19_mtype) (tree_base_node*, RegionStack & rstack);
extern tree_generic<v2cc_generic_19_mtype> v2cc_generic_19;
int constant_fold (tree_base_node *, RegionStack & rstack);

typedef void (*v2cc_generic_20_mtype) (tree_base_node*, RegionStack & rstack);
extern tree_generic<v2cc_generic_20_mtype> v2cc_generic_20;
void optimize (tree_base_node *, RegionStack & rstack);
void m_emit_decl (pIIR_ComponentDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_ConfigurationDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_ArchitectureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_EntityDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_PackageBodyDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_PackageDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_TypeDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_SignalDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_FileDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_ConstantDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_VariableDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_SubprogramDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_decl (pIIR_Declaration , string& str, RegionStack & ctxt, int l);
void m_emit_main (pIIR_ConfigurationDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_main (pIIR_ArchitectureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_main (pIIR_Declaration , string& str, RegionStack & ctxt, int l);
bool m_emit_expr (pIIR_Allocator , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_NullExpression , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_EnumerationLiteral , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_Expression , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AttrTypeValue , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AttrTypeFunc , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AttrArrayFunc , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AttrSigFunc , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_SignalAttr , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AccessReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_SliceReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_ArrayAggregate , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_RecordAggregate , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_RecordReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_ArrayLiteralExpression , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_ArrayReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_EnumLiteralReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_QualifiedExpression , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_TypeConversion , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_AbstractLiteralExpression , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_SimpleReference , string& str, RegionStack & ctxt, id_type t);
bool m_emit_expr (pIIR_FunctionCall , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_Allocator , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_NullExpression , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_EnumerationLiteral , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_Expression , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AttrTypeValue , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AttrTypeFunc , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AttrArrayFunc , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AttrSigFunc , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_SignalAttr , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AccessReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_SliceReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_ArrayAggregate , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_RecordAggregate , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_RecordReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_ArrayLiteralExpression , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_ArrayReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_EnumLiteralReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_QualifiedExpression , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_TypeConversion , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_AbstractLiteralExpression , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_SimpleReference , string& str, RegionStack & ctxt, id_type t);
bool m_cdfg_emit_expr (pIIR_FunctionCall , string& str, RegionStack & ctxt, id_type t);
void m_emit_hdr (pIIR_Root , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_RecordSubtype , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_RecordType , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_TypeDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ArraySubtype , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ArrayType , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ScalarSubtype , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_FileType , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_AccessType , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_EnumerationType , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_PredefinedProcedureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_PredefinedFunctionDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_SubprogramDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ConcurrentStatementList , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ConcurrentStatement , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ConcurrentGenerateStatement , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_BlockStatement , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ComponentInstantiationStatement , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ProcessStatement , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_PackageBodyDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_PackageDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_ArchitectureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_hdr (pIIR_EntityDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_RecordSubtype , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_RecordType , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_FileType , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_AccessType , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ArraySubtype , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ArrayType , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ScalarSubtype , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_EnumerationType , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_PredefinedProcedureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_PredefinedFunctionDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_SubprogramDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ConcurrentStatementList , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ConcurrentStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_SequentialStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_SequentialStatementList , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ConcurrentGenerateStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_BlockStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_PackageBodyDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_PackageDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ComponentInstantiationStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ProcessStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ArchitectureDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_EntityDeclaration , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_SequentialStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_SignalAssignmentStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ReportStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_AssertionStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_WaitStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ProcedureCallStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ExitStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_NextStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_LoopStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_CaseStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_IfStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_VariableAssignmentStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_ReturnStatement , string& str, RegionStack & ctxt, int l);
void m_emit_impl (pIIR_NullStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_FileType , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_AccessType , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ArraySubtype , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ArrayType , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ScalarSubtype , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_EnumerationType , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_PredefinedProcedureDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_PredefinedFunctionDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_SubprogramDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ConcurrentStatementList , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ConcurrentStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_SequentialStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_SequentialStatementList , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ConcurrentGenerateStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_BlockStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_PackageBodyDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_PackageDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ComponentInstantiationStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ProcessStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ArchitectureDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_EntityDeclaration , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_SequentialStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_SignalAssignmentStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ReportStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_AssertionStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_WaitStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ProcedureCallStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ExitStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_NextStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_LoopStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_CaseStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_IfStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_VariableAssignmentStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_ReturnStatement , string& str, RegionStack & ctxt, int l);
void m_cdfg_emit_impl (pIIR_NullStatement , string& str, RegionStack & ctxt, int l);
IR_StaticLevel m_emit_info_init (pIIR_RecordSubtype , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_RecordType , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_FileType , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_AccessType , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_ArraySubtype , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_ArrayType , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_ScalarSubtype , string& str, RegionStack & ctxt, bool static_info, int l);
IR_StaticLevel m_emit_info_init (pIIR_EnumerationType , string& str, RegionStack & ctxt, bool static_info, int l);
bool m_get_acl (pIIR_SliceReference , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_get_acl (pIIR_ExplicitRange , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_get_acl (pIIR_RecordReference , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_get_acl (pIIR_ArrayReference , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_get_acl (pIIR_SimpleReference , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_get_acl (pIIR_Expression , list<pair<pIIR_Expression, pIIR_Root> >& alist, RegionStack & ctxt, IR_StaticLevel slevel, bool start);
bool m_cdfg_get_static_expr (pIIR_SliceReference , string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
bool m_cdfg_get_static_expr (pIIR_ExplicitRange , string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
bool m_cdfg_get_static_expr (pIIR_ArrayReference , string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
bool m_cdfg_get_static_expr (pIIR_SimpleReference , string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
bool m_cdfg_get_static_expr (pIIR_Expression , string& str, RegionStack & ctxt, IR_StaticLevel slevel, id_type t, bool start);
int m_explore_and_check (pIIR_PredefinedFunctionDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ConcurrentGenerateForStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ConcurrentGenerateIfStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ReturnStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_NullStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_Subtype , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ScalarSubtype , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_FileType , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ArraySubtype , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ArrayType , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_RecordType , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_Type , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_EnumerationType , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ProcedureCallStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ReportStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_AssertionStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ComponentInstantiationStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_VariableAssignmentStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_SignalAssignmentStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_AssociationElement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_WaitStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_CaseStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ExitStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_NextStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_LoopStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_WhileLoopStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ForLoopStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_IfStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_SequentialStatementList , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ComponentDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ConfigurationDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_SubprogramDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_PackageBodyDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_PackageDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ProcessStatement , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ConcurrentStatementList , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_ArchitectureDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_InterfaceDeclaration , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_DeclarationList , RegionStack & rstack, bool collect_access_info);
int m_explore_and_check (pIIR_EntityDeclaration , RegionStack & rstack, bool collect_access_info);
pAccessDescriptor m_get_context (pIIR_AttrArrayFunc , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_AttrTypeValue , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_AttrTypeFunc , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_Allocator , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_QualifiedExpression , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_Type , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_TypeConversion , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_AttrSigFunc , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_WaitStatement , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_RecordAggregate , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ArrayAggregate , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ExpressionList , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_Expression , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_RecordReference , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_SliceReference , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ElementAssociation , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_SingleIndexedAssociation , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_RangeIndexedAssociation , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_OthersIndexedAssociation , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ExplicitRange , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ArrayRange , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_AccessReference , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_ArrayReference , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_SimpleReference , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
pAccessDescriptor m_get_context (pIIR_FunctionCall , ContextInfo & ctxt, RegionStack & rstack, bool target, int level);
int m_check_expression (pIIR_QualifiedExpression , RegionStack & rstack);
int m_check_expression (pIIR_TypeConversion , RegionStack & rstack);
int m_check_expression (pIIR_ArrayLiteralExpression , RegionStack & rstack);
int m_check_expression (pIIR_AttrSigFunc , RegionStack & rstack);
int m_check_expression (pIIR_RecordAggregate , RegionStack & rstack);
int m_check_expression (pIIR_ArrayAggregate , RegionStack & rstack);
int m_check_expression (pIIR_ExpressionList , RegionStack & rstack);
int m_check_expression (pIIR_Expression , RegionStack & rstack);
int m_check_expression (pIIR_RecordReference , RegionStack & rstack);
int m_check_expression (pIIR_SliceReference , RegionStack & rstack);
int m_check_expression (pIIR_SingleIndexedAssociation , RegionStack & rstack);
int m_check_expression (pIIR_RangeIndexedAssociation , RegionStack & rstack);
int m_check_expression (pIIR_OthersIndexedAssociation , RegionStack & rstack);
int m_check_expression (pIIR_ExplicitRange , RegionStack & rstack);
int m_check_expression (pIIR_ArrayRange , RegionStack & rstack);
int m_check_expression (pIIR_ArrayReference , RegionStack & rstack);
int m_check_expression (pIIR_AccessReference , RegionStack & rstack);
int m_check_expression (pIIR_SimpleReference , RegionStack & rstack);
int m_check_expression (pIIR_FunctionCall , RegionStack & rstack);
op_type m_get_operator_type (pIIR_ProcedureDeclaration );
op_type m_get_operator_type (pIIR_FunctionDeclaration );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_RecordReference );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_ArrayReference );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_SignalAttr );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_SliceReference );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_SimpleReference );
pIIR_ObjectDeclaration m_get_object_declaration (pIIR_ObjectReference );
string m_qid (pIIR_Type , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_Subtype , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_TypeDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_SubprogramDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_SignalDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_ObjectDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pV2CC_ImplicitSignalDeclaration_WaitFor , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_SignalInterfaceDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_InterfaceDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_SignalDeclaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_Declaration , RegionStack & rstack, id_type obj_access);
string m_qid (pIIR_LibraryUnit , RegionStack & rstack, id_type obj_access);
string m_get_type_info_obj (pIIR_RecordType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_FileType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_AccessType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_ArraySubtype , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_ArrayType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_Subtype , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_RecordSubtype , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_ScalarSubtype , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_FloatingType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_PhysicalType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_IntegerType , RegionStack & rstack, bool static_object);
string m_get_type_info_obj (pIIR_EnumerationType , RegionStack & rstack, bool static_object);
vector<RangeDescriptor> m_get_discrete_range (pIIR_Attr_ArrayREVERSE_RANGE , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_Attr_ArrayRANGE , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_ArraySubtype , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_ArrayType , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_SliceReference , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_ExplicitRange , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_ScalarSubtype , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_FloatingType , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_PhysicalType , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_IntegerType , RegionStack & rstack, IR_StaticLevel slevel);
vector<RangeDescriptor> m_get_discrete_range (pIIR_EnumerationType , RegionStack & rstack, IR_StaticLevel slevel);
IR_StaticLevel m_get_static_level (pIIR_Expression , RegionStack & rstack);
IR_StaticLevel m_get_static_level (pIIR_Type , RegionStack & rstack);
int m_constant_fold (pIIR_Allocator , RegionStack & rstack);
int m_constant_fold (pIIR_QualifiedExpression , RegionStack & rstack);
int m_constant_fold (pIIR_PhysicalUnit , RegionStack & rstack);
int m_constant_fold (pIIR_EnumerationLiteral , RegionStack & rstack);
int m_constant_fold (pIIR_PhysicalLiteral , RegionStack & rstack);
int m_constant_fold (pIIR_AbstractLiteralExpression , RegionStack & rstack);
int m_constant_fold (pIIR_IntegerLiteral , RegionStack & rstack);
int m_constant_fold (pIIR_FloatingPointLiteral , RegionStack & rstack);
int m_constant_fold (pIIR_RecordAggregate , RegionStack & rstack);
int m_constant_fold (pIIR_ArrayAggregate , RegionStack & rstack);
int m_constant_fold (pIIR_ExpressionList , RegionStack & rstack);
int m_constant_fold (pIIR_TypeConversion , RegionStack & rstack);
int m_constant_fold (pIIR_Expression , RegionStack & rstack);
int m_constant_fold (pIIR_RecordReference , RegionStack & rstack);
int m_constant_fold (pIIR_SliceReference , RegionStack & rstack);
int m_constant_fold (pIIR_SliceIndexedAssociation , RegionStack & rstack);
int m_constant_fold (pIIR_RangeIndexedAssociation , RegionStack & rstack);
int m_constant_fold (pIIR_SingleIndexedAssociation , RegionStack & rstack);
int m_constant_fold (pIIR_OthersIndexedAssociation , RegionStack & rstack);
int m_constant_fold (pIIR_ExplicitRange , RegionStack & rstack);
int m_constant_fold (pIIR_AttrTypeValue , RegionStack & rstack);
int m_constant_fold (pIIR_AttrTypeFunc , RegionStack & rstack);
int m_constant_fold (pIIR_AttrArrayFunc , RegionStack & rstack);
int m_constant_fold (pIIR_ArrayRange , RegionStack & rstack);
int m_constant_fold (pIIR_ArrayReference , RegionStack & rstack);
int m_constant_fold (pIIR_SimpleReference , RegionStack & rstack);
int m_constant_fold (pIIR_FunctionCall , RegionStack & rstack);
int m_constant_fold (pIIR_EnumLiteralReference , RegionStack & rstack);
int m_constant_fold (pIIR_ArrayLiteralExpression , RegionStack & rstack);
int m_constant_fold (pIIR_AttrSigFunc , RegionStack & rstack);
int m_constant_fold (pIIR_ArraySubtype , RegionStack & rstack);
int m_constant_fold (pIIR_ArrayType , RegionStack & rstack);
int m_constant_fold (pIIR_ScalarSubtype , RegionStack & rstack);
int m_constant_fold (pIIR_PhysicalType , RegionStack & rstack);
int m_constant_fold (pIIR_Type , RegionStack & rstack);
void m_optimize (pIIR_ConcurrentGenerateForStatement , RegionStack & rstack);
void m_optimize (pIIR_ConcurrentGenerateIfStatement , RegionStack & rstack);
void m_optimize (pIIR_ComponentInstantiationStatement , RegionStack & rstack);
void m_optimize (pIIR_ComponentDeclaration , RegionStack & rstack);
void m_optimize (pIIR_ConfigurationDeclaration , RegionStack & rstack);
void m_optimize (pIIR_PackageBodyDeclaration , RegionStack & rstack);
void m_optimize (pIIR_PackageDeclaration , RegionStack & rstack);
void m_optimize (pIIR_ProcessStatement , RegionStack & rstack);
void m_optimize (pIIR_ConcurrentStatementList , RegionStack & rstack);
void m_optimize (pIIR_ArchitectureDeclaration , RegionStack & rstack);
void m_optimize (pIIR_Type , RegionStack & rstack);
void m_optimize (pIIR_EntityDeclaration , RegionStack & rstack);
void m_optimize (pIIR_SubprogramDeclaration , RegionStack & rstack);
void m_optimize (pIIR_PredefinedFunctionDeclaration , RegionStack & rstack);

struct v2cc_IIR_Declaration_ext : tree_prop {
  v2cc_IIR_Declaration_ext ();
  tree_prop_info *get_info ();
  RuntimeCheckFlags runtime_checks;
};

struct v2cc_IIR_Declaration_ext *get_v2cc_ext (pIIR_Declaration n);
static inline RuntimeCheckFlags& runtime_checks (pIIR_Declaration n) { return get_v2cc_ext (n)->runtime_checks; }

struct v2cc_IIR_Root_ext : tree_prop {
  v2cc_IIR_Root_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarativeRegion static_declarative_region;
  int done;
};

struct v2cc_IIR_Root_ext *get_v2cc_ext (pIIR_Root n);
static inline pIIR_DeclarativeRegion& static_declarative_region (pIIR_Root n) { return get_v2cc_ext (n)->static_declarative_region; }
static inline int& done (pIIR_Root n) { return get_v2cc_ext (n)->done; }

struct v2cc_IIR_LibraryUnit_ext : tree_prop {
  v2cc_IIR_LibraryUnit_ext ();
  tree_prop_info *get_info ();
  bool generate_code;
};

struct v2cc_IIR_LibraryUnit_ext *get_v2cc_ext (pIIR_LibraryUnit n);
static inline bool& generate_code (pIIR_LibraryUnit n) { return get_v2cc_ext (n)->generate_code; }

struct v2cc_IIR_Expression_ext : tree_prop {
  v2cc_IIR_Expression_ext ();
  tree_prop_info *get_info ();
  RuntimeCheckFlags runtime_checks;
  bool valid_folded_value;
  StaticDataType folded_value;
};

struct v2cc_IIR_Expression_ext *get_v2cc_ext (pIIR_Expression n);
static inline RuntimeCheckFlags& runtime_checks (pIIR_Expression n) { return get_v2cc_ext (n)->runtime_checks; }
static inline bool& valid_folded_value (pIIR_Expression n) { return get_v2cc_ext (n)->valid_folded_value; }
static inline StaticDataType& folded_value (pIIR_Expression n) { return get_v2cc_ext (n)->folded_value; }

struct v2cc_IIR_Literal_ext : tree_prop {
  v2cc_IIR_Literal_ext ();
  tree_prop_info *get_info ();
  bool valid_folded_value;
  StaticDataType folded_value;
};

struct v2cc_IIR_Literal_ext *get_v2cc_ext (pIIR_Literal n);
static inline bool& valid_folded_value (pIIR_Literal n) { return get_v2cc_ext (n)->valid_folded_value; }
static inline StaticDataType& folded_value (pIIR_Literal n) { return get_v2cc_ext (n)->folded_value; }

struct v2cc_IIR_EnumerationLiteral_ext : tree_prop {
  v2cc_IIR_EnumerationLiteral_ext ();
  tree_prop_info *get_info ();
  bool valid_folded_value;
  StaticDataType folded_value;
};

struct v2cc_IIR_EnumerationLiteral_ext *get_v2cc_ext (pIIR_EnumerationLiteral n);
static inline bool& valid_folded_value (pIIR_EnumerationLiteral n) { return get_v2cc_ext (n)->valid_folded_value; }
static inline StaticDataType& folded_value (pIIR_EnumerationLiteral n) { return get_v2cc_ext (n)->folded_value; }

struct v2cc_IIR_PhysicalUnit_ext : tree_prop {
  v2cc_IIR_PhysicalUnit_ext ();
  tree_prop_info *get_info ();
  bool valid_folded_value;
  StaticDataType folded_value;
};

struct v2cc_IIR_PhysicalUnit_ext *get_v2cc_ext (pIIR_PhysicalUnit n);
static inline bool& valid_folded_value (pIIR_PhysicalUnit n) { return get_v2cc_ext (n)->valid_folded_value; }
static inline StaticDataType& folded_value (pIIR_PhysicalUnit n) { return get_v2cc_ext (n)->folded_value; }

struct v2cc_IIR_Type_ext : tree_prop {
  v2cc_IIR_Type_ext ();
  tree_prop_info *get_info ();
  RuntimeCheckFlags runtime_checks;
};

struct v2cc_IIR_Type_ext *get_v2cc_ext (pIIR_Type n);
static inline RuntimeCheckFlags& runtime_checks (pIIR_Type n) { return get_v2cc_ext (n)->runtime_checks; }

struct v2cc_IIR_Subtype_ext : tree_prop {
  v2cc_IIR_Subtype_ext ();
  tree_prop_info *get_info ();
  pV2CC_ImplicitSubtypeDeclaration implicit_subtype_declaration;
};

struct v2cc_IIR_Subtype_ext *get_v2cc_ext (pIIR_Subtype n);
static inline pV2CC_ImplicitSubtypeDeclaration& implicit_subtype_declaration (pIIR_Subtype n) { return get_v2cc_ext (n)->implicit_subtype_declaration; }

struct v2cc_IIR_WaitStatement_ext : tree_prop {
  v2cc_IIR_WaitStatement_ext ();
  tree_prop_info *get_info ();
  int wait_info_index;
};

struct v2cc_IIR_WaitStatement_ext *get_v2cc_ext (pIIR_WaitStatement n);
static inline int& wait_info_index (pIIR_WaitStatement n) { return get_v2cc_ext (n)->wait_info_index; }

struct v2cc_IIR_ProcedureCallStatement_ext : tree_prop {
  v2cc_IIR_ProcedureCallStatement_ext ();
  tree_prop_info *get_info ();
  int wait_info_index;
};

struct v2cc_IIR_ProcedureCallStatement_ext *get_v2cc_ext (pIIR_ProcedureCallStatement n);
static inline int& wait_info_index (pIIR_ProcedureCallStatement n) { return get_v2cc_ext (n)->wait_info_index; }

struct v2cc_IIR_DeclarativeRegion_ext : tree_prop {
  v2cc_IIR_DeclarativeRegion_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarationList extended_declarations;
  ContextInfo context;
};

struct v2cc_IIR_DeclarativeRegion_ext *get_v2cc_ext (pIIR_DeclarativeRegion n);
static inline pIIR_DeclarationList& extended_declarations (pIIR_DeclarativeRegion n) { return get_v2cc_ext (n)->extended_declarations; }
static inline ContextInfo& context (pIIR_DeclarativeRegion n) { return get_v2cc_ext (n)->context; }

struct v2cc_IIR_EntityDeclaration_ext : tree_prop {
  v2cc_IIR_EntityDeclaration_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarationList extended_port_clause;
  pIIR_DeclarationList extended_generic_clause;
};

struct v2cc_IIR_EntityDeclaration_ext *get_v2cc_ext (pIIR_EntityDeclaration n);
static inline pIIR_DeclarationList& extended_port_clause (pIIR_EntityDeclaration n) { return get_v2cc_ext (n)->extended_port_clause; }
static inline pIIR_DeclarationList& extended_generic_clause (pIIR_EntityDeclaration n) { return get_v2cc_ext (n)->extended_generic_clause; }

struct v2cc_IIR_SubprogramDeclaration_ext : tree_prop {
  v2cc_IIR_SubprogramDeclaration_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarationList extended_interface_declarations;
};

struct v2cc_IIR_SubprogramDeclaration_ext *get_v2cc_ext (pIIR_SubprogramDeclaration n);
static inline pIIR_DeclarationList& extended_interface_declarations (pIIR_SubprogramDeclaration n) { return get_v2cc_ext (n)->extended_interface_declarations; }

struct v2cc_IIR_ConcurrentStatement_ext : tree_prop {
  v2cc_IIR_ConcurrentStatement_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarationList extended_interface_declarations;
};

struct v2cc_IIR_ConcurrentStatement_ext *get_v2cc_ext (pIIR_ConcurrentStatement n);
static inline pIIR_DeclarationList& extended_interface_declarations (pIIR_ConcurrentStatement n) { return get_v2cc_ext (n)->extended_interface_declarations; }

struct v2cc_IIR_BlockStatement_ext : tree_prop {
  v2cc_IIR_BlockStatement_ext ();
  tree_prop_info *get_info ();
  pIIR_DeclarationList extended_port_clause;
  pIIR_DeclarationList extended_generic_clause;
};

struct v2cc_IIR_BlockStatement_ext *get_v2cc_ext (pIIR_BlockStatement n);
static inline pIIR_DeclarationList& extended_port_clause (pIIR_BlockStatement n) { return get_v2cc_ext (n)->extended_port_clause; }
static inline pIIR_DeclarationList& extended_generic_clause (pIIR_BlockStatement n) { return get_v2cc_ext (n)->extended_generic_clause; }

struct v2cc_IIR_ArrayAggregate_ext : tree_prop {
  v2cc_IIR_ArrayAggregate_ext ();
  tree_prop_info *get_info ();
  int max_index;
  int min_index;
  int total_length;
  bool locally_static_ranges;
  bool has_others;
  bool known_subtype;
  bool named_association;
  IR_Direction dest_direction;
  int dest_right;
  int dest_left;
  int dest_length;
};

struct v2cc_IIR_ArrayAggregate_ext *get_v2cc_ext (pIIR_ArrayAggregate n);
static inline int& max_index (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->max_index; }
static inline int& min_index (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->min_index; }
static inline int& total_length (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->total_length; }
static inline bool& locally_static_ranges (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->locally_static_ranges; }
static inline bool& has_others (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->has_others; }
static inline bool& known_subtype (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->known_subtype; }
static inline bool& named_association (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->named_association; }
static inline IR_Direction& dest_direction (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->dest_direction; }
static inline int& dest_right (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->dest_right; }
static inline int& dest_left (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->dest_left; }
static inline int& dest_length (pIIR_ArrayAggregate n) { return get_v2cc_ext (n)->dest_length; }

struct v2cc_IIR_IndexedAssociation_ext : tree_prop {
  v2cc_IIR_IndexedAssociation_ext ();
  tree_prop_info *get_info ();
  int max_index;
  int min_index;
  int length;
  bool locally_static_range;
};

struct v2cc_IIR_IndexedAssociation_ext *get_v2cc_ext (pIIR_IndexedAssociation n);
static inline int& max_index (pIIR_IndexedAssociation n) { return get_v2cc_ext (n)->max_index; }
static inline int& min_index (pIIR_IndexedAssociation n) { return get_v2cc_ext (n)->min_index; }
static inline int& length (pIIR_IndexedAssociation n) { return get_v2cc_ext (n)->length; }
static inline bool& locally_static_range (pIIR_IndexedAssociation n) { return get_v2cc_ext (n)->locally_static_range; }

struct v2cc_IIR_EnumerationType_ext : tree_prop {
  v2cc_IIR_EnumerationType_ext ();
  tree_prop_info *get_info ();
  int enum_item_number;
};

struct v2cc_IIR_EnumerationType_ext *get_v2cc_ext (pIIR_EnumerationType n);
static inline int& enum_item_number (pIIR_EnumerationType n) { return get_v2cc_ext (n)->enum_item_number; }

struct v2cc_IIR_ObjectDeclaration_ext : tree_prop {
  v2cc_IIR_ObjectDeclaration_ext ();
  tree_prop_info *get_info ();
  bool alias_check_bounds;
};

struct v2cc_IIR_ObjectDeclaration_ext *get_v2cc_ext (pIIR_ObjectDeclaration n);
static inline bool& alias_check_bounds (pIIR_ObjectDeclaration n) { return get_v2cc_ext (n)->alias_check_bounds; }

struct v2cc_IIR_LoopStatement_ext : tree_prop {
  v2cc_IIR_LoopStatement_ext ();
  tree_prop_info *get_info ();
  int loop_id;
  bool exit_statement_used;
  bool next_statement_used;
};

struct v2cc_IIR_LoopStatement_ext *get_v2cc_ext (pIIR_LoopStatement n);
static inline int& loop_id (pIIR_LoopStatement n) { return get_v2cc_ext (n)->loop_id; }
static inline bool& exit_statement_used (pIIR_LoopStatement n) { return get_v2cc_ext (n)->exit_statement_used; }
static inline bool& next_statement_used (pIIR_LoopStatement n) { return get_v2cc_ext (n)->next_statement_used; }

struct v2cc_IIR_ProcessStatement_ext : tree_prop {
  v2cc_IIR_ProcessStatement_ext ();
  tree_prop_info *get_info ();
  bool has_wait_for;
  bool has_wait;
};

struct v2cc_IIR_ProcessStatement_ext *get_v2cc_ext (pIIR_ProcessStatement n);
static inline bool& has_wait_for (pIIR_ProcessStatement n) { return get_v2cc_ext (n)->has_wait_for; }
static inline bool& has_wait (pIIR_ProcessStatement n) { return get_v2cc_ext (n)->has_wait; }

struct v2cc_IIR_ProcedureDeclaration_ext : tree_prop {
  v2cc_IIR_ProcedureDeclaration_ext ();
  tree_prop_info *get_info ();
  bool has_wait_for;
  bool has_wait;
};

struct v2cc_IIR_ProcedureDeclaration_ext *get_v2cc_ext (pIIR_ProcedureDeclaration n);
static inline bool& has_wait_for (pIIR_ProcedureDeclaration n) { return get_v2cc_ext (n)->has_wait_for; }
static inline bool& has_wait (pIIR_ProcedureDeclaration n) { return get_v2cc_ext (n)->has_wait; }

void init_v2cc_chunk ();

#endif
