// generated by gen-nodes from `../freehdl/cdfggen-chunk.t'.  Do not edit.

#include <freehdl/cdfggen-chunk.h>
tree_ctype_info vector_int_ctype_info = {
  -1,
  "vector_int",
  NULL,
};
tree_ctype_info vector_pair_string_lint_ctype_info = {
  -1,
  "vector_pair_string_lint",
  NULL,
};
tree_ctype_info lint_ctype_info = {
  -1,
  "lint",
  NULL,
};
tree_ctype_info cdfgg_char_p_ctype_info = {
  -1,
  "cdfgg_char_p",
  NULL,
};
tree_ctype_info cdfgg_direction_ctype_info = {
  -1,
  "cdfgg_direction",
  NULL,
};
tree_ctype_info string_ctype_info = {
  -1,
  "string",
  NULL,
};
tree_ctype_info double_ctype_info = {
  -1,
  "double",
  NULL,
};
tree_ctype_info int_ctype_info = {
  -1,
  "int",
  NULL,
};

static tree_slot_info CDFGG_Node_slot_info[] = {
  { (tree_kind_info*)&int_ctype_info, "index", (tree_base_node*tree_base_node::*)&CDFGG_Node::index },
  { (tree_kind_info*)&string_ctype_info, "type", (tree_base_node*tree_base_node::*)&CDFGG_Node::type },
  { (tree_kind_info*)&vector_int_ctype_info, "incoming_edges", (tree_base_node*tree_base_node::*)&CDFGG_Node::incoming_edges },
  { (tree_kind_info*)&vector_int_ctype_info, "outgoing_edges", (tree_base_node*tree_base_node::*)&CDFGG_Node::outgoing_edges },
};

tree_kind_info CDFGG_NODE_kind_info = {
  0,
  "CDFGG_Node",
  &cdfggen_chunk_info,
  0,
  CDFGG_NODE,
  0,
  0, 4, CDFGG_Node_slot_info,
  sizeof(CDFGG_Node)
};

static tree_slot_info CDFGG_Edge_slot_info[] = {
  { CDFGG_TYPE, "type", (tree_base_node*tree_base_node::*)&CDFGG_Edge::type },
  { (tree_kind_info*)&int_ctype_info, "index", (tree_base_node*tree_base_node::*)&CDFGG_Edge::index },
  { (tree_kind_info*)&int_ctype_info, "in_node", (tree_base_node*tree_base_node::*)&CDFGG_Edge::in_node },
  { (tree_kind_info*)&int_ctype_info, "out_node", (tree_base_node*tree_base_node::*)&CDFGG_Edge::out_node },
};

tree_kind_info CDFGG_EDGE_kind_info = {
  1,
  "CDFGG_Edge",
  &cdfggen_chunk_info,
  0,
  CDFGG_DATA_EDGE,
  0,
  1, 4, CDFGG_Edge_slot_info,
  sizeof(CDFGG_Edge)
};

static tree_slot_info CDFGG_LiteralEdge_slot_info[] = {
};

tree_kind_info CDFGG_LITERAL_EDGE_kind_info = {
  2,
  "CDFGG_LiteralEdge",
  &cdfggen_chunk_info,
  CDFGG_EDGE,
  CDFGG_STRING_LITERAL_EDGE,
  0,
  0, 0, CDFGG_LiteralEdge_slot_info,
  sizeof(CDFGG_LiteralEdge)
};

static tree_slot_info CDFGG_RangeLiteralEdge_slot_info[] = {
  { (tree_kind_info*)&int_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_RangeLiteralEdge::left_bound },
  { (tree_kind_info*)&cdfgg_direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&CDFGG_RangeLiteralEdge::direction },
  { (tree_kind_info*)&int_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_RangeLiteralEdge::right_bound },
};

tree_kind_info CDFGG_RANGE_LITERAL_EDGE_kind_info = {
  3,
  "CDFGG_RangeLiteralEdge",
  &cdfggen_chunk_info,
  CDFGG_LITERAL_EDGE,
  CDFGG_RANGE_LITERAL_EDGE,
  0,
  0, 3, CDFGG_RangeLiteralEdge_slot_info,
  sizeof(CDFGG_RangeLiteralEdge)
};

static tree_slot_info CDFGG_RealLiteralEdge_slot_info[] = {
  { (tree_kind_info*)&double_ctype_info, "value", (tree_base_node*tree_base_node::*)&CDFGG_RealLiteralEdge::value },
};

tree_kind_info CDFGG_REAL_LITERAL_EDGE_kind_info = {
  4,
  "CDFGG_RealLiteralEdge",
  &cdfggen_chunk_info,
  CDFGG_LITERAL_EDGE,
  CDFGG_REAL_LITERAL_EDGE,
  0,
  0, 1, CDFGG_RealLiteralEdge_slot_info,
  sizeof(CDFGG_RealLiteralEdge)
};

static tree_slot_info CDFGG_IntegerLiteralEdge_slot_info[] = {
  { (tree_kind_info*)&int_ctype_info, "value", (tree_base_node*tree_base_node::*)&CDFGG_IntegerLiteralEdge::value },
};

tree_kind_info CDFGG_INTEGER_LITERAL_EDGE_kind_info = {
  5,
  "CDFGG_IntegerLiteralEdge",
  &cdfggen_chunk_info,
  CDFGG_LITERAL_EDGE,
  CDFGG_INTEGER_LITERAL_EDGE,
  0,
  0, 1, CDFGG_IntegerLiteralEdge_slot_info,
  sizeof(CDFGG_IntegerLiteralEdge)
};

static tree_slot_info CDFGG_StringLiteralEdge_slot_info[] = {
  { (tree_kind_info*)&cdfgg_char_p_ctype_info, "edge_name", (tree_base_node*tree_base_node::*)&CDFGG_StringLiteralEdge::edge_name },
};

tree_kind_info CDFGG_STRING_LITERAL_EDGE_kind_info = {
  6,
  "CDFGG_StringLiteralEdge",
  &cdfggen_chunk_info,
  CDFGG_LITERAL_EDGE,
  CDFGG_STRING_LITERAL_EDGE,
  0,
  0, 1, CDFGG_StringLiteralEdge_slot_info,
  sizeof(CDFGG_StringLiteralEdge)
};

static tree_slot_info CDFGG_DataEdge_slot_info[] = {
};

tree_kind_info CDFGG_DATA_EDGE_kind_info = {
  7,
  "CDFGG_DataEdge",
  &cdfggen_chunk_info,
  CDFGG_EDGE,
  CDFGG_DATA_EDGE,
  0,
  0, 0, CDFGG_DataEdge_slot_info,
  sizeof(CDFGG_DataEdge)
};

static tree_slot_info CDFGG_Type_slot_info[] = {
  { CDFGG_TYPE, "base_type", (tree_base_node*tree_base_node::*)&CDFGG_Type::base_type },
  { (tree_kind_info*)&string_ctype_info, "instance_name", (tree_base_node*tree_base_node::*)&CDFGG_Type::instance_name },
  { (tree_kind_info*)&string_ctype_info, "type_name", (tree_base_node*tree_base_node::*)&CDFGG_Type::type_name },
};

tree_kind_info CDFGG_TYPE_kind_info = {
  8,
  "CDFGG_Type",
  &cdfggen_chunk_info,
  0,
  CDFGG_INTEGER_TYPE,
  0,
  1, 3, CDFGG_Type_slot_info,
  sizeof(CDFGG_Type)
};

static tree_slot_info CDFGG_CompositeType_slot_info[] = {
};

tree_kind_info CDFGG_COMPOSITE_TYPE_kind_info = {
  9,
  "CDFGG_CompositeType",
  &cdfggen_chunk_info,
  CDFGG_TYPE,
  CDFGG_ARRAY_TYPE,
  0,
  0, 0, CDFGG_CompositeType_slot_info,
  sizeof(CDFGG_CompositeType)
};

static tree_slot_info CDFGG_ArrayType_slot_info[] = {
  { CDFGG_TYPE, "index_type", (tree_base_node*tree_base_node::*)&CDFGG_ArrayType::index_type },
  { CDFGG_TYPE, "element_type", (tree_base_node*tree_base_node::*)&CDFGG_ArrayType::element_type },
  { (tree_kind_info*)&lint_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_ArrayType::left_bound },
  { (tree_kind_info*)&cdfgg_direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&CDFGG_ArrayType::direction },
  { (tree_kind_info*)&lint_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_ArrayType::right_bound },
};

tree_kind_info CDFGG_ARRAY_TYPE_kind_info = {
  10,
  "CDFGG_ArrayType",
  &cdfggen_chunk_info,
  CDFGG_COMPOSITE_TYPE,
  CDFGG_ARRAY_TYPE,
  0,
  2, 5, CDFGG_ArrayType_slot_info,
  sizeof(CDFGG_ArrayType)
};

static tree_slot_info CDFGG_ScalarType_slot_info[] = {
};

tree_kind_info CDFGG_SCALAR_TYPE_kind_info = {
  11,
  "CDFGG_ScalarType",
  &cdfggen_chunk_info,
  CDFGG_TYPE,
  CDFGG_INTEGER_TYPE,
  0,
  0, 0, CDFGG_ScalarType_slot_info,
  sizeof(CDFGG_ScalarType)
};

static tree_slot_info CDFGG_PhysicalType_slot_info[] = {
  { (tree_kind_info*)&lint_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_PhysicalType::left_bound },
  { (tree_kind_info*)&cdfgg_direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&CDFGG_PhysicalType::direction },
  { (tree_kind_info*)&lint_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_PhysicalType::right_bound },
  { (tree_kind_info*)&vector_pair_string_lint_ctype_info, "units", (tree_base_node*tree_base_node::*)&CDFGG_PhysicalType::units },
};

tree_kind_info CDFGG_PHYSICAL_TYPE_kind_info = {
  12,
  "CDFGG_PhysicalType",
  &cdfggen_chunk_info,
  CDFGG_SCALAR_TYPE,
  CDFGG_PHYSICAL_TYPE,
  0,
  0, 4, CDFGG_PhysicalType_slot_info,
  sizeof(CDFGG_PhysicalType)
};

static tree_slot_info CDFGG_EnumerationType_slot_info[] = {
  { (tree_kind_info*)&int_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_EnumerationType::left_bound },
  { (tree_kind_info*)&int_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_EnumerationType::right_bound },
};

tree_kind_info CDFGG_ENUMERATION_TYPE_kind_info = {
  13,
  "CDFGG_EnumerationType",
  &cdfggen_chunk_info,
  CDFGG_SCALAR_TYPE,
  CDFGG_ENUMERATION_TYPE,
  0,
  0, 2, CDFGG_EnumerationType_slot_info,
  sizeof(CDFGG_EnumerationType)
};

static tree_slot_info CDFGG_RealType_slot_info[] = {
  { (tree_kind_info*)&double_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_RealType::left_bound },
  { (tree_kind_info*)&cdfgg_direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&CDFGG_RealType::direction },
  { (tree_kind_info*)&double_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_RealType::right_bound },
};

tree_kind_info CDFGG_REAL_TYPE_kind_info = {
  14,
  "CDFGG_RealType",
  &cdfggen_chunk_info,
  CDFGG_SCALAR_TYPE,
  CDFGG_REAL_TYPE,
  0,
  0, 3, CDFGG_RealType_slot_info,
  sizeof(CDFGG_RealType)
};

static tree_slot_info CDFGG_IntegerType_slot_info[] = {
  { (tree_kind_info*)&int_ctype_info, "left_bound", (tree_base_node*tree_base_node::*)&CDFGG_IntegerType::left_bound },
  { (tree_kind_info*)&cdfgg_direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&CDFGG_IntegerType::direction },
  { (tree_kind_info*)&int_ctype_info, "right_bound", (tree_base_node*tree_base_node::*)&CDFGG_IntegerType::right_bound },
};

tree_kind_info CDFGG_INTEGER_TYPE_kind_info = {
  15,
  "CDFGG_IntegerType",
  &cdfggen_chunk_info,
  CDFGG_SCALAR_TYPE,
  CDFGG_INTEGER_TYPE,
  0,
  0, 3, CDFGG_IntegerType_slot_info,
  sizeof(CDFGG_IntegerType)
};

tree_kind CDFGG_Type::kind () { return CDFGG_TYPE; }

tree_kind CDFGG_ScalarType::kind () { return CDFGG_SCALAR_TYPE; }

tree_kind CDFGG_IntegerType::kind () { return CDFGG_INTEGER_TYPE; }

tree_kind CDFGG_RealType::kind () { return CDFGG_REAL_TYPE; }

tree_kind CDFGG_EnumerationType::kind () { return CDFGG_ENUMERATION_TYPE; }

tree_kind CDFGG_PhysicalType::kind () { return CDFGG_PHYSICAL_TYPE; }

tree_kind CDFGG_CompositeType::kind () { return CDFGG_COMPOSITE_TYPE; }

tree_kind CDFGG_ArrayType::kind () { return CDFGG_ARRAY_TYPE; }

tree_kind CDFGG_Edge::kind () { return CDFGG_EDGE; }

tree_kind CDFGG_DataEdge::kind () { return CDFGG_DATA_EDGE; }

tree_kind CDFGG_LiteralEdge::kind () { return CDFGG_LITERAL_EDGE; }

tree_kind CDFGG_StringLiteralEdge::kind () { return CDFGG_STRING_LITERAL_EDGE; }

tree_kind CDFGG_IntegerLiteralEdge::kind () { return CDFGG_INTEGER_LITERAL_EDGE; }

tree_kind CDFGG_RealLiteralEdge::kind () { return CDFGG_REAL_LITERAL_EDGE; }

tree_kind CDFGG_RangeLiteralEdge::kind () { return CDFGG_RANGE_LITERAL_EDGE; }

tree_kind CDFGG_Node::kind () { return CDFGG_NODE; }

static tree_kind cdfggen_kinds[16] = {
  CDFGG_TYPE,
  CDFGG_SCALAR_TYPE,
  CDFGG_INTEGER_TYPE,
  CDFGG_REAL_TYPE,
  CDFGG_ENUMERATION_TYPE,
  CDFGG_PHYSICAL_TYPE,
  CDFGG_COMPOSITE_TYPE,
  CDFGG_ARRAY_TYPE,
  CDFGG_EDGE,
  CDFGG_DATA_EDGE,
  CDFGG_LITERAL_EDGE,
  CDFGG_STRING_LITERAL_EDGE,
  CDFGG_INTEGER_LITERAL_EDGE,
  CDFGG_REAL_LITERAL_EDGE,
  CDFGG_RANGE_LITERAL_EDGE,
  CDFGG_NODE,
};

struct tree_chunk_info cdfggen_chunk_info = {
  -1,
  "cdfggen",
  16,
  cdfggen_kinds
};

void init_cdfggen_chunk ()
{
  if (cdfggen_chunk_info.chunk_id != -1)
    return;

  tree_register_chunk (&cdfggen_chunk_info);
}

struct cdfggen_auto_initializer {
  cdfggen_auto_initializer () { init_cdfggen_chunk (); }
} cdfggen_ignition;
