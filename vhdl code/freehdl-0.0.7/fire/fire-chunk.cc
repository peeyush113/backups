// generated by gen-nodes from `../freehdl/fire-chunk.t'.  Do not edit.

#include <freehdl/fire-chunk.h>
tree_ctype_info IR_StaticLevel_ctype_info = {
  -1,
  "IR_StaticLevel",
  fire_print_int,
};
tree_ctype_info IR_DelayMechanism_ctype_info = {
  -1,
  "IR_DelayMechanism",
  fire_print_int,
};
tree_ctype_info IR_Direction_ctype_info = {
  -1,
  "IR_Direction",
  fire_print_int,
};
tree_ctype_info IR_Pure_ctype_info = {
  -1,
  "IR_Pure",
  fire_print_int,
};
tree_ctype_info IR_Mode_ctype_info = {
  -1,
  "IR_Mode",
  fire_print_int,
};
tree_ctype_info IR_SignalKind_ctype_info = {
  -1,
  "IR_SignalKind",
  fire_print_int,
};
tree_ctype_info IR_String_ctype_info = {
  -1,
  "IR_String",
  fire_print_IR_String,
};
tree_ctype_info IR_Character_ctype_info = {
  -1,
  "IR_Character",
  NULL,
};
tree_ctype_info IR_Kind_ctype_info = {
  -1,
  "IR_Kind",
  NULL,
};
tree_ctype_info int_ctype_info = {
  -1,
  "int",
  fire_print_int,
};
tree_ctype_info bool_ctype_info = {
  -1,
  "bool",
  fire_print_bool,
};
tree_ctype_info fire_string_ctype_info = {
  -1,
  "fire_string",
  fire_print_string,
};

static tree_slot_info IIR_Root_slot_info[] = {
  { IR_POS_INFO, "pos", (tree_base_node*tree_base_node::*)&IIR_Root::pos },
};

tree_kind_info IR_ROOT_kind_info = {
  0,
  "IIR_Root",
  &fire_chunk_info,
  0,
  IR_SIGNATURE,
  0,
  1, 1, IIR_Root_slot_info,
  sizeof(IIR_Root)
};

static tree_slot_info IIR_SequentialStatement_slot_info[] = {
  { IR_LABEL, "label", (tree_base_node*tree_base_node::*)&IIR_SequentialStatement::label },
};

tree_kind_info IR_SEQUENTIAL_STATEMENT_kind_info = {
  1,
  "IIR_SequentialStatement",
  &fire_chunk_info,
  IR_ROOT,
  IR_WAIT_STATEMENT,
  0,
  1, 1, IIR_SequentialStatement_slot_info,
  sizeof(IIR_SequentialStatement)
};

static tree_slot_info IIR_NullStatement_slot_info[] = {
};

tree_kind_info IR_NULL_STATEMENT_kind_info = {
  2,
  "IIR_NullStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_NULL_STATEMENT,
  0,
  0, 0, IIR_NullStatement_slot_info,
  sizeof(IIR_NullStatement)
};

static tree_slot_info IIR_ReturnStatement_slot_info[] = {
  { IR_SUBPROGRAM_DECLARATION, "enclosing_subprogram", (tree_base_node*tree_base_node::*)&IIR_ReturnStatement::enclosing_subprogram },
  { IR_EXPRESSION, "return_expression", (tree_base_node*tree_base_node::*)&IIR_ReturnStatement::return_expression },
};

tree_kind_info IR_RETURN_STATEMENT_kind_info = {
  3,
  "IIR_ReturnStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_RETURN_STATEMENT,
  0,
  2, 2, IIR_ReturnStatement_slot_info,
  sizeof(IIR_ReturnStatement)
};

static tree_slot_info IIR_LoopControlStatement_slot_info[] = {
  { IR_LOOP_STATEMENT, "loop", (tree_base_node*tree_base_node::*)&IIR_LoopControlStatement::loop },
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&IIR_LoopControlStatement::condition },
};

tree_kind_info IR_LOOP_CONTROL_STATEMENT_kind_info = {
  4,
  "IIR_LoopControlStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_NEXT_STATEMENT,
  0,
  2, 2, IIR_LoopControlStatement_slot_info,
  sizeof(IIR_LoopControlStatement)
};

static tree_slot_info IIR_ExitStatement_slot_info[] = {
};

tree_kind_info IR_EXIT_STATEMENT_kind_info = {
  5,
  "IIR_ExitStatement",
  &fire_chunk_info,
  IR_LOOP_CONTROL_STATEMENT,
  IR_EXIT_STATEMENT,
  0,
  0, 0, IIR_ExitStatement_slot_info,
  sizeof(IIR_ExitStatement)
};

static tree_slot_info IIR_NextStatement_slot_info[] = {
};

tree_kind_info IR_NEXT_STATEMENT_kind_info = {
  6,
  "IIR_NextStatement",
  &fire_chunk_info,
  IR_LOOP_CONTROL_STATEMENT,
  IR_NEXT_STATEMENT,
  0,
  0, 0, IIR_NextStatement_slot_info,
  sizeof(IIR_NextStatement)
};

static tree_slot_info IIR_LoopStatement_slot_info[] = {
  { IR_SEQUENTIAL_STATEMENT_LIST, "sequence_of_statements", (tree_base_node*tree_base_node::*)&IIR_LoopStatement::sequence_of_statements },
  { IR_LOOP_DECLARATIVE_REGION, "declarative_region", (tree_base_node*tree_base_node::*)&IIR_LoopStatement::declarative_region },
};

tree_kind_info IR_LOOP_STATEMENT_kind_info = {
  7,
  "IIR_LoopStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_FOR_LOOP_STATEMENT,
  0,
  2, 2, IIR_LoopStatement_slot_info,
  sizeof(IIR_LoopStatement)
};

static tree_slot_info IIR_WhileLoopStatement_slot_info[] = {
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&IIR_WhileLoopStatement::condition },
};

tree_kind_info IR_WHILE_LOOP_STATEMENT_kind_info = {
  8,
  "IIR_WhileLoopStatement",
  &fire_chunk_info,
  IR_LOOP_STATEMENT,
  IR_WHILE_LOOP_STATEMENT,
  0,
  1, 1, IIR_WhileLoopStatement_slot_info,
  sizeof(IIR_WhileLoopStatement)
};

static tree_slot_info IIR_ForLoopStatement_slot_info[] = {
  { IR_CONSTANT_DECLARATION, "iterator", (tree_base_node*tree_base_node::*)&IIR_ForLoopStatement::iterator },
};

tree_kind_info IR_FOR_LOOP_STATEMENT_kind_info = {
  9,
  "IIR_ForLoopStatement",
  &fire_chunk_info,
  IR_LOOP_STATEMENT,
  IR_FOR_LOOP_STATEMENT,
  0,
  1, 1, IIR_ForLoopStatement_slot_info,
  sizeof(IIR_ForLoopStatement)
};

static tree_slot_info IIR_CaseStatement_slot_info[] = {
  { IR_EXPRESSION, "expression", (tree_base_node*tree_base_node::*)&IIR_CaseStatement::expression },
  { IR_CASE_STATEMENT_ALTERNATIVE_LIST, "case_statement_alternatives", (tree_base_node*tree_base_node::*)&IIR_CaseStatement::case_statement_alternatives },
};

tree_kind_info IR_CASE_STATEMENT_kind_info = {
  10,
  "IIR_CaseStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_CASE_STATEMENT,
  0,
  2, 2, IIR_CaseStatement_slot_info,
  sizeof(IIR_CaseStatement)
};

static tree_slot_info IIR_IfStatement_slot_info[] = {
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&IIR_IfStatement::condition },
  { IR_SEQUENTIAL_STATEMENT_LIST, "then_sequence", (tree_base_node*tree_base_node::*)&IIR_IfStatement::then_sequence },
  { IR_SEQUENTIAL_STATEMENT_LIST, "else_sequence", (tree_base_node*tree_base_node::*)&IIR_IfStatement::else_sequence },
};

tree_kind_info IR_IF_STATEMENT_kind_info = {
  11,
  "IIR_IfStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_IF_STATEMENT,
  0,
  3, 3, IIR_IfStatement_slot_info,
  sizeof(IIR_IfStatement)
};

static tree_slot_info IIR_ProcedureCallStatement_slot_info[] = {
  { IR_PROCEDURE_DECLARATION, "procedure", (tree_base_node*tree_base_node::*)&IIR_ProcedureCallStatement::procedure },
  { IR_ASSOCIATION_LIST, "actual_parameter_part", (tree_base_node*tree_base_node::*)&IIR_ProcedureCallStatement::actual_parameter_part },
};

tree_kind_info IR_PROCEDURE_CALL_STATEMENT_kind_info = {
  12,
  "IIR_ProcedureCallStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_PROCEDURE_CALL_STATEMENT,
  0,
  2, 2, IIR_ProcedureCallStatement_slot_info,
  sizeof(IIR_ProcedureCallStatement)
};

static tree_slot_info IIR_VariableAssignmentStatement_slot_info[] = {
  { IR_EXPRESSION, "target", (tree_base_node*tree_base_node::*)&IIR_VariableAssignmentStatement::target },
  { IR_EXPRESSION, "expression", (tree_base_node*tree_base_node::*)&IIR_VariableAssignmentStatement::expression },
};

tree_kind_info IR_VARIABLE_ASSIGNMENT_STATEMENT_kind_info = {
  13,
  "IIR_VariableAssignmentStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_VARIABLE_ASSIGNMENT_STATEMENT,
  0,
  2, 2, IIR_VariableAssignmentStatement_slot_info,
  sizeof(IIR_VariableAssignmentStatement)
};

static tree_slot_info IIR_SignalAssignmentStatement_slot_info[] = {
  { IR_EXPRESSION, "target", (tree_base_node*tree_base_node::*)&IIR_SignalAssignmentStatement::target },
  { IR_EXPRESSION, "reject_time_expression", (tree_base_node*tree_base_node::*)&IIR_SignalAssignmentStatement::reject_time_expression },
  { IR_WAVEFORM_LIST, "waveform", (tree_base_node*tree_base_node::*)&IIR_SignalAssignmentStatement::waveform },
  { (tree_kind_info*)&IR_DelayMechanism_ctype_info, "delay_mechanism", (tree_base_node*tree_base_node::*)&IIR_SignalAssignmentStatement::delay_mechanism },
};

tree_kind_info IR_SIGNAL_ASSIGNMENT_STATEMENT_kind_info = {
  14,
  "IIR_SignalAssignmentStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_SIGNAL_ASSIGNMENT_STATEMENT,
  0,
  3, 4, IIR_SignalAssignmentStatement_slot_info,
  sizeof(IIR_SignalAssignmentStatement)
};

static tree_slot_info IIR_ReportStatement_slot_info[] = {
  { IR_EXPRESSION, "report_expression", (tree_base_node*tree_base_node::*)&IIR_ReportStatement::report_expression },
  { IR_EXPRESSION, "severity_expression", (tree_base_node*tree_base_node::*)&IIR_ReportStatement::severity_expression },
};

tree_kind_info IR_REPORT_STATEMENT_kind_info = {
  15,
  "IIR_ReportStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_REPORT_STATEMENT,
  0,
  2, 2, IIR_ReportStatement_slot_info,
  sizeof(IIR_ReportStatement)
};

static tree_slot_info IIR_AssertionStatement_slot_info[] = {
  { IR_EXPRESSION, "assertion_condition", (tree_base_node*tree_base_node::*)&IIR_AssertionStatement::assertion_condition },
  { IR_EXPRESSION, "report_expression", (tree_base_node*tree_base_node::*)&IIR_AssertionStatement::report_expression },
  { IR_EXPRESSION, "severity_expression", (tree_base_node*tree_base_node::*)&IIR_AssertionStatement::severity_expression },
};

tree_kind_info IR_ASSERTION_STATEMENT_kind_info = {
  16,
  "IIR_AssertionStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_ASSERTION_STATEMENT,
  0,
  3, 3, IIR_AssertionStatement_slot_info,
  sizeof(IIR_AssertionStatement)
};

static tree_slot_info IIR_WaitStatement_slot_info[] = {
  { IR_EXPRESSION, "condition_clause", (tree_base_node*tree_base_node::*)&IIR_WaitStatement::condition_clause },
  { IR_EXPRESSION, "timeout_clause", (tree_base_node*tree_base_node::*)&IIR_WaitStatement::timeout_clause },
  { IR_EXPRESSION_LIST, "sensitivity_list", (tree_base_node*tree_base_node::*)&IIR_WaitStatement::sensitivity_list },
};

tree_kind_info IR_WAIT_STATEMENT_kind_info = {
  17,
  "IIR_WaitStatement",
  &fire_chunk_info,
  IR_SEQUENTIAL_STATEMENT,
  IR_WAIT_STATEMENT,
  0,
  3, 3, IIR_WaitStatement_slot_info,
  sizeof(IIR_WaitStatement)
};

static tree_slot_info IIR_Expression_slot_info[] = {
  { IR_TYPE, "subtype", (tree_base_node*tree_base_node::*)&IIR_Expression::subtype },
  { (tree_kind_info*)&IR_StaticLevel_ctype_info, "static_level", (tree_base_node*tree_base_node::*)&IIR_Expression::static_level },
};

tree_kind_info IR_EXPRESSION_kind_info = {
  18,
  "IIR_Expression",
  &fire_chunk_info,
  IR_ROOT,
  IR_PHYSICAL_LITERAL,
  0,
  1, 2, IIR_Expression_slot_info,
  sizeof(IIR_Expression)
};

static tree_slot_info IIR_ValueAttr_slot_info[] = {
};

tree_kind_info IR_VALUE_ATTR_kind_info = {
  19,
  "IIR_ValueAttr",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ATTR_LEFT,
  0,
  0, 0, IIR_ValueAttr_slot_info,
  sizeof(IIR_ValueAttr)
};

static tree_slot_info IIR_AttrTypeValue_slot_info[] = {
  { IR_TYPE, "prefix", (tree_base_node*tree_base_node::*)&IIR_AttrTypeValue::prefix },
  { IR_EXPRESSION, "argument", (tree_base_node*tree_base_node::*)&IIR_AttrTypeValue::argument },
};

tree_kind_info IR_ATTR_TYPE_VALUE_kind_info = {
  20,
  "IIR_AttrTypeValue",
  &fire_chunk_info,
  IR_VALUE_ATTR,
  IR_ATTR_LEFT,
  0,
  2, 2, IIR_AttrTypeValue_slot_info,
  sizeof(IIR_AttrTypeValue)
};

static tree_slot_info IIR_Attr_LENGTH_slot_info[] = {
};

tree_kind_info IR_ATTR_LENGTH_kind_info = {
  21,
  "IIR_Attr_LENGTH",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_LENGTH,
  0,
  0, 0, IIR_Attr_LENGTH_slot_info,
  sizeof(IIR_Attr_LENGTH)
};

static tree_slot_info IIR_Attr_ASCENDING_slot_info[] = {
};

tree_kind_info IR_ATTR_ASCENDING_kind_info = {
  22,
  "IIR_Attr_ASCENDING",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_ASCENDING,
  0,
  0, 0, IIR_Attr_ASCENDING_slot_info,
  sizeof(IIR_Attr_ASCENDING)
};

static tree_slot_info IIR_Attr_HIGH_slot_info[] = {
};

tree_kind_info IR_ATTR_HIGH_kind_info = {
  23,
  "IIR_Attr_HIGH",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_HIGH,
  0,
  0, 0, IIR_Attr_HIGH_slot_info,
  sizeof(IIR_Attr_HIGH)
};

static tree_slot_info IIR_Attr_LOW_slot_info[] = {
};

tree_kind_info IR_ATTR_LOW_kind_info = {
  24,
  "IIR_Attr_LOW",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_LOW,
  0,
  0, 0, IIR_Attr_LOW_slot_info,
  sizeof(IIR_Attr_LOW)
};

static tree_slot_info IIR_Attr_RIGHT_slot_info[] = {
};

tree_kind_info IR_ATTR_RIGHT_kind_info = {
  25,
  "IIR_Attr_RIGHT",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_RIGHT,
  0,
  0, 0, IIR_Attr_RIGHT_slot_info,
  sizeof(IIR_Attr_RIGHT)
};

static tree_slot_info IIR_Attr_LEFT_slot_info[] = {
};

tree_kind_info IR_ATTR_LEFT_kind_info = {
  26,
  "IIR_Attr_LEFT",
  &fire_chunk_info,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_LEFT,
  0,
  0, 0, IIR_Attr_LEFT_slot_info,
  sizeof(IIR_Attr_LEFT)
};

static tree_slot_info IIR_FunctionAttr_slot_info[] = {
};

tree_kind_info IR_FUNCTION_ATTR_kind_info = {
  27,
  "IIR_FunctionAttr",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ATTR_EVENT,
  0,
  0, 0, IIR_FunctionAttr_slot_info,
  sizeof(IIR_FunctionAttr)
};

static tree_slot_info IIR_AttrArrayFunc_slot_info[] = {
  { IR_EXPRESSION, "array", (tree_base_node*tree_base_node::*)&IIR_AttrArrayFunc::array },
  { IR_TYPE, "array_type", (tree_base_node*tree_base_node::*)&IIR_AttrArrayFunc::array_type },
  { (tree_kind_info*)&int_ctype_info, "index", (tree_base_node*tree_base_node::*)&IIR_AttrArrayFunc::index },
};

tree_kind_info IR_ATTR_ARRAY_FUNC_kind_info = {
  28,
  "IIR_AttrArrayFunc",
  &fire_chunk_info,
  IR_FUNCTION_ATTR,
  IR_ATTR_ARRAY_LEFT,
  0,
  2, 3, IIR_AttrArrayFunc_slot_info,
  sizeof(IIR_AttrArrayFunc)
};

static tree_slot_info IIR_Attr_ArrayLENGTH_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_LENGTH_kind_info = {
  29,
  "IIR_Attr_ArrayLENGTH",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_LENGTH,
  0,
  0, 0, IIR_Attr_ArrayLENGTH_slot_info,
  sizeof(IIR_Attr_ArrayLENGTH)
};

static tree_slot_info IIR_Attr_ArrayASCENDING_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_ASCENDING_kind_info = {
  30,
  "IIR_Attr_ArrayASCENDING",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_ASCENDING,
  0,
  0, 0, IIR_Attr_ArrayASCENDING_slot_info,
  sizeof(IIR_Attr_ArrayASCENDING)
};

static tree_slot_info IIR_Attr_ArrayLOW_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_LOW_kind_info = {
  31,
  "IIR_Attr_ArrayLOW",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_LOW,
  0,
  0, 0, IIR_Attr_ArrayLOW_slot_info,
  sizeof(IIR_Attr_ArrayLOW)
};

static tree_slot_info IIR_Attr_ArrayHIGH_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_HIGH_kind_info = {
  32,
  "IIR_Attr_ArrayHIGH",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_HIGH,
  0,
  0, 0, IIR_Attr_ArrayHIGH_slot_info,
  sizeof(IIR_Attr_ArrayHIGH)
};

static tree_slot_info IIR_Attr_ArrayRIGHT_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_RIGHT_kind_info = {
  33,
  "IIR_Attr_ArrayRIGHT",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_RIGHT,
  0,
  0, 0, IIR_Attr_ArrayRIGHT_slot_info,
  sizeof(IIR_Attr_ArrayRIGHT)
};

static tree_slot_info IIR_Attr_ArrayLEFT_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_LEFT_kind_info = {
  34,
  "IIR_Attr_ArrayLEFT",
  &fire_chunk_info,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_LEFT,
  0,
  0, 0, IIR_Attr_ArrayLEFT_slot_info,
  sizeof(IIR_Attr_ArrayLEFT)
};

static tree_slot_info IIR_AttrTypeFunc_slot_info[] = {
  { IR_TYPE, "prefix", (tree_base_node*tree_base_node::*)&IIR_AttrTypeFunc::prefix },
  { IR_EXPRESSION, "argument", (tree_base_node*tree_base_node::*)&IIR_AttrTypeFunc::argument },
};

tree_kind_info IR_ATTR_TYPE_FUNC_kind_info = {
  35,
  "IIR_AttrTypeFunc",
  &fire_chunk_info,
  IR_FUNCTION_ATTR,
  IR_ATTR_IMAGE,
  0,
  2, 2, IIR_AttrTypeFunc_slot_info,
  sizeof(IIR_AttrTypeFunc)
};

static tree_slot_info IIR_Attr_RIGHTOF_slot_info[] = {
};

tree_kind_info IR_ATTR_RIGHTOF_kind_info = {
  36,
  "IIR_Attr_RIGHTOF",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_RIGHTOF,
  0,
  0, 0, IIR_Attr_RIGHTOF_slot_info,
  sizeof(IIR_Attr_RIGHTOF)
};

static tree_slot_info IIR_Attr_LEFTOF_slot_info[] = {
};

tree_kind_info IR_ATTR_LEFTOF_kind_info = {
  37,
  "IIR_Attr_LEFTOF",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_LEFTOF,
  0,
  0, 0, IIR_Attr_LEFTOF_slot_info,
  sizeof(IIR_Attr_LEFTOF)
};

static tree_slot_info IIR_Attr_PRED_slot_info[] = {
};

tree_kind_info IR_ATTR_PRED_kind_info = {
  38,
  "IIR_Attr_PRED",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_PRED,
  0,
  0, 0, IIR_Attr_PRED_slot_info,
  sizeof(IIR_Attr_PRED)
};

static tree_slot_info IIR_Attr_SUCC_slot_info[] = {
};

tree_kind_info IR_ATTR_SUCC_kind_info = {
  39,
  "IIR_Attr_SUCC",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_SUCC,
  0,
  0, 0, IIR_Attr_SUCC_slot_info,
  sizeof(IIR_Attr_SUCC)
};

static tree_slot_info IIR_Attr_VAL_slot_info[] = {
};

tree_kind_info IR_ATTR_VAL_kind_info = {
  40,
  "IIR_Attr_VAL",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_VAL,
  0,
  0, 0, IIR_Attr_VAL_slot_info,
  sizeof(IIR_Attr_VAL)
};

static tree_slot_info IIR_Attr_POS_slot_info[] = {
};

tree_kind_info IR_ATTR_POS_kind_info = {
  41,
  "IIR_Attr_POS",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_POS,
  0,
  0, 0, IIR_Attr_POS_slot_info,
  sizeof(IIR_Attr_POS)
};

static tree_slot_info IIR_Attr_VALUE_slot_info[] = {
};

tree_kind_info IR_ATTR_VALUE_kind_info = {
  42,
  "IIR_Attr_VALUE",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_VALUE,
  0,
  0, 0, IIR_Attr_VALUE_slot_info,
  sizeof(IIR_Attr_VALUE)
};

static tree_slot_info IIR_Attr_IMAGE_slot_info[] = {
};

tree_kind_info IR_ATTR_IMAGE_kind_info = {
  43,
  "IIR_Attr_IMAGE",
  &fire_chunk_info,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_IMAGE,
  0,
  0, 0, IIR_Attr_IMAGE_slot_info,
  sizeof(IIR_Attr_IMAGE)
};

static tree_slot_info IIR_AttrSigFunc_slot_info[] = {
  { IR_OBJECT_REFERENCE, "signal", (tree_base_node*tree_base_node::*)&IIR_AttrSigFunc::signal },
};

tree_kind_info IR_ATTR_SIG_FUNC_kind_info = {
  44,
  "IIR_AttrSigFunc",
  &fire_chunk_info,
  IR_FUNCTION_ATTR,
  IR_ATTR_EVENT,
  0,
  1, 1, IIR_AttrSigFunc_slot_info,
  sizeof(IIR_AttrSigFunc)
};

static tree_slot_info IIR_Attr_DRIVING_VALUE_slot_info[] = {
};

tree_kind_info IR_ATTR_DRIVING_VALUE_kind_info = {
  45,
  "IIR_Attr_DRIVING_VALUE",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_DRIVING_VALUE,
  0,
  0, 0, IIR_Attr_DRIVING_VALUE_slot_info,
  sizeof(IIR_Attr_DRIVING_VALUE)
};

static tree_slot_info IIR_Attr_DRIVING_slot_info[] = {
};

tree_kind_info IR_ATTR_DRIVING_kind_info = {
  46,
  "IIR_Attr_DRIVING",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_DRIVING,
  0,
  0, 0, IIR_Attr_DRIVING_slot_info,
  sizeof(IIR_Attr_DRIVING)
};

static tree_slot_info IIR_Attr_LAST_VALUE_slot_info[] = {
};

tree_kind_info IR_ATTR_LAST_VALUE_kind_info = {
  47,
  "IIR_Attr_LAST_VALUE",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_LAST_VALUE,
  0,
  0, 0, IIR_Attr_LAST_VALUE_slot_info,
  sizeof(IIR_Attr_LAST_VALUE)
};

static tree_slot_info IIR_Attr_LAST_ACTIVE_slot_info[] = {
};

tree_kind_info IR_ATTR_LAST_ACTIVE_kind_info = {
  48,
  "IIR_Attr_LAST_ACTIVE",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_LAST_ACTIVE,
  0,
  0, 0, IIR_Attr_LAST_ACTIVE_slot_info,
  sizeof(IIR_Attr_LAST_ACTIVE)
};

static tree_slot_info IIR_Attr_LAST_EVENT_slot_info[] = {
};

tree_kind_info IR_ATTR_LAST_EVENT_kind_info = {
  49,
  "IIR_Attr_LAST_EVENT",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_LAST_EVENT,
  0,
  0, 0, IIR_Attr_LAST_EVENT_slot_info,
  sizeof(IIR_Attr_LAST_EVENT)
};

static tree_slot_info IIR_Attr_ACTIVE_slot_info[] = {
};

tree_kind_info IR_ATTR_ACTIVE_kind_info = {
  50,
  "IIR_Attr_ACTIVE",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_ACTIVE,
  0,
  0, 0, IIR_Attr_ACTIVE_slot_info,
  sizeof(IIR_Attr_ACTIVE)
};

static tree_slot_info IIR_Attr_EVENT_slot_info[] = {
};

tree_kind_info IR_ATTR_EVENT_kind_info = {
  51,
  "IIR_Attr_EVENT",
  &fire_chunk_info,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_EVENT,
  0,
  0, 0, IIR_Attr_EVENT_slot_info,
  sizeof(IIR_Attr_EVENT)
};

static tree_slot_info IIR_ObjectReference_slot_info[] = {
};

tree_kind_info IR_OBJECT_REFERENCE_kind_info = {
  52,
  "IIR_ObjectReference",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_SIMPLE_REFERENCE,
  0,
  0, 0, IIR_ObjectReference_slot_info,
  sizeof(IIR_ObjectReference)
};

static tree_slot_info IIR_SignalAttr_slot_info[] = {
  { IR_OBJECT_REFERENCE, "signal", (tree_base_node*tree_base_node::*)&IIR_SignalAttr::signal },
};

tree_kind_info IR_SIGNAL_ATTR_kind_info = {
  53,
  "IIR_SignalAttr",
  &fire_chunk_info,
  IR_OBJECT_REFERENCE,
  IR_ATTR_DELAYED,
  0,
  1, 1, IIR_SignalAttr_slot_info,
  sizeof(IIR_SignalAttr)
};

static tree_slot_info IIR_Attr_TRANSACTION_slot_info[] = {
};

tree_kind_info IR_ATTR_TRANSACTION_kind_info = {
  54,
  "IIR_Attr_TRANSACTION",
  &fire_chunk_info,
  IR_SIGNAL_ATTR,
  IR_ATTR_TRANSACTION,
  0,
  0, 0, IIR_Attr_TRANSACTION_slot_info,
  sizeof(IIR_Attr_TRANSACTION)
};

static tree_slot_info IIR_Attr_QUIET_slot_info[] = {
  { IR_EXPRESSION, "duration", (tree_base_node*tree_base_node::*)&IIR_Attr_QUIET::duration },
};

tree_kind_info IR_ATTR_QUIET_kind_info = {
  55,
  "IIR_Attr_QUIET",
  &fire_chunk_info,
  IR_SIGNAL_ATTR,
  IR_ATTR_QUIET,
  0,
  1, 1, IIR_Attr_QUIET_slot_info,
  sizeof(IIR_Attr_QUIET)
};

static tree_slot_info IIR_Attr_STABLE_slot_info[] = {
  { IR_EXPRESSION, "duration", (tree_base_node*tree_base_node::*)&IIR_Attr_STABLE::duration },
};

tree_kind_info IR_ATTR_STABLE_kind_info = {
  56,
  "IIR_Attr_STABLE",
  &fire_chunk_info,
  IR_SIGNAL_ATTR,
  IR_ATTR_STABLE,
  0,
  1, 1, IIR_Attr_STABLE_slot_info,
  sizeof(IIR_Attr_STABLE)
};

static tree_slot_info IIR_Attr_DELAYED_slot_info[] = {
  { IR_EXPRESSION, "delay", (tree_base_node*tree_base_node::*)&IIR_Attr_DELAYED::delay },
};

tree_kind_info IR_ATTR_DELAYED_kind_info = {
  57,
  "IIR_Attr_DELAYED",
  &fire_chunk_info,
  IR_SIGNAL_ATTR,
  IR_ATTR_DELAYED,
  0,
  1, 1, IIR_Attr_DELAYED_slot_info,
  sizeof(IIR_Attr_DELAYED)
};

static tree_slot_info IIR_GenericArrayReference_slot_info[] = {
  { IR_EXPRESSION, "array", (tree_base_node*tree_base_node::*)&IIR_GenericArrayReference::array },
};

tree_kind_info IR_GENERIC_ARRAY_REFERENCE_kind_info = {
  58,
  "IIR_GenericArrayReference",
  &fire_chunk_info,
  IR_OBJECT_REFERENCE,
  IR_ARRAY_REFERENCE,
  0,
  1, 1, IIR_GenericArrayReference_slot_info,
  sizeof(IIR_GenericArrayReference)
};

static tree_slot_info IIR_SliceReference_slot_info[] = {
  { IR_RANGE, "range", (tree_base_node*tree_base_node::*)&IIR_SliceReference::range },
};

tree_kind_info IR_SLICE_REFERENCE_kind_info = {
  59,
  "IIR_SliceReference",
  &fire_chunk_info,
  IR_GENERIC_ARRAY_REFERENCE,
  IR_SLICE_REFERENCE,
  0,
  1, 1, IIR_SliceReference_slot_info,
  sizeof(IIR_SliceReference)
};

static tree_slot_info IIR_ArrayReference_slot_info[] = {
  { IR_EXPRESSION_LIST, "indices", (tree_base_node*tree_base_node::*)&IIR_ArrayReference::indices },
};

tree_kind_info IR_ARRAY_REFERENCE_kind_info = {
  60,
  "IIR_ArrayReference",
  &fire_chunk_info,
  IR_GENERIC_ARRAY_REFERENCE,
  IR_ARRAY_REFERENCE,
  0,
  1, 1, IIR_ArrayReference_slot_info,
  sizeof(IIR_ArrayReference)
};

static tree_slot_info IIR_RecordReference_slot_info[] = {
  { IR_EXPRESSION, "record", (tree_base_node*tree_base_node::*)&IIR_RecordReference::record },
  { IR_ELEMENT_DECLARATION, "element", (tree_base_node*tree_base_node::*)&IIR_RecordReference::element },
};

tree_kind_info IR_RECORD_REFERENCE_kind_info = {
  61,
  "IIR_RecordReference",
  &fire_chunk_info,
  IR_OBJECT_REFERENCE,
  IR_RECORD_REFERENCE,
  0,
  2, 2, IIR_RecordReference_slot_info,
  sizeof(IIR_RecordReference)
};

static tree_slot_info IIR_AccessReference_slot_info[] = {
  { IR_EXPRESSION, "access", (tree_base_node*tree_base_node::*)&IIR_AccessReference::access },
};

tree_kind_info IR_ACCESS_REFERENCE_kind_info = {
  62,
  "IIR_AccessReference",
  &fire_chunk_info,
  IR_OBJECT_REFERENCE,
  IR_ACCESS_REFERENCE,
  0,
  1, 1, IIR_AccessReference_slot_info,
  sizeof(IIR_AccessReference)
};

static tree_slot_info IIR_SimpleReference_slot_info[] = {
  { IR_OBJECT_DECLARATION, "object", (tree_base_node*tree_base_node::*)&IIR_SimpleReference::object },
};

tree_kind_info IR_SIMPLE_REFERENCE_kind_info = {
  63,
  "IIR_SimpleReference",
  &fire_chunk_info,
  IR_OBJECT_REFERENCE,
  IR_SIMPLE_REFERENCE,
  0,
  1, 1, IIR_SimpleReference_slot_info,
  sizeof(IIR_SimpleReference)
};

static tree_slot_info IIR_OpenExpression_slot_info[] = {
};

tree_kind_info IR_OPEN_EXPRESSION_kind_info = {
  64,
  "IIR_OpenExpression",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_OPEN_EXPRESSION,
  0,
  0, 0, IIR_OpenExpression_slot_info,
  sizeof(IIR_OpenExpression)
};

static tree_slot_info IIR_Allocator_slot_info[] = {
  { IR_TYPE, "type_mark", (tree_base_node*tree_base_node::*)&IIR_Allocator::type_mark },
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_Allocator::value },
};

tree_kind_info IR_ALLOCATOR_kind_info = {
  65,
  "IIR_Allocator",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ALLOCATOR,
  0,
  2, 2, IIR_Allocator_slot_info,
  sizeof(IIR_Allocator)
};

static tree_slot_info IIR_TypeConversion_slot_info[] = {
  { IR_TYPE, "type_mark", (tree_base_node*tree_base_node::*)&IIR_TypeConversion::type_mark },
  { IR_EXPRESSION, "expression", (tree_base_node*tree_base_node::*)&IIR_TypeConversion::expression },
};

tree_kind_info IR_TYPE_CONVERSION_kind_info = {
  66,
  "IIR_TypeConversion",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_TYPE_CONVERSION,
  0,
  2, 2, IIR_TypeConversion_slot_info,
  sizeof(IIR_TypeConversion)
};

static tree_slot_info IIR_QualifiedExpression_slot_info[] = {
  { IR_TYPE, "type_mark", (tree_base_node*tree_base_node::*)&IIR_QualifiedExpression::type_mark },
  { IR_EXPRESSION, "expression", (tree_base_node*tree_base_node::*)&IIR_QualifiedExpression::expression },
};

tree_kind_info IR_QUALIFIED_EXPRESSION_kind_info = {
  67,
  "IIR_QualifiedExpression",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_QUALIFIED_EXPRESSION,
  0,
  2, 2, IIR_QualifiedExpression_slot_info,
  sizeof(IIR_QualifiedExpression)
};

static tree_slot_info IIR_FunctionCall_slot_info[] = {
  { IR_FUNCTION_DECLARATION, "function", (tree_base_node*tree_base_node::*)&IIR_FunctionCall::function },
  { IR_ASSOCIATION_LIST, "parameter_association_list", (tree_base_node*tree_base_node::*)&IIR_FunctionCall::parameter_association_list },
};

tree_kind_info IR_FUNCTION_CALL_kind_info = {
  68,
  "IIR_FunctionCall",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_FUNCTION_CALL,
  0,
  2, 2, IIR_FunctionCall_slot_info,
  sizeof(IIR_FunctionCall)
};

static tree_slot_info IIR_Aggregate_slot_info[] = {
};

tree_kind_info IR_AGGREGATE_kind_info = {
  69,
  "IIR_Aggregate",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ARTIFICIAL_RECORD_AGGREGATE,
  0,
  0, 0, IIR_Aggregate_slot_info,
  sizeof(IIR_Aggregate)
};

static tree_slot_info IIR_ArrayAggregate_slot_info[] = {
  { IR_INDEXED_ASSOCIATION_LIST, "indexed_association_list", (tree_base_node*tree_base_node::*)&IIR_ArrayAggregate::indexed_association_list },
};

tree_kind_info IR_ARRAY_AGGREGATE_kind_info = {
  70,
  "IIR_ArrayAggregate",
  &fire_chunk_info,
  IR_AGGREGATE,
  IR_ARTIFICIAL_ARRAY_AGGREGATE,
  0,
  1, 1, IIR_ArrayAggregate_slot_info,
  sizeof(IIR_ArrayAggregate)
};

static tree_slot_info IIR_ArtificialArrayAggregate_slot_info[] = {
};

tree_kind_info IR_ARTIFICIAL_ARRAY_AGGREGATE_kind_info = {
  71,
  "IIR_ArtificialArrayAggregate",
  &fire_chunk_info,
  IR_ARRAY_AGGREGATE,
  IR_ARTIFICIAL_ARRAY_AGGREGATE,
  0,
  0, 0, IIR_ArtificialArrayAggregate_slot_info,
  sizeof(IIR_ArtificialArrayAggregate)
};

static tree_slot_info IIR_RecordAggregate_slot_info[] = {
  { IR_ELEMENT_ASSOCIATION_LIST, "element_association_list", (tree_base_node*tree_base_node::*)&IIR_RecordAggregate::element_association_list },
};

tree_kind_info IR_RECORD_AGGREGATE_kind_info = {
  72,
  "IIR_RecordAggregate",
  &fire_chunk_info,
  IR_AGGREGATE,
  IR_ARTIFICIAL_RECORD_AGGREGATE,
  0,
  1, 1, IIR_RecordAggregate_slot_info,
  sizeof(IIR_RecordAggregate)
};

static tree_slot_info IIR_ArtificialRecordAggregate_slot_info[] = {
};

tree_kind_info IR_ARTIFICIAL_RECORD_AGGREGATE_kind_info = {
  73,
  "IIR_ArtificialRecordAggregate",
  &fire_chunk_info,
  IR_RECORD_AGGREGATE,
  IR_ARTIFICIAL_RECORD_AGGREGATE,
  0,
  0, 0, IIR_ArtificialRecordAggregate_slot_info,
  sizeof(IIR_ArtificialRecordAggregate)
};

static tree_slot_info IIR_NullExpression_slot_info[] = {
};

tree_kind_info IR_NULL_EXPRESSION_kind_info = {
  74,
  "IIR_NullExpression",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_NULL_EXPRESSION,
  0,
  0, 0, IIR_NullExpression_slot_info,
  sizeof(IIR_NullExpression)
};

static tree_slot_info IIR_EnumLiteralReference_slot_info[] = {
  { IR_ENUMERATION_LITERAL, "value", (tree_base_node*tree_base_node::*)&IIR_EnumLiteralReference::value },
};

tree_kind_info IR_ENUM_LITERAL_REFERENCE_kind_info = {
  75,
  "IIR_EnumLiteralReference",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ENUM_LITERAL_REFERENCE,
  0,
  1, 1, IIR_EnumLiteralReference_slot_info,
  sizeof(IIR_EnumLiteralReference)
};

static tree_slot_info IIR_ArrayLiteralExpression_slot_info[] = {
  { IR_STRING_LITERAL, "value", (tree_base_node*tree_base_node::*)&IIR_ArrayLiteralExpression::value },
};

tree_kind_info IR_ARRAY_LITERAL_EXPRESSION_kind_info = {
  76,
  "IIR_ArrayLiteralExpression",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_ARRAY_LITERAL_EXPRESSION,
  0,
  1, 1, IIR_ArrayLiteralExpression_slot_info,
  sizeof(IIR_ArrayLiteralExpression)
};

static tree_slot_info IIR_AbstractLiteralExpression_slot_info[] = {
  { IR_ABSTRACT_LITERAL, "value", (tree_base_node*tree_base_node::*)&IIR_AbstractLiteralExpression::value },
};

tree_kind_info IR_ABSTRACT_LITERAL_EXPRESSION_kind_info = {
  77,
  "IIR_AbstractLiteralExpression",
  &fire_chunk_info,
  IR_EXPRESSION,
  IR_PHYSICAL_LITERAL,
  0,
  1, 1, IIR_AbstractLiteralExpression_slot_info,
  sizeof(IIR_AbstractLiteralExpression)
};

static tree_slot_info IIR_PhysicalLiteral_slot_info[] = {
  { IR_PHYSICAL_UNIT, "unit", (tree_base_node*tree_base_node::*)&IIR_PhysicalLiteral::unit },
};

tree_kind_info IR_PHYSICAL_LITERAL_kind_info = {
  78,
  "IIR_PhysicalLiteral",
  &fire_chunk_info,
  IR_ABSTRACT_LITERAL_EXPRESSION,
  IR_PHYSICAL_LITERAL,
  0,
  1, 1, IIR_PhysicalLiteral_slot_info,
  sizeof(IIR_PhysicalLiteral)
};

static tree_slot_info IIR_Declaration_slot_info[] = {
  { IR_TEXT_LITERAL, "declarator", (tree_base_node*tree_base_node::*)&IIR_Declaration::declarator },
  { IR_DECLARATIVE_REGION, "declarative_region", (tree_base_node*tree_base_node::*)&IIR_Declaration::declarative_region },
  { IR_ATTRIBUTE_VALUE_LIST, "attributes", (tree_base_node*tree_base_node::*)&IIR_Declaration::attributes },
  { (tree_kind_info*)&int_ctype_info, "seqno", (tree_base_node*tree_base_node::*)&IIR_Declaration::seqno },
};

tree_kind_info IR_DECLARATION_kind_info = {
  79,
  "IIR_Declaration",
  &fire_chunk_info,
  IR_ROOT,
  IR_LOOP_DECLARATIVE_REGION,
  0,
  3, 4, IIR_Declaration_slot_info,
  sizeof(IIR_Declaration)
};

static tree_slot_info IIR_UseClause_slot_info[] = {
  { IR_DECLARATION, "used_unit", (tree_base_node*tree_base_node::*)&IIR_UseClause::used_unit },
};

tree_kind_info IR_USE_CLAUSE_kind_info = {
  80,
  "IIR_UseClause",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_USE_CLAUSE,
  0,
  1, 1, IIR_UseClause_slot_info,
  sizeof(IIR_UseClause)
};

static tree_slot_info IIR_LibraryClause_slot_info[] = {
};

tree_kind_info IR_LIBRARY_CLAUSE_kind_info = {
  81,
  "IIR_LibraryClause",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_LIBRARY_CLAUSE,
  0,
  0, 0, IIR_LibraryClause_slot_info,
  sizeof(IIR_LibraryClause)
};

static tree_slot_info IIR_Label_slot_info[] = {
  { IR_SEQUENTIAL_STATEMENT, "statement", (tree_base_node*tree_base_node::*)&IIR_Label::statement },
};

tree_kind_info IR_LABEL_kind_info = {
  82,
  "IIR_Label",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_LABEL,
  0,
  1, 1, IIR_Label_slot_info,
  sizeof(IIR_Label)
};

static tree_slot_info IIR_DisconnectSpecification_slot_info[] = {
  { IR_TYPE, "type_mark", (tree_base_node*tree_base_node::*)&IIR_DisconnectSpecification::type_mark },
  { IR_EXPRESSION, "time_expression", (tree_base_node*tree_base_node::*)&IIR_DisconnectSpecification::time_expression },
  { IR_OBJECT_REFERENCE, "guarded_signal", (tree_base_node*tree_base_node::*)&IIR_DisconnectSpecification::guarded_signal },
};

tree_kind_info IR_DISCONNECT_SPECIFICATION_kind_info = {
  83,
  "IIR_DisconnectSpecification",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_DISCONNECT_SPECIFICATION,
  0,
  3, 3, IIR_DisconnectSpecification_slot_info,
  sizeof(IIR_DisconnectSpecification)
};

static tree_slot_info IIR_PhysicalUnit_slot_info[] = {
  { IR_EXPRESSION, "multiplier", (tree_base_node*tree_base_node::*)&IIR_PhysicalUnit::multiplier },
  { IR_PHYSICAL_UNIT, "unit_name", (tree_base_node*tree_base_node::*)&IIR_PhysicalUnit::unit_name },
  { IR_PHYSICAL_TYPE, "type", (tree_base_node*tree_base_node::*)&IIR_PhysicalUnit::type },
  { (tree_kind_info*)&int_ctype_info, "unit_pos", (tree_base_node*tree_base_node::*)&IIR_PhysicalUnit::unit_pos },
};

tree_kind_info IR_PHYSICAL_UNIT_kind_info = {
  84,
  "IIR_PhysicalUnit",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_PHYSICAL_UNIT,
  0,
  3, 4, IIR_PhysicalUnit_slot_info,
  sizeof(IIR_PhysicalUnit)
};

static tree_slot_info IIR_LibraryDeclaration_slot_info[] = {
  { IR_LIBRARY_UNIT_LIST, "primary_units", (tree_base_node*tree_base_node::*)&IIR_LibraryDeclaration::primary_units },
};

tree_kind_info IR_LIBRARY_DECLARATION_kind_info = {
  85,
  "IIR_LibraryDeclaration",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_LIBRARY_DECLARATION,
  0,
  1, 1, IIR_LibraryDeclaration_slot_info,
  sizeof(IIR_LibraryDeclaration)
};

static tree_slot_info IIR_AttributeDeclaration_slot_info[] = {
  { IR_TYPE, "subtype", (tree_base_node*tree_base_node::*)&IIR_AttributeDeclaration::subtype },
};

tree_kind_info IR_ATTRIBUTE_DECLARATION_kind_info = {
  86,
  "IIR_AttributeDeclaration",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_ATTRIBUTE_DECLARATION,
  0,
  1, 1, IIR_AttributeDeclaration_slot_info,
  sizeof(IIR_AttributeDeclaration)
};

static tree_slot_info IIR_ObjectDeclaration_slot_info[] = {
  { IR_TYPE, "subtype", (tree_base_node*tree_base_node::*)&IIR_ObjectDeclaration::subtype },
  { IR_EXPRESSION, "initial_value", (tree_base_node*tree_base_node::*)&IIR_ObjectDeclaration::initial_value },
  { IR_OBJECT_REFERENCE, "alias_base", (tree_base_node*tree_base_node::*)&IIR_ObjectDeclaration::alias_base },
};

tree_kind_info IR_OBJECT_DECLARATION_kind_info = {
  87,
  "IIR_ObjectDeclaration",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_CONSTANT_DECLARATION,
  0,
  3, 3, IIR_ObjectDeclaration_slot_info,
  sizeof(IIR_ObjectDeclaration)
};

static tree_slot_info IIR_InterfaceDeclaration_slot_info[] = {
  { (tree_kind_info*)&IR_Mode_ctype_info, "mode", (tree_base_node*tree_base_node::*)&IIR_InterfaceDeclaration::mode },
  { (tree_kind_info*)&bool_ctype_info, "bus", (tree_base_node*tree_base_node::*)&IIR_InterfaceDeclaration::bus },
};

tree_kind_info IR_INTERFACE_DECLARATION_kind_info = {
  88,
  "IIR_InterfaceDeclaration",
  &fire_chunk_info,
  IR_OBJECT_DECLARATION,
  IR_CONSTANT_INTERFACE_DECLARATION,
  0,
  0, 2, IIR_InterfaceDeclaration_slot_info,
  sizeof(IIR_InterfaceDeclaration)
};

static tree_slot_info IIR_FileInterfaceDeclaration_slot_info[] = {
};

tree_kind_info IR_FILE_INTERFACE_DECLARATION_kind_info = {
  89,
  "IIR_FileInterfaceDeclaration",
  &fire_chunk_info,
  IR_INTERFACE_DECLARATION,
  IR_FILE_INTERFACE_DECLARATION,
  0,
  0, 0, IIR_FileInterfaceDeclaration_slot_info,
  sizeof(IIR_FileInterfaceDeclaration)
};

static tree_slot_info IIR_SignalInterfaceDeclaration_slot_info[] = {
  { (tree_kind_info*)&IR_SignalKind_ctype_info, "signal_kind", (tree_base_node*tree_base_node::*)&IIR_SignalInterfaceDeclaration::signal_kind },
};

tree_kind_info IR_SIGNAL_INTERFACE_DECLARATION_kind_info = {
  90,
  "IIR_SignalInterfaceDeclaration",
  &fire_chunk_info,
  IR_INTERFACE_DECLARATION,
  IR_SIGNAL_INTERFACE_DECLARATION,
  0,
  0, 1, IIR_SignalInterfaceDeclaration_slot_info,
  sizeof(IIR_SignalInterfaceDeclaration)
};

static tree_slot_info IIR_VariableInterfaceDeclaration_slot_info[] = {
};

tree_kind_info IR_VARIABLE_INTERFACE_DECLARATION_kind_info = {
  91,
  "IIR_VariableInterfaceDeclaration",
  &fire_chunk_info,
  IR_INTERFACE_DECLARATION,
  IR_VARIABLE_INTERFACE_DECLARATION,
  0,
  0, 0, IIR_VariableInterfaceDeclaration_slot_info,
  sizeof(IIR_VariableInterfaceDeclaration)
};

static tree_slot_info IIR_ConstantInterfaceDeclaration_slot_info[] = {
};

tree_kind_info IR_CONSTANT_INTERFACE_DECLARATION_kind_info = {
  92,
  "IIR_ConstantInterfaceDeclaration",
  &fire_chunk_info,
  IR_INTERFACE_DECLARATION,
  IR_CONSTANT_INTERFACE_DECLARATION,
  0,
  0, 0, IIR_ConstantInterfaceDeclaration_slot_info,
  sizeof(IIR_ConstantInterfaceDeclaration)
};

static tree_slot_info IIR_FileDeclaration_slot_info[] = {
  { IR_EXPRESSION, "file_open_expression", (tree_base_node*tree_base_node::*)&IIR_FileDeclaration::file_open_expression },
  { IR_EXPRESSION, "file_logical_name", (tree_base_node*tree_base_node::*)&IIR_FileDeclaration::file_logical_name },
};

tree_kind_info IR_FILE_DECLARATION_kind_info = {
  93,
  "IIR_FileDeclaration",
  &fire_chunk_info,
  IR_OBJECT_DECLARATION,
  IR_FILE_DECLARATION,
  0,
  2, 2, IIR_FileDeclaration_slot_info,
  sizeof(IIR_FileDeclaration)
};

static tree_slot_info IIR_SignalDeclaration_slot_info[] = {
  { (tree_kind_info*)&IR_SignalKind_ctype_info, "signal_kind", (tree_base_node*tree_base_node::*)&IIR_SignalDeclaration::signal_kind },
};

tree_kind_info IR_SIGNAL_DECLARATION_kind_info = {
  94,
  "IIR_SignalDeclaration",
  &fire_chunk_info,
  IR_OBJECT_DECLARATION,
  IR_SIGNAL_DECLARATION,
  0,
  0, 1, IIR_SignalDeclaration_slot_info,
  sizeof(IIR_SignalDeclaration)
};

static tree_slot_info IIR_VariableDeclaration_slot_info[] = {
};

tree_kind_info IR_VARIABLE_DECLARATION_kind_info = {
  95,
  "IIR_VariableDeclaration",
  &fire_chunk_info,
  IR_OBJECT_DECLARATION,
  IR_SHARED_VARIABLE_DECLARATION,
  0,
  0, 0, IIR_VariableDeclaration_slot_info,
  sizeof(IIR_VariableDeclaration)
};

static tree_slot_info IIR_SharedVariableDeclaration_slot_info[] = {
};

tree_kind_info IR_SHARED_VARIABLE_DECLARATION_kind_info = {
  96,
  "IIR_SharedVariableDeclaration",
  &fire_chunk_info,
  IR_VARIABLE_DECLARATION,
  IR_SHARED_VARIABLE_DECLARATION,
  0,
  0, 0, IIR_SharedVariableDeclaration_slot_info,
  sizeof(IIR_SharedVariableDeclaration)
};

static tree_slot_info IIR_ConstantDeclaration_slot_info[] = {
};

tree_kind_info IR_CONSTANT_DECLARATION_kind_info = {
  97,
  "IIR_ConstantDeclaration",
  &fire_chunk_info,
  IR_OBJECT_DECLARATION,
  IR_CONSTANT_DECLARATION,
  0,
  0, 0, IIR_ConstantDeclaration_slot_info,
  sizeof(IIR_ConstantDeclaration)
};

static tree_slot_info IIR_TypeDeclaration_slot_info[] = {
  { IR_TYPE, "type", (tree_base_node*tree_base_node::*)&IIR_TypeDeclaration::type },
};

tree_kind_info IR_TYPE_DECLARATION_kind_info = {
  98,
  "IIR_TypeDeclaration",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_SUBTYPE_DECLARATION,
  0,
  1, 1, IIR_TypeDeclaration_slot_info,
  sizeof(IIR_TypeDeclaration)
};

static tree_slot_info IIR_SubtypeDeclaration_slot_info[] = {
};

tree_kind_info IR_SUBTYPE_DECLARATION_kind_info = {
  99,
  "IIR_SubtypeDeclaration",
  &fire_chunk_info,
  IR_TYPE_DECLARATION,
  IR_SUBTYPE_DECLARATION,
  0,
  0, 0, IIR_SubtypeDeclaration_slot_info,
  sizeof(IIR_SubtypeDeclaration)
};

static tree_slot_info IIR_ElementDeclaration_slot_info[] = {
  { IR_TYPE, "subtype", (tree_base_node*tree_base_node::*)&IIR_ElementDeclaration::subtype },
  { (tree_kind_info*)&int_ctype_info, "declaration_pos", (tree_base_node*tree_base_node::*)&IIR_ElementDeclaration::declaration_pos },
};

tree_kind_info IR_ELEMENT_DECLARATION_kind_info = {
  100,
  "IIR_ElementDeclaration",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_ELEMENT_DECLARATION,
  0,
  1, 2, IIR_ElementDeclaration_slot_info,
  sizeof(IIR_ElementDeclaration)
};

static tree_slot_info IIR_EnumerationLiteral_slot_info[] = {
  { IR_ENUMERATION_TYPE, "subtype", (tree_base_node*tree_base_node::*)&IIR_EnumerationLiteral::subtype },
  { (tree_kind_info*)&int_ctype_info, "enum_pos", (tree_base_node*tree_base_node::*)&IIR_EnumerationLiteral::enum_pos },
};

tree_kind_info IR_ENUMERATION_LITERAL_kind_info = {
  101,
  "IIR_EnumerationLiteral",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_ENUMERATION_LITERAL,
  0,
  1, 2, IIR_EnumerationLiteral_slot_info,
  sizeof(IIR_EnumerationLiteral)
};

static tree_slot_info IIR_DeclarativeRegion_slot_info[] = {
  { IR_DECLARATIVE_REGION, "continued", (tree_base_node*tree_base_node::*)&IIR_DeclarativeRegion::continued },
  { IR_DECLARATION_LIST, "declarations", (tree_base_node*tree_base_node::*)&IIR_DeclarativeRegion::declarations },
};

tree_kind_info IR_DECLARATIVE_REGION_kind_info = {
  102,
  "IIR_DeclarativeRegion",
  &fire_chunk_info,
  IR_DECLARATION,
  IR_LOOP_DECLARATIVE_REGION,
  0,
  2, 2, IIR_DeclarativeRegion_slot_info,
  sizeof(IIR_DeclarativeRegion)
};

static tree_slot_info IIR_ConcurrentStatement_slot_info[] = {
};

tree_kind_info IR_CONCURRENT_STATEMENT_kind_info = {
  103,
  "IIR_ConcurrentStatement",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_BLOCK_STATEMENT,
  0,
  0, 0, IIR_ConcurrentStatement_slot_info,
  sizeof(IIR_ConcurrentStatement)
};

static tree_slot_info IIR_ConcurrentGenerateStatement_slot_info[] = {
  { IR_CONFIGURATION_SPECIFICATION_LIST, "configuration_specifications", (tree_base_node*tree_base_node::*)&IIR_ConcurrentGenerateStatement::configuration_specifications },
  { IR_CONCURRENT_STATEMENT_LIST, "concurrent_statement_part", (tree_base_node*tree_base_node::*)&IIR_ConcurrentGenerateStatement::concurrent_statement_part },
};

tree_kind_info IR_CONCURRENT_GENERATE_STATEMENT_kind_info = {
  104,
  "IIR_ConcurrentGenerateStatement",
  &fire_chunk_info,
  IR_CONCURRENT_STATEMENT,
  IR_CONCURRENT_GENERATE_FOR_STATEMENT,
  0,
  2, 2, IIR_ConcurrentGenerateStatement_slot_info,
  sizeof(IIR_ConcurrentGenerateStatement)
};

static tree_slot_info IIR_ConcurrentGenerateIfStatement_slot_info[] = {
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&IIR_ConcurrentGenerateIfStatement::condition },
};

tree_kind_info IR_CONCURRENT_GENERATE_IF_STATEMENT_kind_info = {
  105,
  "IIR_ConcurrentGenerateIfStatement",
  &fire_chunk_info,
  IR_CONCURRENT_GENERATE_STATEMENT,
  IR_CONCURRENT_GENERATE_IF_STATEMENT,
  0,
  1, 1, IIR_ConcurrentGenerateIfStatement_slot_info,
  sizeof(IIR_ConcurrentGenerateIfStatement)
};

static tree_slot_info IIR_ConcurrentGenerateForStatement_slot_info[] = {
  { IR_CONSTANT_DECLARATION, "generate_parameter_specification", (tree_base_node*tree_base_node::*)&IIR_ConcurrentGenerateForStatement::generate_parameter_specification },
};

tree_kind_info IR_CONCURRENT_GENERATE_FOR_STATEMENT_kind_info = {
  106,
  "IIR_ConcurrentGenerateForStatement",
  &fire_chunk_info,
  IR_CONCURRENT_GENERATE_STATEMENT,
  IR_CONCURRENT_GENERATE_FOR_STATEMENT,
  0,
  1, 1, IIR_ConcurrentGenerateForStatement_slot_info,
  sizeof(IIR_ConcurrentGenerateForStatement)
};

static tree_slot_info IIR_ComponentInstantiationStatement_slot_info[] = {
  { IR_BINDING_INDICATION, "binding", (tree_base_node*tree_base_node::*)&IIR_ComponentInstantiationStatement::binding },
  { IR_BINDING_INDICATION, "configuration", (tree_base_node*tree_base_node::*)&IIR_ComponentInstantiationStatement::configuration },
};

tree_kind_info IR_COMPONENT_INSTANTIATION_STATEMENT_kind_info = {
  107,
  "IIR_ComponentInstantiationStatement",
  &fire_chunk_info,
  IR_CONCURRENT_STATEMENT,
  IR_COMPONENT_INSTANTIATION_STATEMENT,
  0,
  2, 2, IIR_ComponentInstantiationStatement_slot_info,
  sizeof(IIR_ComponentInstantiationStatement)
};

static tree_slot_info IIR_ProcessStatement_slot_info[] = {
  { IR_SEQUENTIAL_STATEMENT_LIST, "process_statement_part", (tree_base_node*tree_base_node::*)&IIR_ProcessStatement::process_statement_part },
  { (tree_kind_info*)&bool_ctype_info, "postponed", (tree_base_node*tree_base_node::*)&IIR_ProcessStatement::postponed },
  { (tree_kind_info*)&bool_ctype_info, "guarded", (tree_base_node*tree_base_node::*)&IIR_ProcessStatement::guarded },
};

tree_kind_info IR_PROCESS_STATEMENT_kind_info = {
  108,
  "IIR_ProcessStatement",
  &fire_chunk_info,
  IR_CONCURRENT_STATEMENT,
  IR_IMPLICIT_PROCESS_STATEMENT,
  0,
  1, 3, IIR_ProcessStatement_slot_info,
  sizeof(IIR_ProcessStatement)
};

static tree_slot_info IIR_SensitizedProcessStatement_slot_info[] = {
  { IR_EXPRESSION_LIST, "sensitivity_list", (tree_base_node*tree_base_node::*)&IIR_SensitizedProcessStatement::sensitivity_list },
};

tree_kind_info IR_SENSITIZED_PROCESS_STATEMENT_kind_info = {
  109,
  "IIR_SensitizedProcessStatement",
  &fire_chunk_info,
  IR_PROCESS_STATEMENT,
  IR_SENSITIZED_PROCESS_STATEMENT,
  0,
  1, 1, IIR_SensitizedProcessStatement_slot_info,
  sizeof(IIR_SensitizedProcessStatement)
};

static tree_slot_info IIR_ImplicitProcessStatement_slot_info[] = {
};

tree_kind_info IR_IMPLICIT_PROCESS_STATEMENT_kind_info = {
  110,
  "IIR_ImplicitProcessStatement",
  &fire_chunk_info,
  IR_PROCESS_STATEMENT,
  IR_IMPLICIT_PROCESS_STATEMENT,
  0,
  0, 0, IIR_ImplicitProcessStatement_slot_info,
  sizeof(IIR_ImplicitProcessStatement)
};

static tree_slot_info IIR_BlockStatement_slot_info[] = {
  { IR_EXPRESSION, "guard_expression", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::guard_expression },
  { IR_INTERFACE_LIST, "generic_clause", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::generic_clause },
  { IR_ASSOCIATION_LIST, "generic_map_aspect", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::generic_map_aspect },
  { IR_INTERFACE_LIST, "port_clause", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::port_clause },
  { IR_ASSOCIATION_LIST, "port_map_aspect", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::port_map_aspect },
  { IR_CONFIGURATION_SPECIFICATION_LIST, "configuration_specifications", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::configuration_specifications },
  { IR_CONCURRENT_STATEMENT_LIST, "block_statement_part", (tree_base_node*tree_base_node::*)&IIR_BlockStatement::block_statement_part },
};

tree_kind_info IR_BLOCK_STATEMENT_kind_info = {
  111,
  "IIR_BlockStatement",
  &fire_chunk_info,
  IR_CONCURRENT_STATEMENT,
  IR_BLOCK_STATEMENT,
  0,
  7, 7, IIR_BlockStatement_slot_info,
  sizeof(IIR_BlockStatement)
};

static tree_slot_info IIR_ConfigurationItem_slot_info[] = {
};

tree_kind_info IR_CONFIGURATION_ITEM_kind_info = {
  112,
  "IIR_ConfigurationItem",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_BLOCK_CONFIGURATION,
  0,
  0, 0, IIR_ConfigurationItem_slot_info,
  sizeof(IIR_ConfigurationItem)
};

static tree_slot_info IIR_ComponentConfiguration_slot_info[] = {
  { IR_LIBRARY_UNIT, "entity_aspect", (tree_base_node*tree_base_node::*)&IIR_ComponentConfiguration::entity_aspect },
  { IR_COMPONENT_INSTANTIATION_LIST, "instantiation_list", (tree_base_node*tree_base_node::*)&IIR_ComponentConfiguration::instantiation_list },
  { IR_ASSOCIATION_LIST, "generic_map_aspect", (tree_base_node*tree_base_node::*)&IIR_ComponentConfiguration::generic_map_aspect },
  { IR_ASSOCIATION_LIST, "port_map_aspect", (tree_base_node*tree_base_node::*)&IIR_ComponentConfiguration::port_map_aspect },
  { IR_BLOCK_CONFIGURATION, "block_config", (tree_base_node*tree_base_node::*)&IIR_ComponentConfiguration::block_config },
};

tree_kind_info IR_COMPONENT_CONFIGURATION_kind_info = {
  113,
  "IIR_ComponentConfiguration",
  &fire_chunk_info,
  IR_CONFIGURATION_ITEM,
  IR_COMPONENT_CONFIGURATION,
  0,
  5, 5, IIR_ComponentConfiguration_slot_info,
  sizeof(IIR_ComponentConfiguration)
};

static tree_slot_info IIR_BlockConfiguration_slot_info[] = {
  { IR_DECLARATIVE_REGION, "block_specification", (tree_base_node*tree_base_node::*)&IIR_BlockConfiguration::block_specification },
  { IR_DECLARATION_LIST, "use_clause_list", (tree_base_node*tree_base_node::*)&IIR_BlockConfiguration::use_clause_list },
  { IR_CONFIGURATION_ITEM_LIST, "configuration_item_list", (tree_base_node*tree_base_node::*)&IIR_BlockConfiguration::configuration_item_list },
};

tree_kind_info IR_BLOCK_CONFIGURATION_kind_info = {
  114,
  "IIR_BlockConfiguration",
  &fire_chunk_info,
  IR_CONFIGURATION_ITEM,
  IR_BLOCK_CONFIGURATION,
  0,
  3, 3, IIR_BlockConfiguration_slot_info,
  sizeof(IIR_BlockConfiguration)
};

static tree_slot_info IIR_ArchitectureRef_slot_info[] = {
  { IR_ENTITY_DECLARATION, "entity", (tree_base_node*tree_base_node::*)&IIR_ArchitectureRef::entity },
  { IR_TEXT_LITERAL, "architecture_name", (tree_base_node*tree_base_node::*)&IIR_ArchitectureRef::architecture_name },
};

tree_kind_info IR_ARCHITECTURE_REF_kind_info = {
  115,
  "IIR_ArchitectureRef",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_ARCHITECTURE_REF,
  0,
  2, 2, IIR_ArchitectureRef_slot_info,
  sizeof(IIR_ArchitectureRef)
};

static tree_slot_info IIR_LibraryUnit_slot_info[] = {
  { IR_DECLARATION_LIST, "context_items", (tree_base_node*tree_base_node::*)&IIR_LibraryUnit::context_items },
  { IR_DECLARATION_LIST, "external_decls", (tree_base_node*tree_base_node::*)&IIR_LibraryUnit::external_decls },
  { IR_TEXT_LITERAL, "library_name", (tree_base_node*tree_base_node::*)&IIR_LibraryUnit::library_name },
  { IR_LIBRARY_UNIT_LIST, "used_units", (tree_base_node*tree_base_node::*)&IIR_LibraryUnit::used_units },
};

tree_kind_info IR_LIBRARY_UNIT_kind_info = {
  116,
  "IIR_LibraryUnit",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_ENTITY_DECLARATION,
  0,
  4, 4, IIR_LibraryUnit_slot_info,
  sizeof(IIR_LibraryUnit)
};

static tree_slot_info IIR_ConfigurationDeclaration_slot_info[] = {
  { IR_BLOCK_CONFIGURATION, "block_configuration", (tree_base_node*tree_base_node::*)&IIR_ConfigurationDeclaration::block_configuration },
  { IR_ENTITY_DECLARATION, "entity", (tree_base_node*tree_base_node::*)&IIR_ConfigurationDeclaration::entity },
};

tree_kind_info IR_CONFIGURATION_DECLARATION_kind_info = {
  117,
  "IIR_ConfigurationDeclaration",
  &fire_chunk_info,
  IR_LIBRARY_UNIT,
  IR_CONFIGURATION_DECLARATION,
  0,
  2, 2, IIR_ConfigurationDeclaration_slot_info,
  sizeof(IIR_ConfigurationDeclaration)
};

static tree_slot_info IIR_PackageBodyDeclaration_slot_info[] = {
  { IR_PACKAGE_DECLARATION, "package", (tree_base_node*tree_base_node::*)&IIR_PackageBodyDeclaration::package },
};

tree_kind_info IR_PACKAGE_BODY_DECLARATION_kind_info = {
  118,
  "IIR_PackageBodyDeclaration",
  &fire_chunk_info,
  IR_LIBRARY_UNIT,
  IR_PACKAGE_BODY_DECLARATION,
  0,
  1, 1, IIR_PackageBodyDeclaration_slot_info,
  sizeof(IIR_PackageBodyDeclaration)
};

static tree_slot_info IIR_PackageDeclaration_slot_info[] = {
};

tree_kind_info IR_PACKAGE_DECLARATION_kind_info = {
  119,
  "IIR_PackageDeclaration",
  &fire_chunk_info,
  IR_LIBRARY_UNIT,
  IR_PACKAGE_DECLARATION,
  0,
  0, 0, IIR_PackageDeclaration_slot_info,
  sizeof(IIR_PackageDeclaration)
};

static tree_slot_info IIR_ArchitectureDeclaration_slot_info[] = {
  { IR_ENTITY_DECLARATION, "entity", (tree_base_node*tree_base_node::*)&IIR_ArchitectureDeclaration::entity },
  { IR_CONFIGURATION_SPECIFICATION_LIST, "configuration_specifications", (tree_base_node*tree_base_node::*)&IIR_ArchitectureDeclaration::configuration_specifications },
  { IR_CONCURRENT_STATEMENT_LIST, "architecture_statement_part", (tree_base_node*tree_base_node::*)&IIR_ArchitectureDeclaration::architecture_statement_part },
};

tree_kind_info IR_ARCHITECTURE_DECLARATION_kind_info = {
  120,
  "IIR_ArchitectureDeclaration",
  &fire_chunk_info,
  IR_LIBRARY_UNIT,
  IR_ARCHITECTURE_DECLARATION,
  0,
  3, 3, IIR_ArchitectureDeclaration_slot_info,
  sizeof(IIR_ArchitectureDeclaration)
};

static tree_slot_info IIR_EntityDeclaration_slot_info[] = {
  { IR_INTERFACE_LIST, "generic_clause", (tree_base_node*tree_base_node::*)&IIR_EntityDeclaration::generic_clause },
  { IR_INTERFACE_LIST, "port_clause", (tree_base_node*tree_base_node::*)&IIR_EntityDeclaration::port_clause },
  { IR_CONCURRENT_STATEMENT_LIST, "entity_statement_part", (tree_base_node*tree_base_node::*)&IIR_EntityDeclaration::entity_statement_part },
};

tree_kind_info IR_ENTITY_DECLARATION_kind_info = {
  121,
  "IIR_EntityDeclaration",
  &fire_chunk_info,
  IR_LIBRARY_UNIT,
  IR_ENTITY_DECLARATION,
  0,
  3, 3, IIR_EntityDeclaration_slot_info,
  sizeof(IIR_EntityDeclaration)
};

static tree_slot_info IIR_ComponentDeclaration_slot_info[] = {
  { IR_INTERFACE_LIST, "local_generic_clause", (tree_base_node*tree_base_node::*)&IIR_ComponentDeclaration::local_generic_clause },
  { IR_INTERFACE_LIST, "local_port_clause", (tree_base_node*tree_base_node::*)&IIR_ComponentDeclaration::local_port_clause },
};

tree_kind_info IR_COMPONENT_DECLARATION_kind_info = {
  122,
  "IIR_ComponentDeclaration",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_COMPONENT_DECLARATION,
  0,
  2, 2, IIR_ComponentDeclaration_slot_info,
  sizeof(IIR_ComponentDeclaration)
};

static tree_slot_info IIR_SubprogramDeclaration_slot_info[] = {
  { IR_INTERFACE_LIST, "interface_declarations", (tree_base_node*tree_base_node::*)&IIR_SubprogramDeclaration::interface_declarations },
  { IR_SEQUENTIAL_STATEMENT_LIST, "subprogram_body", (tree_base_node*tree_base_node::*)&IIR_SubprogramDeclaration::subprogram_body },
  { IR_SUBPROGRAM_DECLARATION, "prototype", (tree_base_node*tree_base_node::*)&IIR_SubprogramDeclaration::prototype },
};

tree_kind_info IR_SUBPROGRAM_DECLARATION_kind_info = {
  123,
  "IIR_SubprogramDeclaration",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_PREDEFINED_PROCEDURE_DECLARATION,
  0,
  3, 3, IIR_SubprogramDeclaration_slot_info,
  sizeof(IIR_SubprogramDeclaration)
};

static tree_slot_info IIR_FunctionDeclaration_slot_info[] = {
  { IR_TYPE, "return_type", (tree_base_node*tree_base_node::*)&IIR_FunctionDeclaration::return_type },
  { (tree_kind_info*)&bool_ctype_info, "pure", (tree_base_node*tree_base_node::*)&IIR_FunctionDeclaration::pure },
};

tree_kind_info IR_FUNCTION_DECLARATION_kind_info = {
  124,
  "IIR_FunctionDeclaration",
  &fire_chunk_info,
  IR_SUBPROGRAM_DECLARATION,
  IR_PREDEFINED_FUNCTION_DECLARATION,
  0,
  1, 2, IIR_FunctionDeclaration_slot_info,
  sizeof(IIR_FunctionDeclaration)
};

static tree_slot_info IIR_PredefinedFunctionDeclaration_slot_info[] = {
};

tree_kind_info IR_PREDEFINED_FUNCTION_DECLARATION_kind_info = {
  125,
  "IIR_PredefinedFunctionDeclaration",
  &fire_chunk_info,
  IR_FUNCTION_DECLARATION,
  IR_PREDEFINED_FUNCTION_DECLARATION,
  0,
  0, 0, IIR_PredefinedFunctionDeclaration_slot_info,
  sizeof(IIR_PredefinedFunctionDeclaration)
};

static tree_slot_info IIR_ProcedureDeclaration_slot_info[] = {
};

tree_kind_info IR_PROCEDURE_DECLARATION_kind_info = {
  126,
  "IIR_ProcedureDeclaration",
  &fire_chunk_info,
  IR_SUBPROGRAM_DECLARATION,
  IR_PREDEFINED_PROCEDURE_DECLARATION,
  0,
  0, 0, IIR_ProcedureDeclaration_slot_info,
  sizeof(IIR_ProcedureDeclaration)
};

static tree_slot_info IIR_PredefinedProcedureDeclaration_slot_info[] = {
};

tree_kind_info IR_PREDEFINED_PROCEDURE_DECLARATION_kind_info = {
  127,
  "IIR_PredefinedProcedureDeclaration",
  &fire_chunk_info,
  IR_PROCEDURE_DECLARATION,
  IR_PREDEFINED_PROCEDURE_DECLARATION,
  0,
  0, 0, IIR_PredefinedProcedureDeclaration_slot_info,
  sizeof(IIR_PredefinedProcedureDeclaration)
};

static tree_slot_info IIR_LoopDeclarativeRegion_slot_info[] = {
  { IR_LOOP_STATEMENT, "loop_statement", (tree_base_node*tree_base_node::*)&IIR_LoopDeclarativeRegion::loop_statement },
};

tree_kind_info IR_LOOP_DECLARATIVE_REGION_kind_info = {
  128,
  "IIR_LoopDeclarativeRegion",
  &fire_chunk_info,
  IR_DECLARATIVE_REGION,
  IR_LOOP_DECLARATIVE_REGION,
  0,
  1, 1, IIR_LoopDeclarativeRegion_slot_info,
  sizeof(IIR_LoopDeclarativeRegion)
};

static tree_slot_info IIR_Type_slot_info[] = {
  { IR_TYPE_DECLARATION, "declaration", (tree_base_node*tree_base_node::*)&IIR_Type::declaration },
  { IR_TYPE, "base", (tree_base_node*tree_base_node::*)&IIR_Type::base },
  { (tree_kind_info*)&IR_StaticLevel_ctype_info, "static_level", (tree_base_node*tree_base_node::*)&IIR_Type::static_level },
};

tree_kind_info IR_TYPE_kind_info = {
  129,
  "IIR_Type",
  &fire_chunk_info,
  IR_ROOT,
  IR_SCALAR_SUBTYPE,
  0,
  2, 3, IIR_Type_slot_info,
  sizeof(IIR_Type)
};

static tree_slot_info IIR_FileType_slot_info[] = {
  { IR_TYPE, "type_mark", (tree_base_node*tree_base_node::*)&IIR_FileType::type_mark },
};

tree_kind_info IR_FILE_TYPE_kind_info = {
  130,
  "IIR_FileType",
  &fire_chunk_info,
  IR_TYPE,
  IR_FILE_TYPE,
  0,
  1, 1, IIR_FileType_slot_info,
  sizeof(IIR_FileType)
};

static tree_slot_info IIR_AccessType_slot_info[] = {
  { IR_TYPE, "designated_type", (tree_base_node*tree_base_node::*)&IIR_AccessType::designated_type },
};

tree_kind_info IR_ACCESS_TYPE_kind_info = {
  131,
  "IIR_AccessType",
  &fire_chunk_info,
  IR_TYPE,
  IR_ACCESS_TYPE,
  0,
  1, 1, IIR_AccessType_slot_info,
  sizeof(IIR_AccessType)
};

static tree_slot_info IIR_CompositeType_slot_info[] = {
};

tree_kind_info IR_COMPOSITE_TYPE_kind_info = {
  132,
  "IIR_CompositeType",
  &fire_chunk_info,
  IR_TYPE,
  IR_RECORD_TYPE,
  0,
  0, 0, IIR_CompositeType_slot_info,
  sizeof(IIR_CompositeType)
};

static tree_slot_info IIR_ArrayType_slot_info[] = {
  { IR_TYPE_LIST, "index_types", (tree_base_node*tree_base_node::*)&IIR_ArrayType::index_types },
  { IR_TYPE, "element_type", (tree_base_node*tree_base_node::*)&IIR_ArrayType::element_type },
};

tree_kind_info IR_ARRAY_TYPE_kind_info = {
  133,
  "IIR_ArrayType",
  &fire_chunk_info,
  IR_COMPOSITE_TYPE,
  IR_ARRAY_TYPE,
  0,
  2, 2, IIR_ArrayType_slot_info,
  sizeof(IIR_ArrayType)
};

static tree_slot_info IIR_RecordType_slot_info[] = {
  { IR_ELEMENT_DECLARATION_LIST, "element_declarations", (tree_base_node*tree_base_node::*)&IIR_RecordType::element_declarations },
};

tree_kind_info IR_RECORD_TYPE_kind_info = {
  134,
  "IIR_RecordType",
  &fire_chunk_info,
  IR_COMPOSITE_TYPE,
  IR_RECORD_TYPE,
  0,
  1, 1, IIR_RecordType_slot_info,
  sizeof(IIR_RecordType)
};

static tree_slot_info IIR_ScalarType_slot_info[] = {
};

tree_kind_info IR_SCALAR_TYPE_kind_info = {
  135,
  "IIR_ScalarType",
  &fire_chunk_info,
  IR_TYPE,
  IR_ENUMERATION_TYPE,
  0,
  0, 0, IIR_ScalarType_slot_info,
  sizeof(IIR_ScalarType)
};

static tree_slot_info IIR_PhysicalType_slot_info[] = {
  { IR_PHYSICAL_UNIT, "primary_unit", (tree_base_node*tree_base_node::*)&IIR_PhysicalType::primary_unit },
  { IR_UNIT_LIST, "units", (tree_base_node*tree_base_node::*)&IIR_PhysicalType::units },
};

tree_kind_info IR_PHYSICAL_TYPE_kind_info = {
  136,
  "IIR_PhysicalType",
  &fire_chunk_info,
  IR_SCALAR_TYPE,
  IR_PHYSICAL_TYPE,
  0,
  2, 2, IIR_PhysicalType_slot_info,
  sizeof(IIR_PhysicalType)
};

static tree_slot_info IIR_FloatingType_slot_info[] = {
};

tree_kind_info IR_FLOATING_TYPE_kind_info = {
  137,
  "IIR_FloatingType",
  &fire_chunk_info,
  IR_SCALAR_TYPE,
  IR_FLOATING_TYPE,
  0,
  0, 0, IIR_FloatingType_slot_info,
  sizeof(IIR_FloatingType)
};

static tree_slot_info IIR_IntegerType_slot_info[] = {
};

tree_kind_info IR_INTEGER_TYPE_kind_info = {
  138,
  "IIR_IntegerType",
  &fire_chunk_info,
  IR_SCALAR_TYPE,
  IR_INTEGER_TYPE,
  0,
  0, 0, IIR_IntegerType_slot_info,
  sizeof(IIR_IntegerType)
};

static tree_slot_info IIR_EnumerationType_slot_info[] = {
  { IR_ENUMERATION_LITERAL_LIST, "enumeration_literals", (tree_base_node*tree_base_node::*)&IIR_EnumerationType::enumeration_literals },
};

tree_kind_info IR_ENUMERATION_TYPE_kind_info = {
  139,
  "IIR_EnumerationType",
  &fire_chunk_info,
  IR_SCALAR_TYPE,
  IR_ENUMERATION_TYPE,
  0,
  1, 1, IIR_EnumerationType_slot_info,
  sizeof(IIR_EnumerationType)
};

static tree_slot_info IIR_Subtype_slot_info[] = {
  { IR_TYPE, "immediate_base", (tree_base_node*tree_base_node::*)&IIR_Subtype::immediate_base },
  { IR_FUNCTION_DECLARATION, "resolution_function", (tree_base_node*tree_base_node::*)&IIR_Subtype::resolution_function },
};

tree_kind_info IR_SUBTYPE_kind_info = {
  140,
  "IIR_Subtype",
  &fire_chunk_info,
  IR_TYPE,
  IR_SCALAR_SUBTYPE,
  0,
  2, 2, IIR_Subtype_slot_info,
  sizeof(IIR_Subtype)
};

static tree_slot_info IIR_ArraySubtype_slot_info[] = {
  { IR_TYPE_LIST, "constraint", (tree_base_node*tree_base_node::*)&IIR_ArraySubtype::constraint },
};

tree_kind_info IR_ARRAY_SUBTYPE_kind_info = {
  141,
  "IIR_ArraySubtype",
  &fire_chunk_info,
  IR_SUBTYPE,
  IR_ARRAY_SUBTYPE,
  0,
  1, 1, IIR_ArraySubtype_slot_info,
  sizeof(IIR_ArraySubtype)
};

static tree_slot_info IIR_RecordSubtype_slot_info[] = {
};

tree_kind_info IR_RECORD_SUBTYPE_kind_info = {
  142,
  "IIR_RecordSubtype",
  &fire_chunk_info,
  IR_SUBTYPE,
  IR_RECORD_SUBTYPE,
  0,
  0, 0, IIR_RecordSubtype_slot_info,
  sizeof(IIR_RecordSubtype)
};

static tree_slot_info IIR_ScalarSubtype_slot_info[] = {
  { IR_RANGE, "range", (tree_base_node*tree_base_node::*)&IIR_ScalarSubtype::range },
};

tree_kind_info IR_SCALAR_SUBTYPE_kind_info = {
  143,
  "IIR_ScalarSubtype",
  &fire_chunk_info,
  IR_SUBTYPE,
  IR_SCALAR_SUBTYPE,
  0,
  1, 1, IIR_ScalarSubtype_slot_info,
  sizeof(IIR_ScalarSubtype)
};

static tree_slot_info IIR_Range_slot_info[] = {
};

tree_kind_info IR_RANGE_kind_info = {
  144,
  "IIR_Range",
  &fire_chunk_info,
  IR_ROOT,
  IR_EXPLICIT_RANGE,
  0,
  0, 0, IIR_Range_slot_info,
  sizeof(IIR_Range)
};

static tree_slot_info IIR_ArrayRange_slot_info[] = {
  { IR_TYPE, "type", (tree_base_node*tree_base_node::*)&IIR_ArrayRange::type },
  { IR_EXPRESSION, "array", (tree_base_node*tree_base_node::*)&IIR_ArrayRange::array },
  { IR_TYPE, "array_type", (tree_base_node*tree_base_node::*)&IIR_ArrayRange::array_type },
  { IR_EXPRESSION, "index", (tree_base_node*tree_base_node::*)&IIR_ArrayRange::index },
};

tree_kind_info IR_ARRAY_RANGE_kind_info = {
  145,
  "IIR_ArrayRange",
  &fire_chunk_info,
  IR_RANGE,
  IR_ATTR_ARRAY_RANGE,
  0,
  4, 4, IIR_ArrayRange_slot_info,
  sizeof(IIR_ArrayRange)
};

static tree_slot_info IIR_Attr_ArrayREVERSE_RANGE_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_REVERSE_RANGE_kind_info = {
  146,
  "IIR_Attr_ArrayREVERSE_RANGE",
  &fire_chunk_info,
  IR_ARRAY_RANGE,
  IR_ATTR_ARRAY_REVERSE_RANGE,
  0,
  0, 0, IIR_Attr_ArrayREVERSE_RANGE_slot_info,
  sizeof(IIR_Attr_ArrayREVERSE_RANGE)
};

static tree_slot_info IIR_Attr_ArrayRANGE_slot_info[] = {
};

tree_kind_info IR_ATTR_ARRAY_RANGE_kind_info = {
  147,
  "IIR_Attr_ArrayRANGE",
  &fire_chunk_info,
  IR_ARRAY_RANGE,
  IR_ATTR_ARRAY_RANGE,
  0,
  0, 0, IIR_Attr_ArrayRANGE_slot_info,
  sizeof(IIR_Attr_ArrayRANGE)
};

static tree_slot_info IIR_ExplicitRange_slot_info[] = {
  { IR_EXPRESSION, "left", (tree_base_node*tree_base_node::*)&IIR_ExplicitRange::left },
  { IR_EXPRESSION, "right", (tree_base_node*tree_base_node::*)&IIR_ExplicitRange::right },
  { (tree_kind_info*)&IR_Direction_ctype_info, "direction", (tree_base_node*tree_base_node::*)&IIR_ExplicitRange::direction },
};

tree_kind_info IR_EXPLICIT_RANGE_kind_info = {
  148,
  "IIR_ExplicitRange",
  &fire_chunk_info,
  IR_RANGE,
  IR_EXPLICIT_RANGE,
  0,
  2, 3, IIR_ExplicitRange_slot_info,
  sizeof(IIR_ExplicitRange)
};

static tree_slot_info IIR_List_slot_info[] = {
};

tree_kind_info IR_LIST_kind_info = {
  149,
  "IIR_List",
  &fire_chunk_info,
  IR_ROOT,
  IR_ASSOCIATION_LIST,
  0,
  0, 0, IIR_List_slot_info,
  sizeof(IIR_List)
};

static tree_slot_info IIR_IdentifierList_slot_info[] = {
  { IR_IDENTIFIER, "first", (tree_base_node*tree_base_node::*)&IIR_IdentifierList::first },
  { IR_IDENTIFIER_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_IdentifierList::rest },
};

tree_kind_info IR_IDENTIFIER_LIST_kind_info = {
  150,
  "IIR_IdentifierList",
  &fire_chunk_info,
  IR_LIST,
  IR_IDENTIFIER_LIST,
  0,
  2, 2, IIR_IdentifierList_slot_info,
  sizeof(IIR_IdentifierList)
};

static tree_slot_info IIR_ConfigurationSpecificationList_slot_info[] = {
  { IR_CONFIGURATION_SPECIFICATION, "first", (tree_base_node*tree_base_node::*)&IIR_ConfigurationSpecificationList::first },
  { IR_CONFIGURATION_SPECIFICATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ConfigurationSpecificationList::rest },
};

tree_kind_info IR_CONFIGURATION_SPECIFICATION_LIST_kind_info = {
  151,
  "IIR_ConfigurationSpecificationList",
  &fire_chunk_info,
  IR_LIST,
  IR_CONFIGURATION_SPECIFICATION_LIST,
  0,
  2, 2, IIR_ConfigurationSpecificationList_slot_info,
  sizeof(IIR_ConfigurationSpecificationList)
};

static tree_slot_info IIR_ComponentInstantiationList_slot_info[] = {
  { IR_COMPONENT_INSTANTIATION_STATEMENT, "first", (tree_base_node*tree_base_node::*)&IIR_ComponentInstantiationList::first },
  { IR_COMPONENT_INSTANTIATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ComponentInstantiationList::rest },
};

tree_kind_info IR_COMPONENT_INSTANTIATION_LIST_kind_info = {
  152,
  "IIR_ComponentInstantiationList",
  &fire_chunk_info,
  IR_LIST,
  IR_COMPONENT_INSTANTIATION_LIST,
  0,
  2, 2, IIR_ComponentInstantiationList_slot_info,
  sizeof(IIR_ComponentInstantiationList)
};

static tree_slot_info IIR_ElementAssociationList_slot_info[] = {
  { IR_ELEMENT_ASSOCIATION, "first", (tree_base_node*tree_base_node::*)&IIR_ElementAssociationList::first },
  { IR_ELEMENT_ASSOCIATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ElementAssociationList::rest },
};

tree_kind_info IR_ELEMENT_ASSOCIATION_LIST_kind_info = {
  153,
  "IIR_ElementAssociationList",
  &fire_chunk_info,
  IR_LIST,
  IR_ELEMENT_ASSOCIATION_LIST,
  0,
  2, 2, IIR_ElementAssociationList_slot_info,
  sizeof(IIR_ElementAssociationList)
};

static tree_slot_info IIR_IndexedAssociationList_slot_info[] = {
  { IR_INDEXED_ASSOCIATION, "first", (tree_base_node*tree_base_node::*)&IIR_IndexedAssociationList::first },
  { IR_INDEXED_ASSOCIATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_IndexedAssociationList::rest },
};

tree_kind_info IR_INDEXED_ASSOCIATION_LIST_kind_info = {
  154,
  "IIR_IndexedAssociationList",
  &fire_chunk_info,
  IR_LIST,
  IR_INDEXED_ASSOCIATION_LIST,
  0,
  2, 2, IIR_IndexedAssociationList_slot_info,
  sizeof(IIR_IndexedAssociationList)
};

static tree_slot_info IIR_ExpressionList_slot_info[] = {
  { IR_EXPRESSION, "first", (tree_base_node*tree_base_node::*)&IIR_ExpressionList::first },
  { IR_EXPRESSION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ExpressionList::rest },
};

tree_kind_info IR_EXPRESSION_LIST_kind_info = {
  155,
  "IIR_ExpressionList",
  &fire_chunk_info,
  IR_LIST,
  IR_EXPRESSION_LIST,
  0,
  2, 2, IIR_ExpressionList_slot_info,
  sizeof(IIR_ExpressionList)
};

static tree_slot_info IIR_TypeList_slot_info[] = {
  { IR_TYPE, "first", (tree_base_node*tree_base_node::*)&IIR_TypeList::first },
  { IR_TYPE_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_TypeList::rest },
};

tree_kind_info IR_TYPE_LIST_kind_info = {
  156,
  "IIR_TypeList",
  &fire_chunk_info,
  IR_LIST,
  IR_TYPE_LIST,
  0,
  2, 2, IIR_TypeList_slot_info,
  sizeof(IIR_TypeList)
};

static tree_slot_info IIR_WaveformList_slot_info[] = {
  { IR_WAVEFORM_ELEMENT, "first", (tree_base_node*tree_base_node::*)&IIR_WaveformList::first },
  { IR_WAVEFORM_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_WaveformList::rest },
};

tree_kind_info IR_WAVEFORM_LIST_kind_info = {
  157,
  "IIR_WaveformList",
  &fire_chunk_info,
  IR_LIST,
  IR_WAVEFORM_LIST,
  0,
  2, 2, IIR_WaveformList_slot_info,
  sizeof(IIR_WaveformList)
};

static tree_slot_info IIR_UnitList_slot_info[] = {
  { IR_PHYSICAL_UNIT, "first", (tree_base_node*tree_base_node::*)&IIR_UnitList::first },
  { IR_UNIT_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_UnitList::rest },
};

tree_kind_info IR_UNIT_LIST_kind_info = {
  158,
  "IIR_UnitList",
  &fire_chunk_info,
  IR_LIST,
  IR_UNIT_LIST,
  0,
  2, 2, IIR_UnitList_slot_info,
  sizeof(IIR_UnitList)
};

static tree_slot_info IIR_SequentialStatementList_slot_info[] = {
  { IR_SEQUENTIAL_STATEMENT, "first", (tree_base_node*tree_base_node::*)&IIR_SequentialStatementList::first },
  { IR_SEQUENTIAL_STATEMENT_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_SequentialStatementList::rest },
};

tree_kind_info IR_SEQUENTIAL_STATEMENT_LIST_kind_info = {
  159,
  "IIR_SequentialStatementList",
  &fire_chunk_info,
  IR_LIST,
  IR_SEQUENTIAL_STATEMENT_LIST,
  0,
  2, 2, IIR_SequentialStatementList_slot_info,
  sizeof(IIR_SequentialStatementList)
};

static tree_slot_info IIR_LibraryUnitList_slot_info[] = {
  { IR_LIBRARY_UNIT, "first", (tree_base_node*tree_base_node::*)&IIR_LibraryUnitList::first },
  { IR_LIBRARY_UNIT_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_LibraryUnitList::rest },
};

tree_kind_info IR_LIBRARY_UNIT_LIST_kind_info = {
  160,
  "IIR_LibraryUnitList",
  &fire_chunk_info,
  IR_LIST,
  IR_LIBRARY_UNIT_LIST,
  0,
  2, 2, IIR_LibraryUnitList_slot_info,
  sizeof(IIR_LibraryUnitList)
};

static tree_slot_info IIR_InterfaceList_slot_info[] = {
  { IR_INTERFACE_DECLARATION, "first", (tree_base_node*tree_base_node::*)&IIR_InterfaceList::first },
  { IR_INTERFACE_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_InterfaceList::rest },
};

tree_kind_info IR_INTERFACE_LIST_kind_info = {
  161,
  "IIR_InterfaceList",
  &fire_chunk_info,
  IR_LIST,
  IR_INTERFACE_LIST,
  0,
  2, 2, IIR_InterfaceList_slot_info,
  sizeof(IIR_InterfaceList)
};

static tree_slot_info IIR_EnumerationLiteralList_slot_info[] = {
  { IR_ENUMERATION_LITERAL, "first", (tree_base_node*tree_base_node::*)&IIR_EnumerationLiteralList::first },
  { IR_ENUMERATION_LITERAL_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_EnumerationLiteralList::rest },
};

tree_kind_info IR_ENUMERATION_LITERAL_LIST_kind_info = {
  162,
  "IIR_EnumerationLiteralList",
  &fire_chunk_info,
  IR_LIST,
  IR_ENUMERATION_LITERAL_LIST,
  0,
  2, 2, IIR_EnumerationLiteralList_slot_info,
  sizeof(IIR_EnumerationLiteralList)
};

static tree_slot_info IIR_EntityClassEntryList_slot_info[] = {
  { IR_ENTITY_CLASS_ENTRY, "first", (tree_base_node*tree_base_node::*)&IIR_EntityClassEntryList::first },
  { IR_ENTITY_CLASS_ENTRY_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_EntityClassEntryList::rest },
};

tree_kind_info IR_ENTITY_CLASS_ENTRY_LIST_kind_info = {
  163,
  "IIR_EntityClassEntryList",
  &fire_chunk_info,
  IR_LIST,
  IR_ENTITY_CLASS_ENTRY_LIST,
  0,
  2, 2, IIR_EntityClassEntryList_slot_info,
  sizeof(IIR_EntityClassEntryList)
};

static tree_slot_info IIR_ElementDeclarationList_slot_info[] = {
  { IR_ELEMENT_DECLARATION, "first", (tree_base_node*tree_base_node::*)&IIR_ElementDeclarationList::first },
  { IR_ELEMENT_DECLARATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ElementDeclarationList::rest },
};

tree_kind_info IR_ELEMENT_DECLARATION_LIST_kind_info = {
  164,
  "IIR_ElementDeclarationList",
  &fire_chunk_info,
  IR_LIST,
  IR_ELEMENT_DECLARATION_LIST,
  0,
  2, 2, IIR_ElementDeclarationList_slot_info,
  sizeof(IIR_ElementDeclarationList)
};

static tree_slot_info IIR_DeclarationList_slot_info[] = {
  { IR_DECLARATION, "first", (tree_base_node*tree_base_node::*)&IIR_DeclarationList::first },
  { IR_DECLARATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_DeclarationList::rest },
};

tree_kind_info IR_DECLARATION_LIST_kind_info = {
  165,
  "IIR_DeclarationList",
  &fire_chunk_info,
  IR_LIST,
  IR_DECLARATION_LIST,
  0,
  2, 2, IIR_DeclarationList_slot_info,
  sizeof(IIR_DeclarationList)
};

static tree_slot_info IIR_ConfigurationItemList_slot_info[] = {
  { IR_CONFIGURATION_ITEM, "first", (tree_base_node*tree_base_node::*)&IIR_ConfigurationItemList::first },
  { IR_CONFIGURATION_ITEM_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ConfigurationItemList::rest },
};

tree_kind_info IR_CONFIGURATION_ITEM_LIST_kind_info = {
  166,
  "IIR_ConfigurationItemList",
  &fire_chunk_info,
  IR_LIST,
  IR_CONFIGURATION_ITEM_LIST,
  0,
  2, 2, IIR_ConfigurationItemList_slot_info,
  sizeof(IIR_ConfigurationItemList)
};

static tree_slot_info IIR_ConcurrentStatementList_slot_info[] = {
  { IR_CONCURRENT_STATEMENT, "first", (tree_base_node*tree_base_node::*)&IIR_ConcurrentStatementList::first },
  { IR_CONCURRENT_STATEMENT_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ConcurrentStatementList::rest },
};

tree_kind_info IR_CONCURRENT_STATEMENT_LIST_kind_info = {
  167,
  "IIR_ConcurrentStatementList",
  &fire_chunk_info,
  IR_LIST,
  IR_CONCURRENT_STATEMENT_LIST,
  0,
  2, 2, IIR_ConcurrentStatementList_slot_info,
  sizeof(IIR_ConcurrentStatementList)
};

static tree_slot_info IIR_ChoiceList_slot_info[] = {
  { IR_CHOICE, "first", (tree_base_node*tree_base_node::*)&IIR_ChoiceList::first },
  { IR_CHOICE_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_ChoiceList::rest },
};

tree_kind_info IR_CHOICE_LIST_kind_info = {
  168,
  "IIR_ChoiceList",
  &fire_chunk_info,
  IR_LIST,
  IR_CHOICE_LIST,
  0,
  2, 2, IIR_ChoiceList_slot_info,
  sizeof(IIR_ChoiceList)
};

static tree_slot_info IIR_CaseStatementAlternativeList_slot_info[] = {
  { IR_CASE_STATEMENT_ALTERNATIVE, "first", (tree_base_node*tree_base_node::*)&IIR_CaseStatementAlternativeList::first },
  { IR_CASE_STATEMENT_ALTERNATIVE_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_CaseStatementAlternativeList::rest },
};

tree_kind_info IR_CASE_STATEMENT_ALTERNATIVE_LIST_kind_info = {
  169,
  "IIR_CaseStatementAlternativeList",
  &fire_chunk_info,
  IR_LIST,
  IR_CASE_STATEMENT_ALTERNATIVE_LIST,
  0,
  2, 2, IIR_CaseStatementAlternativeList_slot_info,
  sizeof(IIR_CaseStatementAlternativeList)
};

static tree_slot_info IIR_AttributeValueList_slot_info[] = {
  { IR_ATTRIBUTE_VALUE, "first", (tree_base_node*tree_base_node::*)&IIR_AttributeValueList::first },
  { IR_ATTRIBUTE_VALUE_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_AttributeValueList::rest },
};

tree_kind_info IR_ATTRIBUTE_VALUE_LIST_kind_info = {
  170,
  "IIR_AttributeValueList",
  &fire_chunk_info,
  IR_LIST,
  IR_ATTRIBUTE_VALUE_LIST,
  0,
  2, 2, IIR_AttributeValueList_slot_info,
  sizeof(IIR_AttributeValueList)
};

static tree_slot_info IIR_AssociationList_slot_info[] = {
  { IR_ASSOCIATION_ELEMENT, "first", (tree_base_node*tree_base_node::*)&IIR_AssociationList::first },
  { IR_ASSOCIATION_LIST, "rest", (tree_base_node*tree_base_node::*)&IIR_AssociationList::rest },
};

tree_kind_info IR_ASSOCIATION_LIST_kind_info = {
  171,
  "IIR_AssociationList",
  &fire_chunk_info,
  IR_LIST,
  IR_ASSOCIATION_LIST,
  0,
  2, 2, IIR_AssociationList_slot_info,
  sizeof(IIR_AssociationList)
};

static tree_slot_info IIR_Tuple_slot_info[] = {
};

tree_kind_info IR_TUPLE_kind_info = {
  172,
  "IIR_Tuple",
  &fire_chunk_info,
  IR_ROOT,
  IR_ASSOCIATION_ELEMENT_BY_EXPRESSION,
  0,
  0, 0, IIR_Tuple_slot_info,
  sizeof(IIR_Tuple)
};

static tree_slot_info IIR_ConfigurationSpecification_slot_info[] = {
  { IR_IDENTIFIER, "label", (tree_base_node*tree_base_node::*)&IIR_ConfigurationSpecification::label },
  { IR_COMPONENT_DECLARATION, "component", (tree_base_node*tree_base_node::*)&IIR_ConfigurationSpecification::component },
  { IR_BINDING_INDICATION, "binding", (tree_base_node*tree_base_node::*)&IIR_ConfigurationSpecification::binding },
};

tree_kind_info IR_CONFIGURATION_SPECIFICATION_kind_info = {
  173,
  "IIR_ConfigurationSpecification",
  &fire_chunk_info,
  IR_TUPLE,
  IR_CONFIGURATION_SPECIFICATION,
  0,
  3, 3, IIR_ConfigurationSpecification_slot_info,
  sizeof(IIR_ConfigurationSpecification)
};

static tree_slot_info IIR_BindingIndication_slot_info[] = {
  { IR_DECLARATIVE_REGION, "unit", (tree_base_node*tree_base_node::*)&IIR_BindingIndication::unit },
  { IR_ASSOCIATION_LIST, "generic_map_list", (tree_base_node*tree_base_node::*)&IIR_BindingIndication::generic_map_list },
  { IR_ASSOCIATION_LIST, "port_map_list", (tree_base_node*tree_base_node::*)&IIR_BindingIndication::port_map_list },
};

tree_kind_info IR_BINDING_INDICATION_kind_info = {
  174,
  "IIR_BindingIndication",
  &fire_chunk_info,
  IR_TUPLE,
  IR_BINDING_INDICATION,
  0,
  3, 3, IIR_BindingIndication_slot_info,
  sizeof(IIR_BindingIndication)
};

static tree_slot_info IIR_AttributeValue_slot_info[] = {
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_AttributeValue::value },
  { IR_ATTRIBUTE_DECLARATION, "attribute", (tree_base_node*tree_base_node::*)&IIR_AttributeValue::attribute },
};

tree_kind_info IR_ATTRIBUTE_VALUE_kind_info = {
  175,
  "IIR_AttributeValue",
  &fire_chunk_info,
  IR_TUPLE,
  IR_ATTRIBUTE_VALUE,
  0,
  2, 2, IIR_AttributeValue_slot_info,
  sizeof(IIR_AttributeValue)
};

static tree_slot_info IIR_IndexedAssociation_slot_info[] = {
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_IndexedAssociation::value },
};

tree_kind_info IR_INDEXED_ASSOCIATION_kind_info = {
  176,
  "IIR_IndexedAssociation",
  &fire_chunk_info,
  IR_TUPLE,
  IR_SINGLE_INDEXED_ASSOCIATION,
  0,
  1, 1, IIR_IndexedAssociation_slot_info,
  sizeof(IIR_IndexedAssociation)
};

static tree_slot_info IIR_OthersIndexedAssociation_slot_info[] = {
};

tree_kind_info IR_OTHERS_INDEXED_ASSOCIATION_kind_info = {
  177,
  "IIR_OthersIndexedAssociation",
  &fire_chunk_info,
  IR_INDEXED_ASSOCIATION,
  IR_OTHERS_INDEXED_ASSOCIATION,
  0,
  0, 0, IIR_OthersIndexedAssociation_slot_info,
  sizeof(IIR_OthersIndexedAssociation)
};

static tree_slot_info IIR_RangeIndexedAssociation_slot_info[] = {
  { IR_RANGE, "index_range", (tree_base_node*tree_base_node::*)&IIR_RangeIndexedAssociation::index_range },
};

tree_kind_info IR_RANGE_INDEXED_ASSOCIATION_kind_info = {
  178,
  "IIR_RangeIndexedAssociation",
  &fire_chunk_info,
  IR_INDEXED_ASSOCIATION,
  IR_SLICE_INDEXED_ASSOCIATION,
  0,
  1, 1, IIR_RangeIndexedAssociation_slot_info,
  sizeof(IIR_RangeIndexedAssociation)
};

static tree_slot_info IIR_SliceIndexedAssociation_slot_info[] = {
};

tree_kind_info IR_SLICE_INDEXED_ASSOCIATION_kind_info = {
  179,
  "IIR_SliceIndexedAssociation",
  &fire_chunk_info,
  IR_RANGE_INDEXED_ASSOCIATION,
  IR_SLICE_INDEXED_ASSOCIATION,
  0,
  0, 0, IIR_SliceIndexedAssociation_slot_info,
  sizeof(IIR_SliceIndexedAssociation)
};

static tree_slot_info IIR_SingleIndexedAssociation_slot_info[] = {
  { IR_EXPRESSION, "index", (tree_base_node*tree_base_node::*)&IIR_SingleIndexedAssociation::index },
};

tree_kind_info IR_SINGLE_INDEXED_ASSOCIATION_kind_info = {
  180,
  "IIR_SingleIndexedAssociation",
  &fire_chunk_info,
  IR_INDEXED_ASSOCIATION,
  IR_SINGLE_INDEXED_ASSOCIATION,
  0,
  1, 1, IIR_SingleIndexedAssociation_slot_info,
  sizeof(IIR_SingleIndexedAssociation)
};

static tree_slot_info IIR_ElementAssociation_slot_info[] = {
  { IR_ELEMENT_DECLARATION, "element", (tree_base_node*tree_base_node::*)&IIR_ElementAssociation::element },
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_ElementAssociation::value },
};

tree_kind_info IR_ELEMENT_ASSOCIATION_kind_info = {
  181,
  "IIR_ElementAssociation",
  &fire_chunk_info,
  IR_TUPLE,
  IR_ELEMENT_ASSOCIATION,
  0,
  2, 2, IIR_ElementAssociation_slot_info,
  sizeof(IIR_ElementAssociation)
};

static tree_slot_info IIR_WaveformElement_slot_info[] = {
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_WaveformElement::value },
  { IR_EXPRESSION, "time", (tree_base_node*tree_base_node::*)&IIR_WaveformElement::time },
};

tree_kind_info IR_WAVEFORM_ELEMENT_kind_info = {
  182,
  "IIR_WaveformElement",
  &fire_chunk_info,
  IR_TUPLE,
  IR_WAVEFORM_ELEMENT,
  0,
  2, 2, IIR_WaveformElement_slot_info,
  sizeof(IIR_WaveformElement)
};

static tree_slot_info IIR_EntityClassEntry_slot_info[] = {
  { (tree_kind_info*)&IR_Kind_ctype_info, "entity_kind", (tree_base_node*tree_base_node::*)&IIR_EntityClassEntry::entity_kind },
  { (tree_kind_info*)&bool_ctype_info, "is_boxed", (tree_base_node*tree_base_node::*)&IIR_EntityClassEntry::is_boxed },
};

tree_kind_info IR_ENTITY_CLASS_ENTRY_kind_info = {
  183,
  "IIR_EntityClassEntry",
  &fire_chunk_info,
  IR_TUPLE,
  IR_ENTITY_CLASS_ENTRY,
  0,
  0, 2, IIR_EntityClassEntry_slot_info,
  sizeof(IIR_EntityClassEntry)
};

static tree_slot_info IIR_Choice_slot_info[] = {
};

tree_kind_info IR_CHOICE_kind_info = {
  184,
  "IIR_Choice",
  &fire_chunk_info,
  IR_TUPLE,
  IR_CHOICE_BY_EXPRESSION,
  0,
  0, 0, IIR_Choice_slot_info,
  sizeof(IIR_Choice)
};

static tree_slot_info IIR_ChoiceByOthers_slot_info[] = {
};

tree_kind_info IR_CHOICE_BY_OTHERS_kind_info = {
  185,
  "IIR_ChoiceByOthers",
  &fire_chunk_info,
  IR_CHOICE,
  IR_CHOICE_BY_OTHERS,
  0,
  0, 0, IIR_ChoiceByOthers_slot_info,
  sizeof(IIR_ChoiceByOthers)
};

static tree_slot_info IIR_ChoiceByRange_slot_info[] = {
  { IR_RANGE, "range", (tree_base_node*tree_base_node::*)&IIR_ChoiceByRange::range },
};

tree_kind_info IR_CHOICE_BY_RANGE_kind_info = {
  186,
  "IIR_ChoiceByRange",
  &fire_chunk_info,
  IR_CHOICE,
  IR_CHOICE_BY_RANGE,
  0,
  1, 1, IIR_ChoiceByRange_slot_info,
  sizeof(IIR_ChoiceByRange)
};

static tree_slot_info IIR_ChoiceByExpression_slot_info[] = {
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&IIR_ChoiceByExpression::value },
};

tree_kind_info IR_CHOICE_BY_EXPRESSION_kind_info = {
  187,
  "IIR_ChoiceByExpression",
  &fire_chunk_info,
  IR_CHOICE,
  IR_CHOICE_BY_EXPRESSION,
  0,
  1, 1, IIR_ChoiceByExpression_slot_info,
  sizeof(IIR_ChoiceByExpression)
};

static tree_slot_info IIR_CaseStatementAlternative_slot_info[] = {
  { IR_SEQUENTIAL_STATEMENT_LIST, "sequence_of_statements", (tree_base_node*tree_base_node::*)&IIR_CaseStatementAlternative::sequence_of_statements },
  { IR_CHOICE_LIST, "choices", (tree_base_node*tree_base_node::*)&IIR_CaseStatementAlternative::choices },
};

tree_kind_info IR_CASE_STATEMENT_ALTERNATIVE_kind_info = {
  188,
  "IIR_CaseStatementAlternative",
  &fire_chunk_info,
  IR_TUPLE,
  IR_CASE_STATEMENT_ALTERNATIVE,
  0,
  2, 2, IIR_CaseStatementAlternative_slot_info,
  sizeof(IIR_CaseStatementAlternative)
};

static tree_slot_info IIR_AssociationElement_slot_info[] = {
  { IR_OBJECT_REFERENCE, "formal", (tree_base_node*tree_base_node::*)&IIR_AssociationElement::formal },
  { IR_INTERFACE_DECLARATION, "formal_declaration", (tree_base_node*tree_base_node::*)&IIR_AssociationElement::formal_declaration },
  { IR_DECLARATION, "formal_conversion", (tree_base_node*tree_base_node::*)&IIR_AssociationElement::formal_conversion },
  { IR_EXPRESSION, "actual", (tree_base_node*tree_base_node::*)&IIR_AssociationElement::actual },
  { IR_DECLARATION, "actual_conversion", (tree_base_node*tree_base_node::*)&IIR_AssociationElement::actual_conversion },
};

tree_kind_info IR_ASSOCIATION_ELEMENT_kind_info = {
  189,
  "IIR_AssociationElement",
  &fire_chunk_info,
  IR_TUPLE,
  IR_ASSOCIATION_ELEMENT_BY_EXPRESSION,
  0,
  5, 5, IIR_AssociationElement_slot_info,
  sizeof(IIR_AssociationElement)
};

static tree_slot_info IIR_AssociationElementOpen_slot_info[] = {
};

tree_kind_info IR_ASSOCIATION_ELEMENT_OPEN_kind_info = {
  190,
  "IIR_AssociationElementOpen",
  &fire_chunk_info,
  IR_ASSOCIATION_ELEMENT,
  IR_ASSOCIATION_ELEMENT_OPEN,
  0,
  0, 0, IIR_AssociationElementOpen_slot_info,
  sizeof(IIR_AssociationElementOpen)
};

static tree_slot_info IIR_AssociationElementByExpression_slot_info[] = {
};

tree_kind_info IR_ASSOCIATION_ELEMENT_BY_EXPRESSION_kind_info = {
  191,
  "IIR_AssociationElementByExpression",
  &fire_chunk_info,
  IR_ASSOCIATION_ELEMENT,
  IR_ASSOCIATION_ELEMENT_BY_EXPRESSION,
  0,
  0, 0, IIR_AssociationElementByExpression_slot_info,
  sizeof(IIR_AssociationElementByExpression)
};

static tree_slot_info IIR_Literal_slot_info[] = {
};

tree_kind_info IR_LITERAL_kind_info = {
  192,
  "IIR_Literal",
  &fire_chunk_info,
  IR_ROOT,
  IR_IDENTIFIER,
  0,
  0, 0, IIR_Literal_slot_info,
  sizeof(IIR_Literal)
};

static tree_slot_info IIR_AbstractLiteral_slot_info[] = {
};

tree_kind_info IR_ABSTRACT_LITERAL_kind_info = {
  193,
  "IIR_AbstractLiteral",
  &fire_chunk_info,
  IR_LITERAL,
  IR_INTEGER_LITERAL,
  0,
  0, 0, IIR_AbstractLiteral_slot_info,
  sizeof(IIR_AbstractLiteral)
};

static tree_slot_info IIR_FloatingPointLiteral_slot_info[] = {
  { (tree_kind_info*)&IR_String_ctype_info, "text", (tree_base_node*tree_base_node::*)&IIR_FloatingPointLiteral::text },
};

tree_kind_info IR_FLOATING_POINT_LITERAL_kind_info = {
  194,
  "IIR_FloatingPointLiteral",
  &fire_chunk_info,
  IR_ABSTRACT_LITERAL,
  IR_FLOATING_POINT_LITERAL,
  0,
  0, 1, IIR_FloatingPointLiteral_slot_info,
  sizeof(IIR_FloatingPointLiteral)
};

static tree_slot_info IIR_IntegerLiteral_slot_info[] = {
  { (tree_kind_info*)&IR_String_ctype_info, "text", (tree_base_node*tree_base_node::*)&IIR_IntegerLiteral::text },
};

tree_kind_info IR_INTEGER_LITERAL_kind_info = {
  195,
  "IIR_IntegerLiteral",
  &fire_chunk_info,
  IR_ABSTRACT_LITERAL,
  IR_INTEGER_LITERAL,
  0,
  0, 1, IIR_IntegerLiteral_slot_info,
  sizeof(IIR_IntegerLiteral)
};

static tree_slot_info IIR_TextLiteral_slot_info[] = {
  { (tree_kind_info*)&IR_String_ctype_info, "text", (tree_base_node*tree_base_node::*)&IIR_TextLiteral::text },
};

tree_kind_info IR_TEXT_LITERAL_kind_info = {
  196,
  "IIR_TextLiteral",
  &fire_chunk_info,
  IR_LITERAL,
  IR_IDENTIFIER,
  0,
  0, 1, IIR_TextLiteral_slot_info,
  sizeof(IIR_TextLiteral)
};

static tree_slot_info IIR_StringLiteral_slot_info[] = {
};

tree_kind_info IR_STRING_LITERAL_kind_info = {
  197,
  "IIR_StringLiteral",
  &fire_chunk_info,
  IR_TEXT_LITERAL,
  IR_STRING_LITERAL,
  0,
  0, 0, IIR_StringLiteral_slot_info,
  sizeof(IIR_StringLiteral)
};

static tree_slot_info IIR_CharacterLiteral_slot_info[] = {
};

tree_kind_info IR_CHARACTER_LITERAL_kind_info = {
  198,
  "IIR_CharacterLiteral",
  &fire_chunk_info,
  IR_TEXT_LITERAL,
  IR_CHARACTER_LITERAL,
  0,
  0, 0, IIR_CharacterLiteral_slot_info,
  sizeof(IIR_CharacterLiteral)
};

static tree_slot_info IIR_Identifier_slot_info[] = {
};

tree_kind_info IR_IDENTIFIER_kind_info = {
  199,
  "IIR_Identifier",
  &fire_chunk_info,
  IR_TEXT_LITERAL,
  IR_IDENTIFIER,
  0,
  0, 0, IIR_Identifier_slot_info,
  sizeof(IIR_Identifier)
};

static tree_slot_info IIR_Dummy_slot_info[] = {
};

tree_kind_info IR_DUMMY_kind_info = {
  200,
  "IIR_Dummy",
  &fire_chunk_info,
  IR_ROOT,
  IR_SIGNATURE,
  0,
  0, 0, IIR_Dummy_slot_info,
  sizeof(IIR_Dummy)
};

static tree_slot_info IIR_Signature_slot_info[] = {
};

tree_kind_info IR_SIGNATURE_kind_info = {
  201,
  "IIR_Signature",
  &fire_chunk_info,
  IR_DUMMY,
  IR_SIGNATURE,
  0,
  0, 0, IIR_Signature_slot_info,
  sizeof(IIR_Signature)
};

static tree_slot_info IIR_PosInfo_slot_info[] = {
};

tree_kind_info IR_POS_INFO_kind_info = {
  202,
  "IIR_PosInfo",
  &fire_chunk_info,
  0,
  IR_POS_INFO_TEXT_FILE,
  0,
  0, 0, IIR_PosInfo_slot_info,
  sizeof(IIR_PosInfo)
};

static tree_slot_info IIR_PosInfo_Sheet_slot_info[] = {
  { (tree_kind_info*)&fire_string_ctype_info, "sheet_name", (tree_base_node*tree_base_node::*)&IIR_PosInfo_Sheet::sheet_name },
  { (tree_kind_info*)&int_ctype_info, "x_coordinate", (tree_base_node*tree_base_node::*)&IIR_PosInfo_Sheet::x_coordinate },
  { (tree_kind_info*)&int_ctype_info, "y_coordinate", (tree_base_node*tree_base_node::*)&IIR_PosInfo_Sheet::y_coordinate },
};

tree_kind_info IR_POS_INFO_SHEET_kind_info = {
  203,
  "IIR_PosInfo_Sheet",
  &fire_chunk_info,
  IR_POS_INFO,
  IR_POS_INFO_SHEET,
  0,
  0, 3, IIR_PosInfo_Sheet_slot_info,
  sizeof(IIR_PosInfo_Sheet)
};

static tree_slot_info IIR_PosInfo_TextFile_slot_info[] = {
  { (tree_kind_info*)&fire_string_ctype_info, "file_name", (tree_base_node*tree_base_node::*)&IIR_PosInfo_TextFile::file_name },
  { (tree_kind_info*)&int_ctype_info, "line_number", (tree_base_node*tree_base_node::*)&IIR_PosInfo_TextFile::line_number },
};

tree_kind_info IR_POS_INFO_TEXT_FILE_kind_info = {
  204,
  "IIR_PosInfo_TextFile",
  &fire_chunk_info,
  IR_POS_INFO,
  IR_POS_INFO_TEXT_FILE,
  0,
  0, 2, IIR_PosInfo_TextFile_slot_info,
  sizeof(IIR_PosInfo_TextFile)
};

tree_kind IIR_PosInfo::kind () { return IR_POS_INFO; }

tree_kind IIR_PosInfo_TextFile::kind () { return IR_POS_INFO_TEXT_FILE; }

tree_kind IIR_PosInfo_Sheet::kind () { return IR_POS_INFO_SHEET; }

tree_kind IIR_Root::kind () { return IR_ROOT; }

tree_kind IIR_Dummy::kind () { return IR_DUMMY; }

tree_kind IIR_Signature::kind () { return IR_SIGNATURE; }

tree_kind IIR_Literal::kind () { return IR_LITERAL; }

tree_kind IIR_TextLiteral::kind () { return IR_TEXT_LITERAL; }

tree_kind IIR_Identifier::kind () { return IR_IDENTIFIER; }

tree_kind IIR_CharacterLiteral::kind () { return IR_CHARACTER_LITERAL; }

tree_kind IIR_StringLiteral::kind () { return IR_STRING_LITERAL; }

tree_kind IIR_AbstractLiteral::kind () { return IR_ABSTRACT_LITERAL; }

tree_kind IIR_IntegerLiteral::kind () { return IR_INTEGER_LITERAL; }

tree_kind IIR_FloatingPointLiteral::kind () { return IR_FLOATING_POINT_LITERAL; }

tree_kind IIR_Tuple::kind () { return IR_TUPLE; }

tree_kind IIR_AssociationElement::kind () { return IR_ASSOCIATION_ELEMENT; }

tree_kind IIR_AssociationElementByExpression::kind () { return IR_ASSOCIATION_ELEMENT_BY_EXPRESSION; }

tree_kind IIR_AssociationElementOpen::kind () { return IR_ASSOCIATION_ELEMENT_OPEN; }

tree_kind IIR_CaseStatementAlternative::kind () { return IR_CASE_STATEMENT_ALTERNATIVE; }

tree_kind IIR_Choice::kind () { return IR_CHOICE; }

tree_kind IIR_ChoiceByExpression::kind () { return IR_CHOICE_BY_EXPRESSION; }

tree_kind IIR_ChoiceByRange::kind () { return IR_CHOICE_BY_RANGE; }

tree_kind IIR_ChoiceByOthers::kind () { return IR_CHOICE_BY_OTHERS; }

tree_kind IIR_EntityClassEntry::kind () { return IR_ENTITY_CLASS_ENTRY; }

tree_kind IIR_WaveformElement::kind () { return IR_WAVEFORM_ELEMENT; }

tree_kind IIR_ElementAssociation::kind () { return IR_ELEMENT_ASSOCIATION; }

tree_kind IIR_IndexedAssociation::kind () { return IR_INDEXED_ASSOCIATION; }

tree_kind IIR_SingleIndexedAssociation::kind () { return IR_SINGLE_INDEXED_ASSOCIATION; }

tree_kind IIR_RangeIndexedAssociation::kind () { return IR_RANGE_INDEXED_ASSOCIATION; }

tree_kind IIR_SliceIndexedAssociation::kind () { return IR_SLICE_INDEXED_ASSOCIATION; }

tree_kind IIR_OthersIndexedAssociation::kind () { return IR_OTHERS_INDEXED_ASSOCIATION; }

tree_kind IIR_AttributeValue::kind () { return IR_ATTRIBUTE_VALUE; }

tree_kind IIR_List::kind () { return IR_LIST; }

tree_kind IIR_AssociationList::kind () { return IR_ASSOCIATION_LIST; }

pIIR_AssociationList reverse (pIIR_AssociationList n)
{
  pIIR_AssociationList r = NULL;
  while (n)
    {
      pIIR_AssociationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_AttributeValueList::kind () { return IR_ATTRIBUTE_VALUE_LIST; }

pIIR_AttributeValueList reverse (pIIR_AttributeValueList n)
{
  pIIR_AttributeValueList r = NULL;
  while (n)
    {
      pIIR_AttributeValueList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_CaseStatementAlternativeList::kind () { return IR_CASE_STATEMENT_ALTERNATIVE_LIST; }

pIIR_CaseStatementAlternativeList reverse (pIIR_CaseStatementAlternativeList n)
{
  pIIR_CaseStatementAlternativeList r = NULL;
  while (n)
    {
      pIIR_CaseStatementAlternativeList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ChoiceList::kind () { return IR_CHOICE_LIST; }

pIIR_ChoiceList reverse (pIIR_ChoiceList n)
{
  pIIR_ChoiceList r = NULL;
  while (n)
    {
      pIIR_ChoiceList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ConcurrentStatementList::kind () { return IR_CONCURRENT_STATEMENT_LIST; }

pIIR_ConcurrentStatementList reverse (pIIR_ConcurrentStatementList n)
{
  pIIR_ConcurrentStatementList r = NULL;
  while (n)
    {
      pIIR_ConcurrentStatementList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ConfigurationItemList::kind () { return IR_CONFIGURATION_ITEM_LIST; }

pIIR_ConfigurationItemList reverse (pIIR_ConfigurationItemList n)
{
  pIIR_ConfigurationItemList r = NULL;
  while (n)
    {
      pIIR_ConfigurationItemList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_DeclarationList::kind () { return IR_DECLARATION_LIST; }

pIIR_DeclarationList reverse (pIIR_DeclarationList n)
{
  pIIR_DeclarationList r = NULL;
  while (n)
    {
      pIIR_DeclarationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ElementDeclarationList::kind () { return IR_ELEMENT_DECLARATION_LIST; }

pIIR_ElementDeclarationList reverse (pIIR_ElementDeclarationList n)
{
  pIIR_ElementDeclarationList r = NULL;
  while (n)
    {
      pIIR_ElementDeclarationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_EntityClassEntryList::kind () { return IR_ENTITY_CLASS_ENTRY_LIST; }

pIIR_EntityClassEntryList reverse (pIIR_EntityClassEntryList n)
{
  pIIR_EntityClassEntryList r = NULL;
  while (n)
    {
      pIIR_EntityClassEntryList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_EnumerationLiteralList::kind () { return IR_ENUMERATION_LITERAL_LIST; }

pIIR_EnumerationLiteralList reverse (pIIR_EnumerationLiteralList n)
{
  pIIR_EnumerationLiteralList r = NULL;
  while (n)
    {
      pIIR_EnumerationLiteralList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_InterfaceList::kind () { return IR_INTERFACE_LIST; }

pIIR_InterfaceList reverse (pIIR_InterfaceList n)
{
  pIIR_InterfaceList r = NULL;
  while (n)
    {
      pIIR_InterfaceList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_LibraryUnitList::kind () { return IR_LIBRARY_UNIT_LIST; }

pIIR_LibraryUnitList reverse (pIIR_LibraryUnitList n)
{
  pIIR_LibraryUnitList r = NULL;
  while (n)
    {
      pIIR_LibraryUnitList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_SequentialStatementList::kind () { return IR_SEQUENTIAL_STATEMENT_LIST; }

pIIR_SequentialStatementList reverse (pIIR_SequentialStatementList n)
{
  pIIR_SequentialStatementList r = NULL;
  while (n)
    {
      pIIR_SequentialStatementList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_UnitList::kind () { return IR_UNIT_LIST; }

pIIR_UnitList reverse (pIIR_UnitList n)
{
  pIIR_UnitList r = NULL;
  while (n)
    {
      pIIR_UnitList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_WaveformList::kind () { return IR_WAVEFORM_LIST; }

pIIR_WaveformList reverse (pIIR_WaveformList n)
{
  pIIR_WaveformList r = NULL;
  while (n)
    {
      pIIR_WaveformList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_TypeList::kind () { return IR_TYPE_LIST; }

pIIR_TypeList reverse (pIIR_TypeList n)
{
  pIIR_TypeList r = NULL;
  while (n)
    {
      pIIR_TypeList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ExpressionList::kind () { return IR_EXPRESSION_LIST; }

pIIR_ExpressionList reverse (pIIR_ExpressionList n)
{
  pIIR_ExpressionList r = NULL;
  while (n)
    {
      pIIR_ExpressionList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_IndexedAssociationList::kind () { return IR_INDEXED_ASSOCIATION_LIST; }

pIIR_IndexedAssociationList reverse (pIIR_IndexedAssociationList n)
{
  pIIR_IndexedAssociationList r = NULL;
  while (n)
    {
      pIIR_IndexedAssociationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ElementAssociationList::kind () { return IR_ELEMENT_ASSOCIATION_LIST; }

pIIR_ElementAssociationList reverse (pIIR_ElementAssociationList n)
{
  pIIR_ElementAssociationList r = NULL;
  while (n)
    {
      pIIR_ElementAssociationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ComponentInstantiationList::kind () { return IR_COMPONENT_INSTANTIATION_LIST; }

pIIR_ComponentInstantiationList reverse (pIIR_ComponentInstantiationList n)
{
  pIIR_ComponentInstantiationList r = NULL;
  while (n)
    {
      pIIR_ComponentInstantiationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_ConfigurationSpecificationList::kind () { return IR_CONFIGURATION_SPECIFICATION_LIST; }

pIIR_ConfigurationSpecificationList reverse (pIIR_ConfigurationSpecificationList n)
{
  pIIR_ConfigurationSpecificationList r = NULL;
  while (n)
    {
      pIIR_ConfigurationSpecificationList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_IdentifierList::kind () { return IR_IDENTIFIER_LIST; }

pIIR_IdentifierList reverse (pIIR_IdentifierList n)
{
  pIIR_IdentifierList r = NULL;
  while (n)
    {
      pIIR_IdentifierList n2 = n->rest;
      n->rest = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind IIR_Range::kind () { return IR_RANGE; }

tree_kind IIR_ExplicitRange::kind () { return IR_EXPLICIT_RANGE; }

tree_kind IIR_ArrayRange::kind () { return IR_ARRAY_RANGE; }

tree_kind IIR_Attr_ArrayRANGE::kind () { return IR_ATTR_ARRAY_RANGE; }

tree_kind IIR_Attr_ArrayREVERSE_RANGE::kind () { return IR_ATTR_ARRAY_REVERSE_RANGE; }

tree_kind IIR_Type::kind () { return IR_TYPE; }

tree_kind IIR_Subtype::kind () { return IR_SUBTYPE; }

tree_kind IIR_ScalarType::kind () { return IR_SCALAR_TYPE; }

tree_kind IIR_ScalarSubtype::kind () { return IR_SCALAR_SUBTYPE; }

tree_kind IIR_EnumerationType::kind () { return IR_ENUMERATION_TYPE; }

tree_kind IIR_IntegerType::kind () { return IR_INTEGER_TYPE; }

tree_kind IIR_FloatingType::kind () { return IR_FLOATING_TYPE; }

tree_kind IIR_PhysicalType::kind () { return IR_PHYSICAL_TYPE; }

tree_kind IIR_CompositeType::kind () { return IR_COMPOSITE_TYPE; }

tree_kind IIR_RecordType::kind () { return IR_RECORD_TYPE; }

tree_kind IIR_RecordSubtype::kind () { return IR_RECORD_SUBTYPE; }

tree_kind IIR_AccessType::kind () { return IR_ACCESS_TYPE; }

tree_kind IIR_FileType::kind () { return IR_FILE_TYPE; }

tree_kind IIR_ArrayType::kind () { return IR_ARRAY_TYPE; }

tree_kind IIR_ArraySubtype::kind () { return IR_ARRAY_SUBTYPE; }

tree_kind IIR_Declaration::kind () { return IR_DECLARATION; }

tree_kind IIR_DeclarativeRegion::kind () { return IR_DECLARATIVE_REGION; }

tree_kind IIR_LoopDeclarativeRegion::kind () { return IR_LOOP_DECLARATIVE_REGION; }

tree_kind IIR_SubprogramDeclaration::kind () { return IR_SUBPROGRAM_DECLARATION; }

tree_kind IIR_ProcedureDeclaration::kind () { return IR_PROCEDURE_DECLARATION; }

tree_kind IIR_PredefinedProcedureDeclaration::kind () { return IR_PREDEFINED_PROCEDURE_DECLARATION; }

tree_kind IIR_FunctionDeclaration::kind () { return IR_FUNCTION_DECLARATION; }

tree_kind IIR_PredefinedFunctionDeclaration::kind () { return IR_PREDEFINED_FUNCTION_DECLARATION; }

tree_kind IIR_EnumerationLiteral::kind () { return IR_ENUMERATION_LITERAL; }

tree_kind IIR_ElementDeclaration::kind () { return IR_ELEMENT_DECLARATION; }

tree_kind IIR_TypeDeclaration::kind () { return IR_TYPE_DECLARATION; }

tree_kind IIR_SubtypeDeclaration::kind () { return IR_SUBTYPE_DECLARATION; }

tree_kind IIR_ObjectDeclaration::kind () { return IR_OBJECT_DECLARATION; }

tree_kind IIR_ConstantDeclaration::kind () { return IR_CONSTANT_DECLARATION; }

tree_kind IIR_VariableDeclaration::kind () { return IR_VARIABLE_DECLARATION; }

tree_kind IIR_SharedVariableDeclaration::kind () { return IR_SHARED_VARIABLE_DECLARATION; }

tree_kind IIR_SignalDeclaration::kind () { return IR_SIGNAL_DECLARATION; }

tree_kind IIR_FileDeclaration::kind () { return IR_FILE_DECLARATION; }

tree_kind IIR_InterfaceDeclaration::kind () { return IR_INTERFACE_DECLARATION; }

tree_kind IIR_ConstantInterfaceDeclaration::kind () { return IR_CONSTANT_INTERFACE_DECLARATION; }

tree_kind IIR_VariableInterfaceDeclaration::kind () { return IR_VARIABLE_INTERFACE_DECLARATION; }

tree_kind IIR_SignalInterfaceDeclaration::kind () { return IR_SIGNAL_INTERFACE_DECLARATION; }

tree_kind IIR_FileInterfaceDeclaration::kind () { return IR_FILE_INTERFACE_DECLARATION; }

tree_kind IIR_AttributeDeclaration::kind () { return IR_ATTRIBUTE_DECLARATION; }

tree_kind IIR_ComponentDeclaration::kind () { return IR_COMPONENT_DECLARATION; }

tree_kind IIR_LibraryDeclaration::kind () { return IR_LIBRARY_DECLARATION; }

tree_kind IIR_LibraryUnit::kind () { return IR_LIBRARY_UNIT; }

tree_kind IIR_EntityDeclaration::kind () { return IR_ENTITY_DECLARATION; }

tree_kind IIR_ArchitectureDeclaration::kind () { return IR_ARCHITECTURE_DECLARATION; }

tree_kind IIR_ArchitectureRef::kind () { return IR_ARCHITECTURE_REF; }

tree_kind IIR_PackageDeclaration::kind () { return IR_PACKAGE_DECLARATION; }

tree_kind IIR_PackageBodyDeclaration::kind () { return IR_PACKAGE_BODY_DECLARATION; }

tree_kind IIR_ConfigurationDeclaration::kind () { return IR_CONFIGURATION_DECLARATION; }

tree_kind IIR_ConfigurationItem::kind () { return IR_CONFIGURATION_ITEM; }

tree_kind IIR_BlockConfiguration::kind () { return IR_BLOCK_CONFIGURATION; }

tree_kind IIR_ComponentConfiguration::kind () { return IR_COMPONENT_CONFIGURATION; }

tree_kind IIR_PhysicalUnit::kind () { return IR_PHYSICAL_UNIT; }

tree_kind IIR_BindingIndication::kind () { return IR_BINDING_INDICATION; }

tree_kind IIR_ConfigurationSpecification::kind () { return IR_CONFIGURATION_SPECIFICATION; }

tree_kind IIR_DisconnectSpecification::kind () { return IR_DISCONNECT_SPECIFICATION; }

tree_kind IIR_Label::kind () { return IR_LABEL; }

tree_kind IIR_LibraryClause::kind () { return IR_LIBRARY_CLAUSE; }

tree_kind IIR_UseClause::kind () { return IR_USE_CLAUSE; }

tree_kind IIR_Expression::kind () { return IR_EXPRESSION; }

tree_kind IIR_AbstractLiteralExpression::kind () { return IR_ABSTRACT_LITERAL_EXPRESSION; }

tree_kind IIR_PhysicalLiteral::kind () { return IR_PHYSICAL_LITERAL; }

tree_kind IIR_ArrayLiteralExpression::kind () { return IR_ARRAY_LITERAL_EXPRESSION; }

tree_kind IIR_EnumLiteralReference::kind () { return IR_ENUM_LITERAL_REFERENCE; }

tree_kind IIR_NullExpression::kind () { return IR_NULL_EXPRESSION; }

tree_kind IIR_Aggregate::kind () { return IR_AGGREGATE; }

tree_kind IIR_RecordAggregate::kind () { return IR_RECORD_AGGREGATE; }

tree_kind IIR_ArtificialRecordAggregate::kind () { return IR_ARTIFICIAL_RECORD_AGGREGATE; }

tree_kind IIR_ArrayAggregate::kind () { return IR_ARRAY_AGGREGATE; }

tree_kind IIR_ArtificialArrayAggregate::kind () { return IR_ARTIFICIAL_ARRAY_AGGREGATE; }

tree_kind IIR_FunctionCall::kind () { return IR_FUNCTION_CALL; }

tree_kind IIR_QualifiedExpression::kind () { return IR_QUALIFIED_EXPRESSION; }

tree_kind IIR_TypeConversion::kind () { return IR_TYPE_CONVERSION; }

tree_kind IIR_Allocator::kind () { return IR_ALLOCATOR; }

tree_kind IIR_OpenExpression::kind () { return IR_OPEN_EXPRESSION; }

tree_kind IIR_ObjectReference::kind () { return IR_OBJECT_REFERENCE; }

tree_kind IIR_SimpleReference::kind () { return IR_SIMPLE_REFERENCE; }

tree_kind IIR_AccessReference::kind () { return IR_ACCESS_REFERENCE; }

tree_kind IIR_RecordReference::kind () { return IR_RECORD_REFERENCE; }

tree_kind IIR_GenericArrayReference::kind () { return IR_GENERIC_ARRAY_REFERENCE; }

tree_kind IIR_ArrayReference::kind () { return IR_ARRAY_REFERENCE; }

tree_kind IIR_SliceReference::kind () { return IR_SLICE_REFERENCE; }

tree_kind IIR_SignalAttr::kind () { return IR_SIGNAL_ATTR; }

tree_kind IIR_Attr_DELAYED::kind () { return IR_ATTR_DELAYED; }

tree_kind IIR_Attr_STABLE::kind () { return IR_ATTR_STABLE; }

tree_kind IIR_Attr_QUIET::kind () { return IR_ATTR_QUIET; }

tree_kind IIR_Attr_TRANSACTION::kind () { return IR_ATTR_TRANSACTION; }

tree_kind IIR_FunctionAttr::kind () { return IR_FUNCTION_ATTR; }

tree_kind IIR_AttrSigFunc::kind () { return IR_ATTR_SIG_FUNC; }

tree_kind IIR_Attr_EVENT::kind () { return IR_ATTR_EVENT; }

tree_kind IIR_Attr_ACTIVE::kind () { return IR_ATTR_ACTIVE; }

tree_kind IIR_Attr_LAST_EVENT::kind () { return IR_ATTR_LAST_EVENT; }

tree_kind IIR_Attr_LAST_ACTIVE::kind () { return IR_ATTR_LAST_ACTIVE; }

tree_kind IIR_Attr_LAST_VALUE::kind () { return IR_ATTR_LAST_VALUE; }

tree_kind IIR_Attr_DRIVING::kind () { return IR_ATTR_DRIVING; }

tree_kind IIR_Attr_DRIVING_VALUE::kind () { return IR_ATTR_DRIVING_VALUE; }

tree_kind IIR_ValueAttr::kind () { return IR_VALUE_ATTR; }

tree_kind IIR_AttrTypeValue::kind () { return IR_ATTR_TYPE_VALUE; }

tree_kind IIR_Attr_LEFT::kind () { return IR_ATTR_LEFT; }

tree_kind IIR_Attr_RIGHT::kind () { return IR_ATTR_RIGHT; }

tree_kind IIR_Attr_LOW::kind () { return IR_ATTR_LOW; }

tree_kind IIR_Attr_HIGH::kind () { return IR_ATTR_HIGH; }

tree_kind IIR_Attr_ASCENDING::kind () { return IR_ATTR_ASCENDING; }

tree_kind IIR_Attr_LENGTH::kind () { return IR_ATTR_LENGTH; }

tree_kind IIR_AttrTypeFunc::kind () { return IR_ATTR_TYPE_FUNC; }

tree_kind IIR_Attr_IMAGE::kind () { return IR_ATTR_IMAGE; }

tree_kind IIR_Attr_VALUE::kind () { return IR_ATTR_VALUE; }

tree_kind IIR_Attr_POS::kind () { return IR_ATTR_POS; }

tree_kind IIR_Attr_VAL::kind () { return IR_ATTR_VAL; }

tree_kind IIR_Attr_SUCC::kind () { return IR_ATTR_SUCC; }

tree_kind IIR_Attr_PRED::kind () { return IR_ATTR_PRED; }

tree_kind IIR_Attr_LEFTOF::kind () { return IR_ATTR_LEFTOF; }

tree_kind IIR_Attr_RIGHTOF::kind () { return IR_ATTR_RIGHTOF; }

tree_kind IIR_AttrArrayFunc::kind () { return IR_ATTR_ARRAY_FUNC; }

tree_kind IIR_Attr_ArrayLEFT::kind () { return IR_ATTR_ARRAY_LEFT; }

tree_kind IIR_Attr_ArrayRIGHT::kind () { return IR_ATTR_ARRAY_RIGHT; }

tree_kind IIR_Attr_ArrayHIGH::kind () { return IR_ATTR_ARRAY_HIGH; }

tree_kind IIR_Attr_ArrayLOW::kind () { return IR_ATTR_ARRAY_LOW; }

tree_kind IIR_Attr_ArrayASCENDING::kind () { return IR_ATTR_ARRAY_ASCENDING; }

tree_kind IIR_Attr_ArrayLENGTH::kind () { return IR_ATTR_ARRAY_LENGTH; }

tree_kind IIR_SequentialStatement::kind () { return IR_SEQUENTIAL_STATEMENT; }

tree_kind IIR_WaitStatement::kind () { return IR_WAIT_STATEMENT; }

tree_kind IIR_AssertionStatement::kind () { return IR_ASSERTION_STATEMENT; }

tree_kind IIR_ReportStatement::kind () { return IR_REPORT_STATEMENT; }

tree_kind IIR_SignalAssignmentStatement::kind () { return IR_SIGNAL_ASSIGNMENT_STATEMENT; }

tree_kind IIR_VariableAssignmentStatement::kind () { return IR_VARIABLE_ASSIGNMENT_STATEMENT; }

tree_kind IIR_ProcedureCallStatement::kind () { return IR_PROCEDURE_CALL_STATEMENT; }

tree_kind IIR_IfStatement::kind () { return IR_IF_STATEMENT; }

tree_kind IIR_CaseStatement::kind () { return IR_CASE_STATEMENT; }

tree_kind IIR_LoopStatement::kind () { return IR_LOOP_STATEMENT; }

tree_kind IIR_ForLoopStatement::kind () { return IR_FOR_LOOP_STATEMENT; }

tree_kind IIR_WhileLoopStatement::kind () { return IR_WHILE_LOOP_STATEMENT; }

tree_kind IIR_LoopControlStatement::kind () { return IR_LOOP_CONTROL_STATEMENT; }

tree_kind IIR_NextStatement::kind () { return IR_NEXT_STATEMENT; }

tree_kind IIR_ExitStatement::kind () { return IR_EXIT_STATEMENT; }

tree_kind IIR_ReturnStatement::kind () { return IR_RETURN_STATEMENT; }

tree_kind IIR_NullStatement::kind () { return IR_NULL_STATEMENT; }

tree_kind IIR_ConcurrentStatement::kind () { return IR_CONCURRENT_STATEMENT; }

tree_kind IIR_BlockStatement::kind () { return IR_BLOCK_STATEMENT; }

tree_kind IIR_ProcessStatement::kind () { return IR_PROCESS_STATEMENT; }

tree_kind IIR_ImplicitProcessStatement::kind () { return IR_IMPLICIT_PROCESS_STATEMENT; }

tree_kind IIR_SensitizedProcessStatement::kind () { return IR_SENSITIZED_PROCESS_STATEMENT; }

tree_kind IIR_ComponentInstantiationStatement::kind () { return IR_COMPONENT_INSTANTIATION_STATEMENT; }

tree_kind IIR_ConcurrentGenerateStatement::kind () { return IR_CONCURRENT_GENERATE_STATEMENT; }

tree_kind IIR_ConcurrentGenerateForStatement::kind () { return IR_CONCURRENT_GENERATE_FOR_STATEMENT; }

tree_kind IIR_ConcurrentGenerateIfStatement::kind () { return IR_CONCURRENT_GENERATE_IF_STATEMENT; }

static tree_kind fire_kinds[205] = {
  IR_POS_INFO,
  IR_POS_INFO_TEXT_FILE,
  IR_POS_INFO_SHEET,
  IR_ROOT,
  IR_DUMMY,
  IR_SIGNATURE,
  IR_LITERAL,
  IR_TEXT_LITERAL,
  IR_IDENTIFIER,
  IR_CHARACTER_LITERAL,
  IR_STRING_LITERAL,
  IR_ABSTRACT_LITERAL,
  IR_INTEGER_LITERAL,
  IR_FLOATING_POINT_LITERAL,
  IR_TUPLE,
  IR_ASSOCIATION_ELEMENT,
  IR_ASSOCIATION_ELEMENT_BY_EXPRESSION,
  IR_ASSOCIATION_ELEMENT_OPEN,
  IR_CASE_STATEMENT_ALTERNATIVE,
  IR_CHOICE,
  IR_CHOICE_BY_EXPRESSION,
  IR_CHOICE_BY_RANGE,
  IR_CHOICE_BY_OTHERS,
  IR_ENTITY_CLASS_ENTRY,
  IR_WAVEFORM_ELEMENT,
  IR_ELEMENT_ASSOCIATION,
  IR_INDEXED_ASSOCIATION,
  IR_SINGLE_INDEXED_ASSOCIATION,
  IR_RANGE_INDEXED_ASSOCIATION,
  IR_SLICE_INDEXED_ASSOCIATION,
  IR_OTHERS_INDEXED_ASSOCIATION,
  IR_ATTRIBUTE_VALUE,
  IR_LIST,
  IR_ASSOCIATION_LIST,
  IR_ATTRIBUTE_VALUE_LIST,
  IR_CASE_STATEMENT_ALTERNATIVE_LIST,
  IR_CHOICE_LIST,
  IR_CONCURRENT_STATEMENT_LIST,
  IR_CONFIGURATION_ITEM_LIST,
  IR_DECLARATION_LIST,
  IR_ELEMENT_DECLARATION_LIST,
  IR_ENTITY_CLASS_ENTRY_LIST,
  IR_ENUMERATION_LITERAL_LIST,
  IR_INTERFACE_LIST,
  IR_LIBRARY_UNIT_LIST,
  IR_SEQUENTIAL_STATEMENT_LIST,
  IR_UNIT_LIST,
  IR_WAVEFORM_LIST,
  IR_TYPE_LIST,
  IR_EXPRESSION_LIST,
  IR_INDEXED_ASSOCIATION_LIST,
  IR_ELEMENT_ASSOCIATION_LIST,
  IR_COMPONENT_INSTANTIATION_LIST,
  IR_CONFIGURATION_SPECIFICATION_LIST,
  IR_IDENTIFIER_LIST,
  IR_RANGE,
  IR_EXPLICIT_RANGE,
  IR_ARRAY_RANGE,
  IR_ATTR_ARRAY_RANGE,
  IR_ATTR_ARRAY_REVERSE_RANGE,
  IR_TYPE,
  IR_SUBTYPE,
  IR_SCALAR_TYPE,
  IR_SCALAR_SUBTYPE,
  IR_ENUMERATION_TYPE,
  IR_INTEGER_TYPE,
  IR_FLOATING_TYPE,
  IR_PHYSICAL_TYPE,
  IR_COMPOSITE_TYPE,
  IR_RECORD_TYPE,
  IR_RECORD_SUBTYPE,
  IR_ACCESS_TYPE,
  IR_FILE_TYPE,
  IR_ARRAY_TYPE,
  IR_ARRAY_SUBTYPE,
  IR_DECLARATION,
  IR_DECLARATIVE_REGION,
  IR_LOOP_DECLARATIVE_REGION,
  IR_SUBPROGRAM_DECLARATION,
  IR_PROCEDURE_DECLARATION,
  IR_PREDEFINED_PROCEDURE_DECLARATION,
  IR_FUNCTION_DECLARATION,
  IR_PREDEFINED_FUNCTION_DECLARATION,
  IR_ENUMERATION_LITERAL,
  IR_ELEMENT_DECLARATION,
  IR_TYPE_DECLARATION,
  IR_SUBTYPE_DECLARATION,
  IR_OBJECT_DECLARATION,
  IR_CONSTANT_DECLARATION,
  IR_VARIABLE_DECLARATION,
  IR_SHARED_VARIABLE_DECLARATION,
  IR_SIGNAL_DECLARATION,
  IR_FILE_DECLARATION,
  IR_INTERFACE_DECLARATION,
  IR_CONSTANT_INTERFACE_DECLARATION,
  IR_VARIABLE_INTERFACE_DECLARATION,
  IR_SIGNAL_INTERFACE_DECLARATION,
  IR_FILE_INTERFACE_DECLARATION,
  IR_ATTRIBUTE_DECLARATION,
  IR_COMPONENT_DECLARATION,
  IR_LIBRARY_DECLARATION,
  IR_LIBRARY_UNIT,
  IR_ENTITY_DECLARATION,
  IR_ARCHITECTURE_DECLARATION,
  IR_ARCHITECTURE_REF,
  IR_PACKAGE_DECLARATION,
  IR_PACKAGE_BODY_DECLARATION,
  IR_CONFIGURATION_DECLARATION,
  IR_CONFIGURATION_ITEM,
  IR_BLOCK_CONFIGURATION,
  IR_COMPONENT_CONFIGURATION,
  IR_PHYSICAL_UNIT,
  IR_BINDING_INDICATION,
  IR_CONFIGURATION_SPECIFICATION,
  IR_DISCONNECT_SPECIFICATION,
  IR_LABEL,
  IR_LIBRARY_CLAUSE,
  IR_USE_CLAUSE,
  IR_EXPRESSION,
  IR_ABSTRACT_LITERAL_EXPRESSION,
  IR_PHYSICAL_LITERAL,
  IR_ARRAY_LITERAL_EXPRESSION,
  IR_ENUM_LITERAL_REFERENCE,
  IR_NULL_EXPRESSION,
  IR_AGGREGATE,
  IR_RECORD_AGGREGATE,
  IR_ARTIFICIAL_RECORD_AGGREGATE,
  IR_ARRAY_AGGREGATE,
  IR_ARTIFICIAL_ARRAY_AGGREGATE,
  IR_FUNCTION_CALL,
  IR_QUALIFIED_EXPRESSION,
  IR_TYPE_CONVERSION,
  IR_ALLOCATOR,
  IR_OPEN_EXPRESSION,
  IR_OBJECT_REFERENCE,
  IR_SIMPLE_REFERENCE,
  IR_ACCESS_REFERENCE,
  IR_RECORD_REFERENCE,
  IR_GENERIC_ARRAY_REFERENCE,
  IR_ARRAY_REFERENCE,
  IR_SLICE_REFERENCE,
  IR_SIGNAL_ATTR,
  IR_ATTR_DELAYED,
  IR_ATTR_STABLE,
  IR_ATTR_QUIET,
  IR_ATTR_TRANSACTION,
  IR_FUNCTION_ATTR,
  IR_ATTR_SIG_FUNC,
  IR_ATTR_EVENT,
  IR_ATTR_ACTIVE,
  IR_ATTR_LAST_EVENT,
  IR_ATTR_LAST_ACTIVE,
  IR_ATTR_LAST_VALUE,
  IR_ATTR_DRIVING,
  IR_ATTR_DRIVING_VALUE,
  IR_VALUE_ATTR,
  IR_ATTR_TYPE_VALUE,
  IR_ATTR_LEFT,
  IR_ATTR_RIGHT,
  IR_ATTR_LOW,
  IR_ATTR_HIGH,
  IR_ATTR_ASCENDING,
  IR_ATTR_LENGTH,
  IR_ATTR_TYPE_FUNC,
  IR_ATTR_IMAGE,
  IR_ATTR_VALUE,
  IR_ATTR_POS,
  IR_ATTR_VAL,
  IR_ATTR_SUCC,
  IR_ATTR_PRED,
  IR_ATTR_LEFTOF,
  IR_ATTR_RIGHTOF,
  IR_ATTR_ARRAY_FUNC,
  IR_ATTR_ARRAY_LEFT,
  IR_ATTR_ARRAY_RIGHT,
  IR_ATTR_ARRAY_HIGH,
  IR_ATTR_ARRAY_LOW,
  IR_ATTR_ARRAY_ASCENDING,
  IR_ATTR_ARRAY_LENGTH,
  IR_SEQUENTIAL_STATEMENT,
  IR_WAIT_STATEMENT,
  IR_ASSERTION_STATEMENT,
  IR_REPORT_STATEMENT,
  IR_SIGNAL_ASSIGNMENT_STATEMENT,
  IR_VARIABLE_ASSIGNMENT_STATEMENT,
  IR_PROCEDURE_CALL_STATEMENT,
  IR_IF_STATEMENT,
  IR_CASE_STATEMENT,
  IR_LOOP_STATEMENT,
  IR_FOR_LOOP_STATEMENT,
  IR_WHILE_LOOP_STATEMENT,
  IR_LOOP_CONTROL_STATEMENT,
  IR_NEXT_STATEMENT,
  IR_EXIT_STATEMENT,
  IR_RETURN_STATEMENT,
  IR_NULL_STATEMENT,
  IR_CONCURRENT_STATEMENT,
  IR_BLOCK_STATEMENT,
  IR_PROCESS_STATEMENT,
  IR_IMPLICIT_PROCESS_STATEMENT,
  IR_SENSITIZED_PROCESS_STATEMENT,
  IR_COMPONENT_INSTANTIATION_STATEMENT,
  IR_CONCURRENT_GENERATE_STATEMENT,
  IR_CONCURRENT_GENERATE_FOR_STATEMENT,
  IR_CONCURRENT_GENERATE_IF_STATEMENT,
};

struct tree_chunk_info fire_chunk_info = {
  -1,
  "fire",
  205,
  fire_kinds
};

void init_fire_chunk ()
{
  if (fire_chunk_info.chunk_id != -1)
    return;

  tree_register_chunk (&fire_chunk_info);
}

struct fire_auto_initializer {
  fire_auto_initializer () { init_fire_chunk (); }
} fire_ignition;
