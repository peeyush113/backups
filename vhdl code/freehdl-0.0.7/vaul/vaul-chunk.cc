// generated by gen-nodes from `../freehdl/vaul-chunk.t'.  Do not edit.

#include <freehdl/vaul-chunk.h>
tree_ctype_info vaul_incomplete_type_use_ptr_ctype_info = {
  -1,
  "vaul_incomplete_type_use_ptr",
  NULL,
};
tree_ctype_info vaul_decl_set_ptr_ctype_info = {
  -1,
  "vaul_decl_set_ptr",
  NULL,
};
tree_ctype_info vaul_id_set_ctype_info = {
  -1,
  "vaul_id_set",
  NULL,
};

static tree_slot_info VAUL_FilenameAndMode_slot_info[] = {
  { IR_EXPRESSION, "name", (tree_base_node*tree_base_node::*)&VAUL_FilenameAndMode::name },
  { (tree_kind_info*)&IR_Mode_ctype_info, "mode", (tree_base_node*tree_base_node::*)&VAUL_FilenameAndMode::mode },
};

tree_kind_info VAUL_FILENAME_AND_MODE_kind_info = {
  0,
  "VAUL_FilenameAndMode",
  &vaul_chunk_info,
  0,
  VAUL_FILENAME_AND_MODE,
  0,
  1, 2, VAUL_FilenameAndMode_slot_info,
  sizeof(VAUL_FilenameAndMode)
};

static tree_slot_info VAUL_DeclCache_slot_info[] = {
  { VAUL_DECL_CACHE, "next", (tree_base_node*tree_base_node::*)&VAUL_DeclCache::next },
  { IR_TEXT_LITERAL, "id", (tree_base_node*tree_base_node::*)&VAUL_DeclCache::id },
  { IR_DECLARATION, "scope", (tree_base_node*tree_base_node::*)&VAUL_DeclCache::scope },
  { (tree_kind_info*)&vaul_decl_set_ptr_ctype_info, "set", (tree_base_node*tree_base_node::*)&VAUL_DeclCache::set },
  { (tree_kind_info*)&bool_ctype_info, "by_sel", (tree_base_node*tree_base_node::*)&VAUL_DeclCache::by_sel },
};

tree_kind_info VAUL_DECL_CACHE_kind_info = {
  1,
  "VAUL_DeclCache",
  &vaul_chunk_info,
  0,
  VAUL_DECL_CACHE,
  0,
  3, 5, VAUL_DeclCache_slot_info,
  sizeof(VAUL_DeclCache)
};

static tree_slot_info VAUL_IncrementalBindingIndic_slot_info[] = {
  { IR_DECLARATIVE_REGION, "unit", (tree_base_node*tree_base_node::*)&VAUL_IncrementalBindingIndic::unit },
  { VAUL_NAMED_ASSOC_ELEM, "generic_assoc", (tree_base_node*tree_base_node::*)&VAUL_IncrementalBindingIndic::generic_assoc },
  { VAUL_NAMED_ASSOC_ELEM, "port_assoc", (tree_base_node*tree_base_node::*)&VAUL_IncrementalBindingIndic::port_assoc },
};

tree_kind_info VAUL_INCREMENTAL_BINDING_INDIC_kind_info = {
  2,
  "VAUL_IncrementalBindingIndic",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_INCREMENTAL_BINDING_INDIC,
  IR_ROOT,
  3, 3, VAUL_IncrementalBindingIndic_slot_info,
  sizeof(VAUL_IncrementalBindingIndic)
};

static tree_slot_info VAUL_InstList_slot_info[] = {
};

tree_kind_info VAUL_INST_LIST_kind_info = {
  3,
  "VAUL_InstList",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_INST_LIST_IDS,
  IR_ROOT,
  0, 0, VAUL_InstList_slot_info,
  sizeof(VAUL_InstList)
};

static tree_slot_info VAUL_InstList_OTHERS_slot_info[] = {
};

tree_kind_info VAUL_INST_LIST_OTHERS_kind_info = {
  4,
  "VAUL_InstList_OTHERS",
  &vaul_chunk_info,
  VAUL_INST_LIST,
  VAUL_INST_LIST_OTHERS,
  IR_ROOT,
  0, 0, VAUL_InstList_OTHERS_slot_info,
  sizeof(VAUL_InstList_OTHERS)
};

static tree_slot_info VAUL_InstList_ALL_slot_info[] = {
};

tree_kind_info VAUL_INST_LIST_ALL_kind_info = {
  5,
  "VAUL_InstList_ALL",
  &vaul_chunk_info,
  VAUL_INST_LIST,
  VAUL_INST_LIST_ALL,
  IR_ROOT,
  0, 0, VAUL_InstList_ALL_slot_info,
  sizeof(VAUL_InstList_ALL)
};

static tree_slot_info VAUL_InstList_Ids_slot_info[] = {
  { IR_IDENTIFIER_LIST, "ids", (tree_base_node*tree_base_node::*)&VAUL_InstList_Ids::ids },
};

tree_kind_info VAUL_INST_LIST_IDS_kind_info = {
  6,
  "VAUL_InstList_Ids",
  &vaul_chunk_info,
  VAUL_INST_LIST,
  VAUL_INST_LIST_IDS,
  IR_ROOT,
  1, 1, VAUL_InstList_Ids_slot_info,
  sizeof(VAUL_InstList_Ids)
};

static tree_slot_info VAUL_ComponentSpec_slot_info[] = {
  { VAUL_INST_LIST, "ids", (tree_base_node*tree_base_node::*)&VAUL_ComponentSpec::ids },
  { IR_COMPONENT_DECLARATION, "comp", (tree_base_node*tree_base_node::*)&VAUL_ComponentSpec::comp },
};

tree_kind_info VAUL_COMPONENT_SPEC_kind_info = {
  7,
  "VAUL_ComponentSpec",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_COMPONENT_SPEC,
  IR_ROOT,
  2, 2, VAUL_ComponentSpec_slot_info,
  sizeof(VAUL_ComponentSpec)
};

static tree_slot_info VAUL_ConfigSpec_slot_info[] = {
  { VAUL_COMPONENT_SPEC, "comps", (tree_base_node*tree_base_node::*)&VAUL_ConfigSpec::comps },
  { IR_BINDING_INDICATION, "binding", (tree_base_node*tree_base_node::*)&VAUL_ConfigSpec::binding },
  { VAUL_CONFIG_SPEC, "next", (tree_base_node*tree_base_node::*)&VAUL_ConfigSpec::next },
};

tree_kind_info VAUL_CONFIG_SPEC_kind_info = {
  8,
  "VAUL_ConfigSpec",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_CONFIG_SPEC,
  IR_ROOT,
  3, 3, VAUL_ConfigSpec_slot_info,
  sizeof(VAUL_ConfigSpec)
};

static tree_slot_info VAUL_IterationScheme_slot_info[] = {
};

tree_kind_info VAUL_ITERATION_SCHEME_kind_info = {
  9,
  "VAUL_IterationScheme",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_IF_SCHEME,
  IR_ROOT,
  0, 0, VAUL_IterationScheme_slot_info,
  sizeof(VAUL_IterationScheme)
};

static tree_slot_info VAUL_ForScheme_slot_info[] = {
  { IR_IDENTIFIER, "var", (tree_base_node*tree_base_node::*)&VAUL_ForScheme::var },
  { IR_TYPE, "range", (tree_base_node*tree_base_node::*)&VAUL_ForScheme::range },
};

tree_kind_info VAUL_FOR_SCHEME_kind_info = {
  10,
  "VAUL_ForScheme",
  &vaul_chunk_info,
  VAUL_ITERATION_SCHEME,
  VAUL_FOR_SCHEME,
  IR_ROOT,
  2, 2, VAUL_ForScheme_slot_info,
  sizeof(VAUL_ForScheme)
};

static tree_slot_info VAUL_WhileScheme_slot_info[] = {
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&VAUL_WhileScheme::condition },
};

tree_kind_info VAUL_WHILE_SCHEME_kind_info = {
  11,
  "VAUL_WhileScheme",
  &vaul_chunk_info,
  VAUL_ITERATION_SCHEME,
  VAUL_WHILE_SCHEME,
  IR_ROOT,
  1, 1, VAUL_WhileScheme_slot_info,
  sizeof(VAUL_WhileScheme)
};

static tree_slot_info VAUL_IfScheme_slot_info[] = {
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&VAUL_IfScheme::condition },
};

tree_kind_info VAUL_IF_SCHEME_kind_info = {
  12,
  "VAUL_IfScheme",
  &vaul_chunk_info,
  VAUL_ITERATION_SCHEME,
  VAUL_IF_SCHEME,
  IR_ROOT,
  1, 1, VAUL_IfScheme_slot_info,
  sizeof(VAUL_IfScheme)
};

static tree_slot_info VAUL_ChoiceByName_slot_info[] = {
  { VAUL_NAME, "name", (tree_base_node*tree_base_node::*)&VAUL_ChoiceByName::name },
};

tree_kind_info VAUL_CHOICE_BY_NAME_kind_info = {
  13,
  "VAUL_ChoiceByName",
  &vaul_chunk_info,
  IR_CHOICE,
  VAUL_CHOICE_BY_NAME,
  IR_CHOICE,
  1, 1, VAUL_ChoiceByName_slot_info,
  sizeof(VAUL_ChoiceByName)
};

static tree_slot_info VAUL_ElemAssoc_slot_info[] = {
  { VAUL_ELEM_ASSOC, "next", (tree_base_node*tree_base_node::*)&VAUL_ElemAssoc::next },
  { IR_CHOICE_LIST, "choices", (tree_base_node*tree_base_node::*)&VAUL_ElemAssoc::choices },
  { IR_EXPRESSION, "actual", (tree_base_node*tree_base_node::*)&VAUL_ElemAssoc::actual },
};

tree_kind_info VAUL_ELEM_ASSOC_kind_info = {
  14,
  "VAUL_ElemAssoc",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_ELEM_ASSOC,
  IR_ROOT,
  3, 3, VAUL_ElemAssoc_slot_info,
  sizeof(VAUL_ElemAssoc)
};

static tree_slot_info VAUL_AmbgAggregate_slot_info[] = {
  { VAUL_ELEM_ASSOC, "first_assoc", (tree_base_node*tree_base_node::*)&VAUL_AmbgAggregate::first_assoc },
};

tree_kind_info VAUL_AMBG_AGGREGATE_kind_info = {
  15,
  "VAUL_AmbgAggregate",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_ARTIFICIAL_AMBG_AGGREGATE,
  IR_EXPRESSION,
  1, 1, VAUL_AmbgAggregate_slot_info,
  sizeof(VAUL_AmbgAggregate)
};

static tree_slot_info VAUL_ArtificialAmbgAggregate_slot_info[] = {
};

tree_kind_info VAUL_ARTIFICIAL_AMBG_AGGREGATE_kind_info = {
  16,
  "VAUL_ArtificialAmbgAggregate",
  &vaul_chunk_info,
  VAUL_AMBG_AGGREGATE,
  VAUL_ARTIFICIAL_AMBG_AGGREGATE,
  IR_EXPRESSION,
  0, 0, VAUL_ArtificialAmbgAggregate_slot_info,
  sizeof(VAUL_ArtificialAmbgAggregate)
};

static tree_slot_info VAUL_EntityNameList_slot_info[] = {
};

tree_kind_info VAUL_ENTITY_NAME_LIST_kind_info = {
  17,
  "VAUL_EntityNameList",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_ENTITY_NAME_LIST_IDS,
  IR_ROOT,
  0, 0, VAUL_EntityNameList_slot_info,
  sizeof(VAUL_EntityNameList)
};

static tree_slot_info VAUL_EntityNameList_OTHERS_slot_info[] = {
};

tree_kind_info VAUL_ENTITY_NAME_LIST_OTHERS_kind_info = {
  18,
  "VAUL_EntityNameList_OTHERS",
  &vaul_chunk_info,
  VAUL_ENTITY_NAME_LIST,
  VAUL_ENTITY_NAME_LIST_OTHERS,
  IR_ROOT,
  0, 0, VAUL_EntityNameList_OTHERS_slot_info,
  sizeof(VAUL_EntityNameList_OTHERS)
};

static tree_slot_info VAUL_EntityNameList_ALL_slot_info[] = {
};

tree_kind_info VAUL_ENTITY_NAME_LIST_ALL_kind_info = {
  19,
  "VAUL_EntityNameList_ALL",
  &vaul_chunk_info,
  VAUL_ENTITY_NAME_LIST,
  VAUL_ENTITY_NAME_LIST_ALL,
  IR_ROOT,
  0, 0, VAUL_EntityNameList_ALL_slot_info,
  sizeof(VAUL_EntityNameList_ALL)
};

static tree_slot_info VAUL_EntityNameList_Ids_slot_info[] = {
  { VAUL_DESIG_LIST, "ids", (tree_base_node*tree_base_node::*)&VAUL_EntityNameList_Ids::ids },
};

tree_kind_info VAUL_ENTITY_NAME_LIST_IDS_kind_info = {
  20,
  "VAUL_EntityNameList_Ids",
  &vaul_chunk_info,
  VAUL_ENTITY_NAME_LIST,
  VAUL_ENTITY_NAME_LIST_IDS,
  IR_ROOT,
  1, 1, VAUL_EntityNameList_Ids_slot_info,
  sizeof(VAUL_EntityNameList_Ids)
};

static tree_slot_info VAUL_EntitySpec_slot_info[] = {
  { VAUL_ENTITY_NAME_LIST, "names", (tree_base_node*tree_base_node::*)&VAUL_EntitySpec::names },
  { (tree_kind_info*)&IR_Kind_ctype_info, "entity_class", (tree_base_node*tree_base_node::*)&VAUL_EntitySpec::entity_class },
};

tree_kind_info VAUL_ENTITY_SPEC_kind_info = {
  21,
  "VAUL_EntitySpec",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_ENTITY_SPEC,
  IR_ROOT,
  1, 2, VAUL_EntitySpec_slot_info,
  sizeof(VAUL_EntitySpec)
};

static tree_slot_info VAUL_AttributeSpec_slot_info[] = {
  { IR_IDENTIFIER, "attr_desig", (tree_base_node*tree_base_node::*)&VAUL_AttributeSpec::attr_desig },
  { VAUL_ENTITY_SPEC, "entities", (tree_base_node*tree_base_node::*)&VAUL_AttributeSpec::entities },
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&VAUL_AttributeSpec::value },
};

tree_kind_info VAUL_ATTRIBUTE_SPEC_kind_info = {
  22,
  "VAUL_AttributeSpec",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_ATTRIBUTE_SPEC,
  IR_ROOT,
  3, 3, VAUL_AttributeSpec_slot_info,
  sizeof(VAUL_AttributeSpec)
};

static tree_slot_info VAUL_AmbgEnumLitRef_slot_info[] = {
  { (tree_kind_info*)&vaul_decl_set_ptr_ctype_info, "set", (tree_base_node*tree_base_node::*)&VAUL_AmbgEnumLitRef::set },
};

tree_kind_info VAUL_AMBG_ENUM_LIT_REF_kind_info = {
  23,
  "VAUL_AmbgEnumLitRef",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_AMBG_ENUM_LIT_REF,
  IR_EXPRESSION,
  0, 1, VAUL_AmbgEnumLitRef_slot_info,
  sizeof(VAUL_AmbgEnumLitRef)
};

static tree_slot_info VAUL_AmbgNullExpr_slot_info[] = {
};

tree_kind_info VAUL_AMBG_NULL_EXPR_kind_info = {
  24,
  "VAUL_AmbgNullExpr",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_AMBG_NULL_EXPR,
  IR_EXPRESSION,
  0, 0, VAUL_AmbgNullExpr_slot_info,
  sizeof(VAUL_AmbgNullExpr)
};

static tree_slot_info VAUL_AmbgArrayLitRef_slot_info[] = {
  { IR_STRING_LITERAL, "value", (tree_base_node*tree_base_node::*)&VAUL_AmbgArrayLitRef::value },
};

tree_kind_info VAUL_AMBG_ARRAY_LIT_REF_kind_info = {
  25,
  "VAUL_AmbgArrayLitRef",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_AMBG_ARRAY_LIT_REF,
  IR_EXPRESSION,
  1, 1, VAUL_AmbgArrayLitRef_slot_info,
  sizeof(VAUL_AmbgArrayLitRef)
};

static tree_slot_info VAUL_GenAssocElem_slot_info[] = {
  { VAUL_GEN_ASSOC_ELEM, "next", (tree_base_node*tree_base_node::*)&VAUL_GenAssocElem::next },
};

tree_kind_info VAUL_GEN_ASSOC_ELEM_kind_info = {
  26,
  "VAUL_GenAssocElem",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_NAMED_ASSOC_ELEM,
  IR_ROOT,
  1, 1, VAUL_GenAssocElem_slot_info,
  sizeof(VAUL_GenAssocElem)
};

static tree_slot_info VAUL_RangeAssocElem_slot_info[] = {
  { IR_RANGE, "range", (tree_base_node*tree_base_node::*)&VAUL_RangeAssocElem::range },
};

tree_kind_info VAUL_RANGE_ASSOC_ELEM_kind_info = {
  27,
  "VAUL_RangeAssocElem",
  &vaul_chunk_info,
  VAUL_GEN_ASSOC_ELEM,
  VAUL_RANGE_ASSOC_ELEM,
  IR_ROOT,
  1, 1, VAUL_RangeAssocElem_slot_info,
  sizeof(VAUL_RangeAssocElem)
};

static tree_slot_info VAUL_SubtypeAssocElem_slot_info[] = {
  { IR_TYPE, "type", (tree_base_node*tree_base_node::*)&VAUL_SubtypeAssocElem::type },
};

tree_kind_info VAUL_SUBTYPE_ASSOC_ELEM_kind_info = {
  28,
  "VAUL_SubtypeAssocElem",
  &vaul_chunk_info,
  VAUL_GEN_ASSOC_ELEM,
  VAUL_SUBTYPE_ASSOC_ELEM,
  IR_ROOT,
  1, 1, VAUL_SubtypeAssocElem_slot_info,
  sizeof(VAUL_SubtypeAssocElem)
};

static tree_slot_info VAUL_NamedAssocElem_slot_info[] = {
  { VAUL_NAME, "formal", (tree_base_node*tree_base_node::*)&VAUL_NamedAssocElem::formal },
  { IR_EXPRESSION, "actual", (tree_base_node*tree_base_node::*)&VAUL_NamedAssocElem::actual },
  { VAUL_SIMPLE_NAME, "ifts_arg_name", (tree_base_node*tree_base_node::*)&VAUL_NamedAssocElem::ifts_arg_name },
  { (tree_kind_info*)&vaul_decl_set_ptr_ctype_info, "ifts_decls", (tree_base_node*tree_base_node::*)&VAUL_NamedAssocElem::ifts_decls },
  { (tree_kind_info*)&IR_Kind_ctype_info, "ifts_kind", (tree_base_node*tree_base_node::*)&VAUL_NamedAssocElem::ifts_kind },
};

tree_kind_info VAUL_NAMED_ASSOC_ELEM_kind_info = {
  29,
  "VAUL_NamedAssocElem",
  &vaul_chunk_info,
  VAUL_GEN_ASSOC_ELEM,
  VAUL_NAMED_ASSOC_ELEM,
  IR_ROOT,
  3, 5, VAUL_NamedAssocElem_slot_info,
  sizeof(VAUL_NamedAssocElem)
};

static tree_slot_info VAUL_AmbgCall_slot_info[] = {
  { VAUL_NAMED_ASSOC_ELEM, "first_actual", (tree_base_node*tree_base_node::*)&VAUL_AmbgCall::first_actual },
  { (tree_kind_info*)&vaul_decl_set_ptr_ctype_info, "set", (tree_base_node*tree_base_node::*)&VAUL_AmbgCall::set },
};

tree_kind_info VAUL_AMBG_CALL_kind_info = {
  30,
  "VAUL_AmbgCall",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_AMBG_CALL,
  IR_EXPRESSION,
  1, 2, VAUL_AmbgCall_slot_info,
  sizeof(VAUL_AmbgCall)
};

static tree_slot_info VAUL_ProcedureCall_slot_info[] = {
  { IR_PROCEDURE_DECLARATION, "proc", (tree_base_node*tree_base_node::*)&VAUL_ProcedureCall::proc },
  { IR_ASSOCIATION_LIST, "actuals", (tree_base_node*tree_base_node::*)&VAUL_ProcedureCall::actuals },
};

tree_kind_info VAUL_PROCEDURE_CALL_kind_info = {
  31,
  "VAUL_ProcedureCall",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_PROCEDURE_CALL,
  IR_EXPRESSION,
  2, 2, VAUL_ProcedureCall_slot_info,
  sizeof(VAUL_ProcedureCall)
};

static tree_slot_info VAUL_UnresolvedName_slot_info[] = {
  { VAUL_NAME, "name", (tree_base_node*tree_base_node::*)&VAUL_UnresolvedName::name },
};

tree_kind_info VAUL_UNRESOLVED_NAME_kind_info = {
  32,
  "VAUL_UnresolvedName",
  &vaul_chunk_info,
  IR_EXPRESSION,
  VAUL_UNRESOLVED_NAME,
  IR_EXPRESSION,
  1, 1, VAUL_UnresolvedName_slot_info,
  sizeof(VAUL_UnresolvedName)
};

static tree_slot_info VAUL_GuardSignal_slot_info[] = {
};

tree_kind_info VAUL_GUARD_SIGNAL_kind_info = {
  33,
  "VAUL_GuardSignal",
  &vaul_chunk_info,
  IR_SIGNAL_DECLARATION,
  VAUL_GUARD_SIGNAL,
  IR_SIGNAL_DECLARATION,
  0, 0, VAUL_GuardSignal_slot_info,
  sizeof(VAUL_GuardSignal)
};

static tree_slot_info VAUL_PreIndexConstraint_slot_info[] = {
};

tree_kind_info VAUL_PRE_INDEX_CONSTRAINT_kind_info = {
  34,
  "VAUL_PreIndexConstraint",
  &vaul_chunk_info,
  IR_TYPE,
  VAUL_PRE_INDEX_RANGE_CONSTRAINT,
  IR_TYPE,
  0, 0, VAUL_PreIndexConstraint_slot_info,
  sizeof(VAUL_PreIndexConstraint)
};

static tree_slot_info VAUL_PreIndexSubtypeConstraint_slot_info[] = {
  { IR_TYPE, "type", (tree_base_node*tree_base_node::*)&VAUL_PreIndexSubtypeConstraint::type },
};

tree_kind_info VAUL_PRE_INDEX_SUBTYPE_CONSTRAINT_kind_info = {
  35,
  "VAUL_PreIndexSubtypeConstraint",
  &vaul_chunk_info,
  VAUL_PRE_INDEX_CONSTRAINT,
  VAUL_PRE_INDEX_SUBTYPE_CONSTRAINT,
  IR_TYPE,
  1, 1, VAUL_PreIndexSubtypeConstraint_slot_info,
  sizeof(VAUL_PreIndexSubtypeConstraint)
};

static tree_slot_info VAUL_PreIndexRangeConstraint_slot_info[] = {
  { IR_RANGE, "range", (tree_base_node*tree_base_node::*)&VAUL_PreIndexRangeConstraint::range },
};

tree_kind_info VAUL_PRE_INDEX_RANGE_CONSTRAINT_kind_info = {
  36,
  "VAUL_PreIndexRangeConstraint",
  &vaul_chunk_info,
  VAUL_PRE_INDEX_CONSTRAINT,
  VAUL_PRE_INDEX_RANGE_CONSTRAINT,
  IR_TYPE,
  1, 1, VAUL_PreIndexRangeConstraint_slot_info,
  sizeof(VAUL_PreIndexRangeConstraint)
};

static tree_slot_info VAUL_SubarrayType_slot_info[] = {
  { IR_ARRAY_TYPE, "complete_type", (tree_base_node*tree_base_node::*)&VAUL_SubarrayType::complete_type },
};

tree_kind_info VAUL_SUBARRAY_TYPE_kind_info = {
  37,
  "VAUL_SubarrayType",
  &vaul_chunk_info,
  IR_ARRAY_TYPE,
  VAUL_SUBARRAY_TYPE,
  IR_ARRAY_TYPE,
  1, 1, VAUL_SubarrayType_slot_info,
  sizeof(VAUL_SubarrayType)
};

static tree_slot_info VAUL_VoidType_slot_info[] = {
};

tree_kind_info VAUL_VOID_TYPE_kind_info = {
  38,
  "VAUL_VoidType",
  &vaul_chunk_info,
  IR_TYPE,
  VAUL_VOID_TYPE,
  IR_TYPE,
  0, 0, VAUL_VoidType_slot_info,
  sizeof(VAUL_VoidType)
};

static tree_slot_info VAUL_IncompleteType_slot_info[] = {
  { (tree_kind_info*)&vaul_incomplete_type_use_ptr_ctype_info, "uses", (tree_base_node*tree_base_node::*)&VAUL_IncompleteType::uses },
};

tree_kind_info VAUL_INCOMPLETE_TYPE_kind_info = {
  39,
  "VAUL_IncompleteType",
  &vaul_chunk_info,
  IR_TYPE,
  VAUL_INCOMPLETE_TYPE,
  IR_TYPE,
  0, 1, VAUL_IncompleteType_slot_info,
  sizeof(VAUL_IncompleteType)
};

static tree_slot_info VAUL_StandardPackage_slot_info[] = {
  { IR_TYPE, "predef_BIT", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_BIT },
  { IR_TYPE, "predef_BOOLEAN", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_BOOLEAN },
  { IR_TYPE, "predef_INTEGER", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_INTEGER },
  { IR_TYPE, "predef_REAL", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_REAL },
  { IR_TYPE, "predef_TIME", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_TIME },
  { IR_TYPE, "predef_CHARACTER", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_CHARACTER },
  { IR_TYPE, "predef_STRING", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_STRING },
  { IR_TYPE, "predef_BIT_VECTOR", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_BIT_VECTOR },
  { IR_TYPE, "predef_SEVERITY_LEVEL", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_SEVERITY_LEVEL },
  { IR_TYPE, "predef_FILE_OPEN_KIND", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_FILE_OPEN_KIND },
  { IR_TYPE, "predef_FILE_OPEN_STATUS", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::predef_FILE_OPEN_STATUS },
  { IR_TYPE, "universal_integer", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::universal_integer },
  { IR_TYPE, "universal_real", (tree_base_node*tree_base_node::*)&VAUL_StandardPackage::universal_real },
};

tree_kind_info VAUL_STANDARD_PACKAGE_kind_info = {
  40,
  "VAUL_StandardPackage",
  &vaul_chunk_info,
  IR_PACKAGE_DECLARATION,
  VAUL_STANDARD_PACKAGE,
  IR_PACKAGE_DECLARATION,
  13, 13, VAUL_StandardPackage_slot_info,
  sizeof(VAUL_StandardPackage)
};

static tree_slot_info VAUL_TopScope_slot_info[] = {
};

tree_kind_info VAUL_TOP_SCOPE_kind_info = {
  41,
  "VAUL_TopScope",
  &vaul_chunk_info,
  IR_DECLARATIVE_REGION,
  VAUL_TOP_SCOPE,
  IR_DECLARATIVE_REGION,
  0, 0, VAUL_TopScope_slot_info,
  sizeof(VAUL_TopScope)
};

static tree_slot_info VAUL_NameList_slot_info[] = {
  { VAUL_NAME, "name", (tree_base_node*tree_base_node::*)&VAUL_NameList::name },
  { VAUL_NAME_LIST, "link", (tree_base_node*tree_base_node::*)&VAUL_NameList::link },
};

tree_kind_info VAUL_NAME_LIST_kind_info = {
  42,
  "VAUL_NameList",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_NAME_LIST,
  IR_ROOT,
  2, 2, VAUL_NameList_slot_info,
  sizeof(VAUL_NameList)
};

static tree_slot_info VAUL_SelNameList_slot_info[] = {
  { VAUL_SEL_NAME, "name", (tree_base_node*tree_base_node::*)&VAUL_SelNameList::name },
  { VAUL_SEL_NAME_LIST, "link", (tree_base_node*tree_base_node::*)&VAUL_SelNameList::link },
};

tree_kind_info VAUL_SEL_NAME_LIST_kind_info = {
  43,
  "VAUL_SelNameList",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_SEL_NAME_LIST,
  IR_ROOT,
  2, 2, VAUL_SelNameList_slot_info,
  sizeof(VAUL_SelNameList)
};

static tree_slot_info VAUL_Name_slot_info[] = {
};

tree_kind_info VAUL_NAME_kind_info = {
  44,
  "VAUL_Name",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_SIMPLE_NAME,
  IR_ROOT,
  0, 0, VAUL_Name_slot_info,
  sizeof(VAUL_Name)
};

static tree_slot_info VAUL_AttributeName_slot_info[] = {
  { VAUL_NAME, "prefix", (tree_base_node*tree_base_node::*)&VAUL_AttributeName::prefix },
  { IR_IDENTIFIER, "attribute", (tree_base_node*tree_base_node::*)&VAUL_AttributeName::attribute },
  { VAUL_NAMED_ASSOC_ELEM, "first_actual", (tree_base_node*tree_base_node::*)&VAUL_AttributeName::first_actual },
};

tree_kind_info VAUL_ATTRIBUTE_NAME_kind_info = {
  45,
  "VAUL_AttributeName",
  &vaul_chunk_info,
  VAUL_NAME,
  VAUL_ATTRIBUTE_NAME,
  IR_ROOT,
  3, 3, VAUL_AttributeName_slot_info,
  sizeof(VAUL_AttributeName)
};

static tree_slot_info VAUL_IftsName_slot_info[] = {
  { VAUL_NAME, "prefix", (tree_base_node*tree_base_node::*)&VAUL_IftsName::prefix },
  { VAUL_GEN_ASSOC_ELEM, "assoc", (tree_base_node*tree_base_node::*)&VAUL_IftsName::assoc },
};

tree_kind_info VAUL_IFTS_NAME_kind_info = {
  46,
  "VAUL_IftsName",
  &vaul_chunk_info,
  VAUL_NAME,
  VAUL_IFTS_NAME,
  IR_ROOT,
  2, 2, VAUL_IftsName_slot_info,
  sizeof(VAUL_IftsName)
};

static tree_slot_info VAUL_SelName_slot_info[] = {
  { VAUL_NAME, "prefix", (tree_base_node*tree_base_node::*)&VAUL_SelName::prefix },
  { IR_TEXT_LITERAL, "suffix", (tree_base_node*tree_base_node::*)&VAUL_SelName::suffix },
};

tree_kind_info VAUL_SEL_NAME_kind_info = {
  47,
  "VAUL_SelName",
  &vaul_chunk_info,
  VAUL_NAME,
  VAUL_SEL_NAME,
  IR_ROOT,
  2, 2, VAUL_SelName_slot_info,
  sizeof(VAUL_SelName)
};

static tree_slot_info VAUL_SimpleName_slot_info[] = {
  { IR_TEXT_LITERAL, "id", (tree_base_node*tree_base_node::*)&VAUL_SimpleName::id },
};

tree_kind_info VAUL_SIMPLE_NAME_kind_info = {
  48,
  "VAUL_SimpleName",
  &vaul_chunk_info,
  VAUL_NAME,
  VAUL_SIMPLE_NAME,
  IR_ROOT,
  1, 1, VAUL_SimpleName_slot_info,
  sizeof(VAUL_SimpleName)
};

static tree_slot_info VAUL_DesigList_slot_info[] = {
  { IR_TEXT_LITERAL, "desig", (tree_base_node*tree_base_node::*)&VAUL_DesigList::desig },
  { VAUL_DESIG_LIST, "link", (tree_base_node*tree_base_node::*)&VAUL_DesigList::link },
};

tree_kind_info VAUL_DESIG_LIST_kind_info = {
  49,
  "VAUL_DesigList",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_DESIG_LIST,
  IR_ROOT,
  2, 2, VAUL_DesigList_slot_info,
  sizeof(VAUL_DesigList)
};

static tree_slot_info VAUL_SelSignalAssign_slot_info[] = {
  { IR_EXPRESSION, "value", (tree_base_node*tree_base_node::*)&VAUL_SelSignalAssign::value },
  { IR_EXPRESSION, "target", (tree_base_node*tree_base_node::*)&VAUL_SelSignalAssign::target },
  { VAUL_DELAY_MECHANISM, "delay", (tree_base_node*tree_base_node::*)&VAUL_SelSignalAssign::delay },
  { VAUL_SEL_WAVEFORM, "wave", (tree_base_node*tree_base_node::*)&VAUL_SelSignalAssign::wave },
  { (tree_kind_info*)&bool_ctype_info, "guarded", (tree_base_node*tree_base_node::*)&VAUL_SelSignalAssign::guarded },
};

tree_kind_info VAUL_SEL_SIGNAL_ASSIGN_kind_info = {
  50,
  "VAUL_SelSignalAssign",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_SEL_SIGNAL_ASSIGN,
  IR_ROOT,
  4, 5, VAUL_SelSignalAssign_slot_info,
  sizeof(VAUL_SelSignalAssign)
};

static tree_slot_info VAUL_SelWaveform_slot_info[] = {
  { IR_WAVEFORM_LIST, "wave", (tree_base_node*tree_base_node::*)&VAUL_SelWaveform::wave },
  { IR_CHOICE_LIST, "choice", (tree_base_node*tree_base_node::*)&VAUL_SelWaveform::choice },
  { VAUL_SEL_WAVEFORM, "next_wave", (tree_base_node*tree_base_node::*)&VAUL_SelWaveform::next_wave },
};

tree_kind_info VAUL_SEL_WAVEFORM_kind_info = {
  51,
  "VAUL_SelWaveform",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_SEL_WAVEFORM,
  IR_ROOT,
  3, 3, VAUL_SelWaveform_slot_info,
  sizeof(VAUL_SelWaveform)
};

static tree_slot_info VAUL_CondalSignalAssign_slot_info[] = {
  { IR_EXPRESSION, "target", (tree_base_node*tree_base_node::*)&VAUL_CondalSignalAssign::target },
  { VAUL_DELAY_MECHANISM, "delay", (tree_base_node*tree_base_node::*)&VAUL_CondalSignalAssign::delay },
  { VAUL_CONDAL_WAVEFORM, "wave", (tree_base_node*tree_base_node::*)&VAUL_CondalSignalAssign::wave },
  { (tree_kind_info*)&bool_ctype_info, "guarded", (tree_base_node*tree_base_node::*)&VAUL_CondalSignalAssign::guarded },
};

tree_kind_info VAUL_CONDAL_SIGNAL_ASSIGN_kind_info = {
  52,
  "VAUL_CondalSignalAssign",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_CONDAL_SIGNAL_ASSIGN,
  IR_ROOT,
  3, 4, VAUL_CondalSignalAssign_slot_info,
  sizeof(VAUL_CondalSignalAssign)
};

static tree_slot_info VAUL_CondalWaveform_slot_info[] = {
  { IR_WAVEFORM_LIST, "wave", (tree_base_node*tree_base_node::*)&VAUL_CondalWaveform::wave },
  { IR_EXPRESSION, "condition", (tree_base_node*tree_base_node::*)&VAUL_CondalWaveform::condition },
  { VAUL_CONDAL_WAVEFORM, "else_wave", (tree_base_node*tree_base_node::*)&VAUL_CondalWaveform::else_wave },
};

tree_kind_info VAUL_CONDAL_WAVEFORM_kind_info = {
  53,
  "VAUL_CondalWaveform",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_CONDAL_WAVEFORM,
  IR_ROOT,
  3, 3, VAUL_CondalWaveform_slot_info,
  sizeof(VAUL_CondalWaveform)
};

static tree_slot_info VAUL_DelayMechanism_slot_info[] = {
};

tree_kind_info VAUL_DELAY_MECHANISM_kind_info = {
  54,
  "VAUL_DelayMechanism",
  &vaul_chunk_info,
  IR_ROOT,
  VAUL_DELAY_INERTIAL,
  IR_ROOT,
  0, 0, VAUL_DelayMechanism_slot_info,
  sizeof(VAUL_DelayMechanism)
};

static tree_slot_info VAUL_DelayTransport_slot_info[] = {
};

tree_kind_info VAUL_DELAY_TRANSPORT_kind_info = {
  55,
  "VAUL_DelayTransport",
  &vaul_chunk_info,
  VAUL_DELAY_MECHANISM,
  VAUL_DELAY_TRANSPORT,
  IR_ROOT,
  0, 0, VAUL_DelayTransport_slot_info,
  sizeof(VAUL_DelayTransport)
};

static tree_slot_info VAUL_DelayInertial_slot_info[] = {
  { IR_EXPRESSION, "rejection_time", (tree_base_node*tree_base_node::*)&VAUL_DelayInertial::rejection_time },
};

tree_kind_info VAUL_DELAY_INERTIAL_kind_info = {
  56,
  "VAUL_DelayInertial",
  &vaul_chunk_info,
  VAUL_DELAY_MECHANISM,
  VAUL_DELAY_INERTIAL,
  IR_ROOT,
  1, 1, VAUL_DelayInertial_slot_info,
  sizeof(VAUL_DelayInertial)
};

tree_kind VAUL_DelayMechanism::kind () { return VAUL_DELAY_MECHANISM; }

tree_kind VAUL_DelayInertial::kind () { return VAUL_DELAY_INERTIAL; }

tree_kind VAUL_DelayTransport::kind () { return VAUL_DELAY_TRANSPORT; }

tree_kind VAUL_CondalWaveform::kind () { return VAUL_CONDAL_WAVEFORM; }

pVAUL_CondalWaveform reverse (pVAUL_CondalWaveform n)
{
  pVAUL_CondalWaveform r = NULL;
  while (n)
    {
      pVAUL_CondalWaveform n2 = n->else_wave;
      n->else_wave = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_CondalSignalAssign::kind () { return VAUL_CONDAL_SIGNAL_ASSIGN; }

tree_kind VAUL_SelWaveform::kind () { return VAUL_SEL_WAVEFORM; }

pVAUL_SelWaveform reverse (pVAUL_SelWaveform n)
{
  pVAUL_SelWaveform r = NULL;
  while (n)
    {
      pVAUL_SelWaveform n2 = n->next_wave;
      n->next_wave = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_SelSignalAssign::kind () { return VAUL_SEL_SIGNAL_ASSIGN; }

tree_kind VAUL_DesigList::kind () { return VAUL_DESIG_LIST; }

pVAUL_DesigList reverse (pVAUL_DesigList n)
{
  pVAUL_DesigList r = NULL;
  while (n)
    {
      pVAUL_DesigList n2 = n->link;
      n->link = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_Name::kind () { return VAUL_NAME; }

tree_kind VAUL_SimpleName::kind () { return VAUL_SIMPLE_NAME; }

tree_kind VAUL_SelName::kind () { return VAUL_SEL_NAME; }

tree_kind VAUL_IftsName::kind () { return VAUL_IFTS_NAME; }

tree_kind VAUL_AttributeName::kind () { return VAUL_ATTRIBUTE_NAME; }

tree_kind VAUL_SelNameList::kind () { return VAUL_SEL_NAME_LIST; }

pVAUL_SelNameList reverse (pVAUL_SelNameList n)
{
  pVAUL_SelNameList r = NULL;
  while (n)
    {
      pVAUL_SelNameList n2 = n->link;
      n->link = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_NameList::kind () { return VAUL_NAME_LIST; }

pVAUL_NameList reverse (pVAUL_NameList n)
{
  pVAUL_NameList r = NULL;
  while (n)
    {
      pVAUL_NameList n2 = n->link;
      n->link = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_TopScope::kind () { return VAUL_TOP_SCOPE; }

tree_kind VAUL_StandardPackage::kind () { return VAUL_STANDARD_PACKAGE; }

tree_kind VAUL_IncompleteType::kind () { return VAUL_INCOMPLETE_TYPE; }

tree_kind VAUL_VoidType::kind () { return VAUL_VOID_TYPE; }

tree_kind VAUL_SubarrayType::kind () { return VAUL_SUBARRAY_TYPE; }

tree_kind VAUL_PreIndexConstraint::kind () { return VAUL_PRE_INDEX_CONSTRAINT; }

tree_kind VAUL_PreIndexRangeConstraint::kind () { return VAUL_PRE_INDEX_RANGE_CONSTRAINT; }

tree_kind VAUL_PreIndexSubtypeConstraint::kind () { return VAUL_PRE_INDEX_SUBTYPE_CONSTRAINT; }

tree_kind VAUL_GuardSignal::kind () { return VAUL_GUARD_SIGNAL; }

tree_kind VAUL_UnresolvedName::kind () { return VAUL_UNRESOLVED_NAME; }

tree_kind VAUL_ProcedureCall::kind () { return VAUL_PROCEDURE_CALL; }

tree_kind VAUL_AmbgCall::kind () { return VAUL_AMBG_CALL; }

tree_kind VAUL_GenAssocElem::kind () { return VAUL_GEN_ASSOC_ELEM; }

pVAUL_GenAssocElem reverse (pVAUL_GenAssocElem n)
{
  pVAUL_GenAssocElem r = NULL;
  while (n)
    {
      pVAUL_GenAssocElem n2 = n->next;
      n->next = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_NamedAssocElem::kind () { return VAUL_NAMED_ASSOC_ELEM; }

tree_kind VAUL_SubtypeAssocElem::kind () { return VAUL_SUBTYPE_ASSOC_ELEM; }

tree_kind VAUL_RangeAssocElem::kind () { return VAUL_RANGE_ASSOC_ELEM; }

tree_kind VAUL_AmbgArrayLitRef::kind () { return VAUL_AMBG_ARRAY_LIT_REF; }

tree_kind VAUL_AmbgNullExpr::kind () { return VAUL_AMBG_NULL_EXPR; }

tree_kind VAUL_AmbgEnumLitRef::kind () { return VAUL_AMBG_ENUM_LIT_REF; }

tree_kind VAUL_AttributeSpec::kind () { return VAUL_ATTRIBUTE_SPEC; }

tree_kind VAUL_EntitySpec::kind () { return VAUL_ENTITY_SPEC; }

tree_kind VAUL_EntityNameList::kind () { return VAUL_ENTITY_NAME_LIST; }

tree_kind VAUL_EntityNameList_Ids::kind () { return VAUL_ENTITY_NAME_LIST_IDS; }

tree_kind VAUL_EntityNameList_ALL::kind () { return VAUL_ENTITY_NAME_LIST_ALL; }

tree_kind VAUL_EntityNameList_OTHERS::kind () { return VAUL_ENTITY_NAME_LIST_OTHERS; }

tree_kind VAUL_AmbgAggregate::kind () { return VAUL_AMBG_AGGREGATE; }

tree_kind VAUL_ArtificialAmbgAggregate::kind () { return VAUL_ARTIFICIAL_AMBG_AGGREGATE; }

tree_kind VAUL_ElemAssoc::kind () { return VAUL_ELEM_ASSOC; }

pVAUL_ElemAssoc reverse (pVAUL_ElemAssoc n)
{
  pVAUL_ElemAssoc r = NULL;
  while (n)
    {
      pVAUL_ElemAssoc n2 = n->next;
      n->next = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_ChoiceByName::kind () { return VAUL_CHOICE_BY_NAME; }

tree_kind VAUL_IterationScheme::kind () { return VAUL_ITERATION_SCHEME; }

tree_kind VAUL_IfScheme::kind () { return VAUL_IF_SCHEME; }

tree_kind VAUL_WhileScheme::kind () { return VAUL_WHILE_SCHEME; }

tree_kind VAUL_ForScheme::kind () { return VAUL_FOR_SCHEME; }

tree_kind VAUL_ConfigSpec::kind () { return VAUL_CONFIG_SPEC; }

pVAUL_ConfigSpec reverse (pVAUL_ConfigSpec n)
{
  pVAUL_ConfigSpec r = NULL;
  while (n)
    {
      pVAUL_ConfigSpec n2 = n->next;
      n->next = r;
      r = n;
      n = n2;
    }
  return r;
}

tree_kind VAUL_ComponentSpec::kind () { return VAUL_COMPONENT_SPEC; }

tree_kind VAUL_InstList::kind () { return VAUL_INST_LIST; }

tree_kind VAUL_InstList_Ids::kind () { return VAUL_INST_LIST_IDS; }

tree_kind VAUL_InstList_ALL::kind () { return VAUL_INST_LIST_ALL; }

tree_kind VAUL_InstList_OTHERS::kind () { return VAUL_INST_LIST_OTHERS; }

tree_kind VAUL_IncrementalBindingIndic::kind () { return VAUL_INCREMENTAL_BINDING_INDIC; }

tree_kind VAUL_DeclCache::kind () { return VAUL_DECL_CACHE; }

tree_kind VAUL_FilenameAndMode::kind () { return VAUL_FILENAME_AND_MODE; }

vaul_IIR_DeclarativeRegion_ext::vaul_IIR_DeclarativeRegion_ext ()
{
  tail = NULL;
}

static tree_propslot_info vaul_IIR_DeclarativeRegion_propslot_info[] = {
  { IR_DECLARATION_LIST, "tail",(tree_base_node*tree_prop::*)&vaul_IIR_DeclarativeRegion_ext::tail },
  { (tree_kind_info*)&vaul_id_set_ctype_info, "decls_in_flight",(tree_base_node*tree_prop::*)&vaul_IIR_DeclarativeRegion_ext::decls_in_flight },
};

static struct tree_prop_info vaul_IIR_DeclarativeRegion_prop_info = {
  1, 2,
  vaul_IIR_DeclarativeRegion_propslot_info
};

tree_prop_info *
vaul_IIR_DeclarativeRegion_ext::get_info ()
{
  return &vaul_IIR_DeclarativeRegion_prop_info;
}

static int vaul_IIR_DeclarativeRegion_key;

vaul_IIR_DeclarativeRegion_ext *get_vaul_ext (pIIR_DeclarativeRegion n)
{
  vaul_IIR_DeclarativeRegion_ext *attrs = (vaul_IIR_DeclarativeRegion_ext *) n->get (vaul_IIR_DeclarativeRegion_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_DeclarativeRegion_ext;
       n->put (vaul_IIR_DeclarativeRegion_key, attrs);
    }
  return attrs;
}

vaul_IIR_SimpleReference_ext::vaul_IIR_SimpleReference_ext ()
{
  simple_reference_name = NULL;
}

static tree_propslot_info vaul_IIR_SimpleReference_propslot_info[] = {
  { VAUL_NAME, "simple_reference_name",(tree_base_node*tree_prop::*)&vaul_IIR_SimpleReference_ext::simple_reference_name },
};

static struct tree_prop_info vaul_IIR_SimpleReference_prop_info = {
  1, 1,
  vaul_IIR_SimpleReference_propslot_info
};

tree_prop_info *
vaul_IIR_SimpleReference_ext::get_info ()
{
  return &vaul_IIR_SimpleReference_prop_info;
}

static int vaul_IIR_SimpleReference_key;

vaul_IIR_SimpleReference_ext *get_vaul_ext (pIIR_SimpleReference n)
{
  vaul_IIR_SimpleReference_ext *attrs = (vaul_IIR_SimpleReference_ext *) n->get (vaul_IIR_SimpleReference_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_SimpleReference_ext;
       n->put (vaul_IIR_SimpleReference_key, attrs);
    }
  return attrs;
}

vaul_IIR_ChoiceByRange_ext::vaul_IIR_ChoiceByRange_ext ()
{
  actual_is_slice = false;
}

static tree_propslot_info vaul_IIR_ChoiceByRange_propslot_info[] = {
  { (tree_kind_info*)&bool_ctype_info, "actual_is_slice",(tree_base_node*tree_prop::*)&vaul_IIR_ChoiceByRange_ext::actual_is_slice },
};

static struct tree_prop_info vaul_IIR_ChoiceByRange_prop_info = {
  0, 1,
  vaul_IIR_ChoiceByRange_propslot_info
};

tree_prop_info *
vaul_IIR_ChoiceByRange_ext::get_info ()
{
  return &vaul_IIR_ChoiceByRange_prop_info;
}

static int vaul_IIR_ChoiceByRange_key;

vaul_IIR_ChoiceByRange_ext *get_vaul_ext (pIIR_ChoiceByRange n)
{
  vaul_IIR_ChoiceByRange_ext *attrs = (vaul_IIR_ChoiceByRange_ext *) n->get (vaul_IIR_ChoiceByRange_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_ChoiceByRange_ext;
       n->put (vaul_IIR_ChoiceByRange_key, attrs);
    }
  return attrs;
}

vaul_IIR_BlockStatement_ext::vaul_IIR_BlockStatement_ext ()
{
  config_specs = NULL;
}

static tree_propslot_info vaul_IIR_BlockStatement_propslot_info[] = {
  { VAUL_CONFIG_SPEC, "config_specs",(tree_base_node*tree_prop::*)&vaul_IIR_BlockStatement_ext::config_specs },
};

static struct tree_prop_info vaul_IIR_BlockStatement_prop_info = {
  1, 1,
  vaul_IIR_BlockStatement_propslot_info
};

tree_prop_info *
vaul_IIR_BlockStatement_ext::get_info ()
{
  return &vaul_IIR_BlockStatement_prop_info;
}

static int vaul_IIR_BlockStatement_key;

vaul_IIR_BlockStatement_ext *get_vaul_ext (pIIR_BlockStatement n)
{
  vaul_IIR_BlockStatement_ext *attrs = (vaul_IIR_BlockStatement_ext *) n->get (vaul_IIR_BlockStatement_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_BlockStatement_ext;
       n->put (vaul_IIR_BlockStatement_key, attrs);
    }
  return attrs;
}

vaul_IIR_ConfigurationSpecification_ext::vaul_IIR_ConfigurationSpecification_ext ()
{
}

static tree_propslot_info vaul_IIR_ConfigurationSpecification_propslot_info[] = {
  { (tree_kind_info*)&bool_ctype_info, "bound_by_name",(tree_base_node*tree_prop::*)&vaul_IIR_ConfigurationSpecification_ext::bound_by_name },
};

static struct tree_prop_info vaul_IIR_ConfigurationSpecification_prop_info = {
  0, 1,
  vaul_IIR_ConfigurationSpecification_propslot_info
};

tree_prop_info *
vaul_IIR_ConfigurationSpecification_ext::get_info ()
{
  return &vaul_IIR_ConfigurationSpecification_prop_info;
}

static int vaul_IIR_ConfigurationSpecification_key;

vaul_IIR_ConfigurationSpecification_ext *get_vaul_ext (pIIR_ConfigurationSpecification n)
{
  vaul_IIR_ConfigurationSpecification_ext *attrs = (vaul_IIR_ConfigurationSpecification_ext *) n->get (vaul_IIR_ConfigurationSpecification_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_ConfigurationSpecification_ext;
       n->put (vaul_IIR_ConfigurationSpecification_key, attrs);
    }
  return attrs;
}

vaul_IIR_ComponentConfiguration_ext::vaul_IIR_ComponentConfiguration_ext ()
{
}

static tree_propslot_info vaul_IIR_ComponentConfiguration_propslot_info[] = {
  { (tree_kind_info*)&bool_ctype_info, "bound_by_name",(tree_base_node*tree_prop::*)&vaul_IIR_ComponentConfiguration_ext::bound_by_name },
};

static struct tree_prop_info vaul_IIR_ComponentConfiguration_prop_info = {
  0, 1,
  vaul_IIR_ComponentConfiguration_propslot_info
};

tree_prop_info *
vaul_IIR_ComponentConfiguration_ext::get_info ()
{
  return &vaul_IIR_ComponentConfiguration_prop_info;
}

static int vaul_IIR_ComponentConfiguration_key;

vaul_IIR_ComponentConfiguration_ext *get_vaul_ext (pIIR_ComponentConfiguration n)
{
  vaul_IIR_ComponentConfiguration_ext *attrs = (vaul_IIR_ComponentConfiguration_ext *) n->get (vaul_IIR_ComponentConfiguration_key);
  if (attrs == 0)
    {
       attrs = new vaul_IIR_ComponentConfiguration_ext;
       n->put (vaul_IIR_ComponentConfiguration_key, attrs);
    }
  return attrs;
}


pIIR_ConcurrentGenerateIfStatement vaul_node_creator::mIIR_ConcurrentGenerateIfStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part, pIIR_Expression condition)
{
  pIIR_ConcurrentGenerateIfStatement n = new (&hist) IIR_ConcurrentGenerateIfStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part, condition);
  return n;
}

pIIR_ConcurrentGenerateIfStatement vaul_node_creator::mIIR_ConcurrentGenerateIfStatement (int lineno, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part, pIIR_Expression condition)
{
  pIIR_ConcurrentGenerateIfStatement n = new (&hist) IIR_ConcurrentGenerateIfStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part, condition);
  return n;
}

pIIR_ConcurrentGenerateForStatement vaul_node_creator::mIIR_ConcurrentGenerateForStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part, pIIR_ConstantDeclaration generate_parameter_specification)
{
  pIIR_ConcurrentGenerateForStatement n = new (&hist) IIR_ConcurrentGenerateForStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part, generate_parameter_specification);
  return n;
}

pIIR_ConcurrentGenerateForStatement vaul_node_creator::mIIR_ConcurrentGenerateForStatement (int lineno, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part, pIIR_ConstantDeclaration generate_parameter_specification)
{
  pIIR_ConcurrentGenerateForStatement n = new (&hist) IIR_ConcurrentGenerateForStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part, generate_parameter_specification);
  return n;
}

pIIR_ConcurrentGenerateStatement vaul_node_creator::mIIR_ConcurrentGenerateStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part)
{
  pIIR_ConcurrentGenerateStatement n = new (&hist) IIR_ConcurrentGenerateStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part);
  return n;
}

pIIR_ConcurrentGenerateStatement vaul_node_creator::mIIR_ConcurrentGenerateStatement (int lineno, pIIR_TextLiteral declarator, pIIR_ConcurrentStatementList concurrent_statement_part)
{
  pIIR_ConcurrentGenerateStatement n = new (&hist) IIR_ConcurrentGenerateStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, concurrent_statement_part);
  return n;
}

pIIR_ComponentInstantiationStatement vaul_node_creator::mIIR_ComponentInstantiationStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_BindingIndication binding, pIIR_BindingIndication configuration)
{
  pIIR_ComponentInstantiationStatement n = new (&hist) IIR_ComponentInstantiationStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, binding, configuration);
  return n;
}

pIIR_ComponentInstantiationStatement vaul_node_creator::mIIR_ComponentInstantiationStatement (int lineno, pIIR_TextLiteral declarator, pIIR_BindingIndication binding, pIIR_BindingIndication configuration)
{
  pIIR_ComponentInstantiationStatement n = new (&hist) IIR_ComponentInstantiationStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, binding, configuration);
  return n;
}

pIIR_SensitizedProcessStatement vaul_node_creator::mIIR_SensitizedProcessStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part, pIIR_ExpressionList sensitivity_list)
{
  pIIR_SensitizedProcessStatement n = new (&hist) IIR_SensitizedProcessStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part, sensitivity_list);
  return n;
}

pIIR_SensitizedProcessStatement vaul_node_creator::mIIR_SensitizedProcessStatement (int lineno, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part, pIIR_ExpressionList sensitivity_list)
{
  pIIR_SensitizedProcessStatement n = new (&hist) IIR_SensitizedProcessStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part, sensitivity_list);
  return n;
}

pIIR_ImplicitProcessStatement vaul_node_creator::mIIR_ImplicitProcessStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part)
{
  pIIR_ImplicitProcessStatement n = new (&hist) IIR_ImplicitProcessStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part);
  return n;
}

pIIR_ImplicitProcessStatement vaul_node_creator::mIIR_ImplicitProcessStatement (int lineno, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part)
{
  pIIR_ImplicitProcessStatement n = new (&hist) IIR_ImplicitProcessStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part);
  return n;
}

pIIR_ProcessStatement vaul_node_creator::mIIR_ProcessStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part)
{
  pIIR_ProcessStatement n = new (&hist) IIR_ProcessStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part);
  return n;
}

pIIR_ProcessStatement vaul_node_creator::mIIR_ProcessStatement (int lineno, pIIR_TextLiteral declarator, bool postponed, pIIR_SequentialStatementList process_statement_part)
{
  pIIR_ProcessStatement n = new (&hist) IIR_ProcessStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, postponed, false, process_statement_part);
  return n;
}

pIIR_BlockStatement vaul_node_creator::mIIR_BlockStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Expression guard_expression, pIIR_ConfigurationSpecificationList configuration_specifications)
{
  pIIR_BlockStatement n = new (&hist) IIR_BlockStatement (pos, declarator, NULL, NULL, -1, NULL, NULL, guard_expression, NULL, NULL, NULL, NULL, configuration_specifications, NULL);
  return n;
}

pIIR_BlockStatement vaul_node_creator::mIIR_BlockStatement (int lineno, pIIR_TextLiteral declarator, pIIR_Expression guard_expression, pIIR_ConfigurationSpecificationList configuration_specifications)
{
  pIIR_BlockStatement n = new (&hist) IIR_BlockStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, guard_expression, NULL, NULL, NULL, NULL, configuration_specifications, NULL);
  return n;
}

pIIR_ConcurrentStatement vaul_node_creator::mIIR_ConcurrentStatement (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_ConcurrentStatement n = new (&hist) IIR_ConcurrentStatement (pos, declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_ConcurrentStatement vaul_node_creator::mIIR_ConcurrentStatement (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_ConcurrentStatement n = new (&hist) IIR_ConcurrentStatement (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_NullStatement vaul_node_creator::mIIR_NullStatement (pIIR_PosInfo pos)
{
  pIIR_NullStatement n = new (&hist) IIR_NullStatement (pos, NULL);
  return n;
}

pIIR_NullStatement vaul_node_creator::mIIR_NullStatement (int lineno)
{
  pIIR_NullStatement n = new (&hist) IIR_NullStatement (make_posinfo(lineno), NULL);
  return n;
}

pIIR_ReturnStatement vaul_node_creator::mIIR_ReturnStatement (pIIR_PosInfo pos, pIIR_SubprogramDeclaration enclosing_subprogram, pIIR_Expression return_expression)
{
  pIIR_ReturnStatement n = new (&hist) IIR_ReturnStatement (pos, NULL, enclosing_subprogram, return_expression);
  return n;
}

pIIR_ReturnStatement vaul_node_creator::mIIR_ReturnStatement (int lineno, pIIR_SubprogramDeclaration enclosing_subprogram, pIIR_Expression return_expression)
{
  pIIR_ReturnStatement n = new (&hist) IIR_ReturnStatement (make_posinfo(lineno), NULL, enclosing_subprogram, return_expression);
  return n;
}

pIIR_ExitStatement vaul_node_creator::mIIR_ExitStatement (pIIR_PosInfo pos, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_ExitStatement n = new (&hist) IIR_ExitStatement (pos, NULL, loop, condition);
  return n;
}

pIIR_ExitStatement vaul_node_creator::mIIR_ExitStatement (int lineno, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_ExitStatement n = new (&hist) IIR_ExitStatement (make_posinfo(lineno), NULL, loop, condition);
  return n;
}

pIIR_NextStatement vaul_node_creator::mIIR_NextStatement (pIIR_PosInfo pos, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_NextStatement n = new (&hist) IIR_NextStatement (pos, NULL, loop, condition);
  return n;
}

pIIR_NextStatement vaul_node_creator::mIIR_NextStatement (int lineno, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_NextStatement n = new (&hist) IIR_NextStatement (make_posinfo(lineno), NULL, loop, condition);
  return n;
}

pIIR_LoopControlStatement vaul_node_creator::mIIR_LoopControlStatement (pIIR_PosInfo pos, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_LoopControlStatement n = new (&hist) IIR_LoopControlStatement (pos, NULL, loop, condition);
  return n;
}

pIIR_LoopControlStatement vaul_node_creator::mIIR_LoopControlStatement (int lineno, pIIR_LoopStatement loop, pIIR_Expression condition)
{
  pIIR_LoopControlStatement n = new (&hist) IIR_LoopControlStatement (make_posinfo(lineno), NULL, loop, condition);
  return n;
}

pIIR_WhileLoopStatement vaul_node_creator::mIIR_WhileLoopStatement (pIIR_PosInfo pos, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region, pIIR_Expression condition)
{
  pIIR_WhileLoopStatement n = new (&hist) IIR_WhileLoopStatement (pos, NULL, sequence_of_statements, declarative_region, condition);
  return n;
}

pIIR_WhileLoopStatement vaul_node_creator::mIIR_WhileLoopStatement (int lineno, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region, pIIR_Expression condition)
{
  pIIR_WhileLoopStatement n = new (&hist) IIR_WhileLoopStatement (make_posinfo(lineno), NULL, sequence_of_statements, declarative_region, condition);
  return n;
}

pIIR_ForLoopStatement vaul_node_creator::mIIR_ForLoopStatement (pIIR_PosInfo pos, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region, pIIR_ConstantDeclaration iterator)
{
  pIIR_ForLoopStatement n = new (&hist) IIR_ForLoopStatement (pos, NULL, sequence_of_statements, declarative_region, iterator);
  return n;
}

pIIR_ForLoopStatement vaul_node_creator::mIIR_ForLoopStatement (int lineno, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region, pIIR_ConstantDeclaration iterator)
{
  pIIR_ForLoopStatement n = new (&hist) IIR_ForLoopStatement (make_posinfo(lineno), NULL, sequence_of_statements, declarative_region, iterator);
  return n;
}

pIIR_LoopStatement vaul_node_creator::mIIR_LoopStatement (pIIR_PosInfo pos, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region)
{
  pIIR_LoopStatement n = new (&hist) IIR_LoopStatement (pos, NULL, sequence_of_statements, declarative_region);
  return n;
}

pIIR_LoopStatement vaul_node_creator::mIIR_LoopStatement (int lineno, pIIR_SequentialStatementList sequence_of_statements, pIIR_LoopDeclarativeRegion declarative_region)
{
  pIIR_LoopStatement n = new (&hist) IIR_LoopStatement (make_posinfo(lineno), NULL, sequence_of_statements, declarative_region);
  return n;
}

pIIR_CaseStatement vaul_node_creator::mIIR_CaseStatement (pIIR_PosInfo pos, pIIR_Expression expression, pIIR_CaseStatementAlternativeList case_statement_alternatives)
{
  pIIR_CaseStatement n = new (&hist) IIR_CaseStatement (pos, NULL, expression, case_statement_alternatives);
  return n;
}

pIIR_CaseStatement vaul_node_creator::mIIR_CaseStatement (int lineno, pIIR_Expression expression, pIIR_CaseStatementAlternativeList case_statement_alternatives)
{
  pIIR_CaseStatement n = new (&hist) IIR_CaseStatement (make_posinfo(lineno), NULL, expression, case_statement_alternatives);
  return n;
}

pIIR_IfStatement vaul_node_creator::mIIR_IfStatement (pIIR_PosInfo pos, pIIR_Expression condition, pIIR_SequentialStatementList then_sequence, pIIR_SequentialStatementList else_sequence)
{
  pIIR_IfStatement n = new (&hist) IIR_IfStatement (pos, NULL, condition, then_sequence, else_sequence);
  return n;
}

pIIR_IfStatement vaul_node_creator::mIIR_IfStatement (int lineno, pIIR_Expression condition, pIIR_SequentialStatementList then_sequence, pIIR_SequentialStatementList else_sequence)
{
  pIIR_IfStatement n = new (&hist) IIR_IfStatement (make_posinfo(lineno), NULL, condition, then_sequence, else_sequence);
  return n;
}

pIIR_ProcedureCallStatement vaul_node_creator::mIIR_ProcedureCallStatement (pIIR_PosInfo pos, pIIR_ProcedureDeclaration procedure, pIIR_AssociationList actual_parameter_part)
{
  pIIR_ProcedureCallStatement n = new (&hist) IIR_ProcedureCallStatement (pos, NULL, procedure, actual_parameter_part);
  return n;
}

pIIR_ProcedureCallStatement vaul_node_creator::mIIR_ProcedureCallStatement (int lineno, pIIR_ProcedureDeclaration procedure, pIIR_AssociationList actual_parameter_part)
{
  pIIR_ProcedureCallStatement n = new (&hist) IIR_ProcedureCallStatement (make_posinfo(lineno), NULL, procedure, actual_parameter_part);
  return n;
}

pIIR_VariableAssignmentStatement vaul_node_creator::mIIR_VariableAssignmentStatement (pIIR_PosInfo pos, pIIR_Expression target, pIIR_Expression expression)
{
  pIIR_VariableAssignmentStatement n = new (&hist) IIR_VariableAssignmentStatement (pos, NULL, target, expression);
  return n;
}

pIIR_VariableAssignmentStatement vaul_node_creator::mIIR_VariableAssignmentStatement (int lineno, pIIR_Expression target, pIIR_Expression expression)
{
  pIIR_VariableAssignmentStatement n = new (&hist) IIR_VariableAssignmentStatement (make_posinfo(lineno), NULL, target, expression);
  return n;
}

pIIR_SignalAssignmentStatement vaul_node_creator::mIIR_SignalAssignmentStatement (pIIR_PosInfo pos, pIIR_Expression target, IR_DelayMechanism delay_mechanism, pIIR_Expression reject_time_expression, pIIR_WaveformList waveform)
{
  pIIR_SignalAssignmentStatement n = new (&hist) IIR_SignalAssignmentStatement (pos, NULL, target, delay_mechanism, reject_time_expression, waveform);
  return n;
}

pIIR_SignalAssignmentStatement vaul_node_creator::mIIR_SignalAssignmentStatement (int lineno, pIIR_Expression target, IR_DelayMechanism delay_mechanism, pIIR_Expression reject_time_expression, pIIR_WaveformList waveform)
{
  pIIR_SignalAssignmentStatement n = new (&hist) IIR_SignalAssignmentStatement (make_posinfo(lineno), NULL, target, delay_mechanism, reject_time_expression, waveform);
  return n;
}

pIIR_ReportStatement vaul_node_creator::mIIR_ReportStatement (pIIR_PosInfo pos, pIIR_Expression report_expression, pIIR_Expression severity_expression)
{
  pIIR_ReportStatement n = new (&hist) IIR_ReportStatement (pos, NULL, report_expression, severity_expression);
  return n;
}

pIIR_ReportStatement vaul_node_creator::mIIR_ReportStatement (int lineno, pIIR_Expression report_expression, pIIR_Expression severity_expression)
{
  pIIR_ReportStatement n = new (&hist) IIR_ReportStatement (make_posinfo(lineno), NULL, report_expression, severity_expression);
  return n;
}

pIIR_AssertionStatement vaul_node_creator::mIIR_AssertionStatement (pIIR_PosInfo pos, pIIR_Expression assertion_condition, pIIR_Expression report_expression, pIIR_Expression severity_expression)
{
  pIIR_AssertionStatement n = new (&hist) IIR_AssertionStatement (pos, NULL, assertion_condition, report_expression, severity_expression);
  return n;
}

pIIR_AssertionStatement vaul_node_creator::mIIR_AssertionStatement (int lineno, pIIR_Expression assertion_condition, pIIR_Expression report_expression, pIIR_Expression severity_expression)
{
  pIIR_AssertionStatement n = new (&hist) IIR_AssertionStatement (make_posinfo(lineno), NULL, assertion_condition, report_expression, severity_expression);
  return n;
}

pIIR_WaitStatement vaul_node_creator::mIIR_WaitStatement (pIIR_PosInfo pos, pIIR_Expression condition_clause, pIIR_Expression timeout_clause, pIIR_ExpressionList sensitivity_list)
{
  pIIR_WaitStatement n = new (&hist) IIR_WaitStatement (pos, NULL, condition_clause, timeout_clause, sensitivity_list);
  return n;
}

pIIR_WaitStatement vaul_node_creator::mIIR_WaitStatement (int lineno, pIIR_Expression condition_clause, pIIR_Expression timeout_clause, pIIR_ExpressionList sensitivity_list)
{
  pIIR_WaitStatement n = new (&hist) IIR_WaitStatement (make_posinfo(lineno), NULL, condition_clause, timeout_clause, sensitivity_list);
  return n;
}

pIIR_SequentialStatement vaul_node_creator::mIIR_SequentialStatement (pIIR_PosInfo pos)
{
  pIIR_SequentialStatement n = new (&hist) IIR_SequentialStatement (pos, NULL);
  return n;
}

pIIR_SequentialStatement vaul_node_creator::mIIR_SequentialStatement (int lineno)
{
  pIIR_SequentialStatement n = new (&hist) IIR_SequentialStatement (make_posinfo(lineno), NULL);
  return n;
}

pIIR_Attr_ArrayLENGTH vaul_node_creator::mIIR_Attr_ArrayLENGTH (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLENGTH n = new (&hist) IIR_Attr_ArrayLENGTH (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayLENGTH vaul_node_creator::mIIR_Attr_ArrayLENGTH (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLENGTH n = new (&hist) IIR_Attr_ArrayLENGTH (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayASCENDING vaul_node_creator::mIIR_Attr_ArrayASCENDING (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayASCENDING n = new (&hist) IIR_Attr_ArrayASCENDING (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayASCENDING vaul_node_creator::mIIR_Attr_ArrayASCENDING (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayASCENDING n = new (&hist) IIR_Attr_ArrayASCENDING (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayLOW vaul_node_creator::mIIR_Attr_ArrayLOW (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLOW n = new (&hist) IIR_Attr_ArrayLOW (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayLOW vaul_node_creator::mIIR_Attr_ArrayLOW (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLOW n = new (&hist) IIR_Attr_ArrayLOW (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayHIGH vaul_node_creator::mIIR_Attr_ArrayHIGH (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayHIGH n = new (&hist) IIR_Attr_ArrayHIGH (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayHIGH vaul_node_creator::mIIR_Attr_ArrayHIGH (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayHIGH n = new (&hist) IIR_Attr_ArrayHIGH (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayRIGHT vaul_node_creator::mIIR_Attr_ArrayRIGHT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayRIGHT n = new (&hist) IIR_Attr_ArrayRIGHT (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayRIGHT vaul_node_creator::mIIR_Attr_ArrayRIGHT (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayRIGHT n = new (&hist) IIR_Attr_ArrayRIGHT (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayLEFT vaul_node_creator::mIIR_Attr_ArrayLEFT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLEFT n = new (&hist) IIR_Attr_ArrayLEFT (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayLEFT vaul_node_creator::mIIR_Attr_ArrayLEFT (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_Attr_ArrayLEFT n = new (&hist) IIR_Attr_ArrayLEFT (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_AttrArrayFunc vaul_node_creator::mIIR_AttrArrayFunc (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_AttrArrayFunc n = new (&hist) IIR_AttrArrayFunc (pos, subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_AttrArrayFunc vaul_node_creator::mIIR_AttrArrayFunc (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Type array_type, int index)
{
  pIIR_AttrArrayFunc n = new (&hist) IIR_AttrArrayFunc (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, array_type, index);
  return n;
}

pIIR_Attr_RIGHTOF vaul_node_creator::mIIR_Attr_RIGHTOF (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_RIGHTOF n = new (&hist) IIR_Attr_RIGHTOF (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_RIGHTOF vaul_node_creator::mIIR_Attr_RIGHTOF (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_RIGHTOF n = new (&hist) IIR_Attr_RIGHTOF (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LEFTOF vaul_node_creator::mIIR_Attr_LEFTOF (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LEFTOF n = new (&hist) IIR_Attr_LEFTOF (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LEFTOF vaul_node_creator::mIIR_Attr_LEFTOF (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LEFTOF n = new (&hist) IIR_Attr_LEFTOF (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_PRED vaul_node_creator::mIIR_Attr_PRED (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_PRED n = new (&hist) IIR_Attr_PRED (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_PRED vaul_node_creator::mIIR_Attr_PRED (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_PRED n = new (&hist) IIR_Attr_PRED (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_SUCC vaul_node_creator::mIIR_Attr_SUCC (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_SUCC n = new (&hist) IIR_Attr_SUCC (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_SUCC vaul_node_creator::mIIR_Attr_SUCC (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_SUCC n = new (&hist) IIR_Attr_SUCC (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_VAL vaul_node_creator::mIIR_Attr_VAL (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_VAL n = new (&hist) IIR_Attr_VAL (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_VAL vaul_node_creator::mIIR_Attr_VAL (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_VAL n = new (&hist) IIR_Attr_VAL (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_POS vaul_node_creator::mIIR_Attr_POS (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_POS n = new (&hist) IIR_Attr_POS (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_POS vaul_node_creator::mIIR_Attr_POS (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_POS n = new (&hist) IIR_Attr_POS (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_VALUE vaul_node_creator::mIIR_Attr_VALUE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_VALUE n = new (&hist) IIR_Attr_VALUE (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_VALUE vaul_node_creator::mIIR_Attr_VALUE (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_VALUE n = new (&hist) IIR_Attr_VALUE (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_IMAGE vaul_node_creator::mIIR_Attr_IMAGE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_IMAGE n = new (&hist) IIR_Attr_IMAGE (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_IMAGE vaul_node_creator::mIIR_Attr_IMAGE (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_IMAGE n = new (&hist) IIR_Attr_IMAGE (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_AttrTypeFunc vaul_node_creator::mIIR_AttrTypeFunc (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_AttrTypeFunc n = new (&hist) IIR_AttrTypeFunc (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_AttrTypeFunc vaul_node_creator::mIIR_AttrTypeFunc (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_AttrTypeFunc n = new (&hist) IIR_AttrTypeFunc (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LENGTH vaul_node_creator::mIIR_Attr_LENGTH (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LENGTH n = new (&hist) IIR_Attr_LENGTH (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LENGTH vaul_node_creator::mIIR_Attr_LENGTH (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LENGTH n = new (&hist) IIR_Attr_LENGTH (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_ASCENDING vaul_node_creator::mIIR_Attr_ASCENDING (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_ASCENDING n = new (&hist) IIR_Attr_ASCENDING (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_ASCENDING vaul_node_creator::mIIR_Attr_ASCENDING (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_ASCENDING n = new (&hist) IIR_Attr_ASCENDING (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_HIGH vaul_node_creator::mIIR_Attr_HIGH (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_HIGH n = new (&hist) IIR_Attr_HIGH (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_HIGH vaul_node_creator::mIIR_Attr_HIGH (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_HIGH n = new (&hist) IIR_Attr_HIGH (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LOW vaul_node_creator::mIIR_Attr_LOW (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LOW n = new (&hist) IIR_Attr_LOW (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LOW vaul_node_creator::mIIR_Attr_LOW (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LOW n = new (&hist) IIR_Attr_LOW (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_RIGHT vaul_node_creator::mIIR_Attr_RIGHT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_RIGHT n = new (&hist) IIR_Attr_RIGHT (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_RIGHT vaul_node_creator::mIIR_Attr_RIGHT (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_RIGHT n = new (&hist) IIR_Attr_RIGHT (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LEFT vaul_node_creator::mIIR_Attr_LEFT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LEFT n = new (&hist) IIR_Attr_LEFT (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_Attr_LEFT vaul_node_creator::mIIR_Attr_LEFT (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_Attr_LEFT n = new (&hist) IIR_Attr_LEFT (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_AttrTypeValue vaul_node_creator::mIIR_AttrTypeValue (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_AttrTypeValue n = new (&hist) IIR_AttrTypeValue (pos, subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_AttrTypeValue vaul_node_creator::mIIR_AttrTypeValue (int lineno, pIIR_Type subtype, pIIR_Type prefix, pIIR_Expression argument)
{
  pIIR_AttrTypeValue n = new (&hist) IIR_AttrTypeValue (make_posinfo(lineno), subtype, IR_NOT_STATIC, prefix, argument);
  return n;
}

pIIR_ValueAttr vaul_node_creator::mIIR_ValueAttr (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_ValueAttr n = new (&hist) IIR_ValueAttr (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_ValueAttr vaul_node_creator::mIIR_ValueAttr (int lineno, pIIR_Type subtype)
{
  pIIR_ValueAttr n = new (&hist) IIR_ValueAttr (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_Attr_DRIVING_VALUE vaul_node_creator::mIIR_Attr_DRIVING_VALUE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_DRIVING_VALUE n = new (&hist) IIR_Attr_DRIVING_VALUE (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_DRIVING_VALUE vaul_node_creator::mIIR_Attr_DRIVING_VALUE (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_DRIVING_VALUE n = new (&hist) IIR_Attr_DRIVING_VALUE (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_DRIVING vaul_node_creator::mIIR_Attr_DRIVING (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_DRIVING n = new (&hist) IIR_Attr_DRIVING (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_DRIVING vaul_node_creator::mIIR_Attr_DRIVING (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_DRIVING n = new (&hist) IIR_Attr_DRIVING (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_VALUE vaul_node_creator::mIIR_Attr_LAST_VALUE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_VALUE n = new (&hist) IIR_Attr_LAST_VALUE (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_VALUE vaul_node_creator::mIIR_Attr_LAST_VALUE (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_VALUE n = new (&hist) IIR_Attr_LAST_VALUE (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_ACTIVE vaul_node_creator::mIIR_Attr_LAST_ACTIVE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_ACTIVE n = new (&hist) IIR_Attr_LAST_ACTIVE (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_ACTIVE vaul_node_creator::mIIR_Attr_LAST_ACTIVE (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_ACTIVE n = new (&hist) IIR_Attr_LAST_ACTIVE (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_EVENT vaul_node_creator::mIIR_Attr_LAST_EVENT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_EVENT n = new (&hist) IIR_Attr_LAST_EVENT (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_LAST_EVENT vaul_node_creator::mIIR_Attr_LAST_EVENT (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_LAST_EVENT n = new (&hist) IIR_Attr_LAST_EVENT (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_ACTIVE vaul_node_creator::mIIR_Attr_ACTIVE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_ACTIVE n = new (&hist) IIR_Attr_ACTIVE (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_ACTIVE vaul_node_creator::mIIR_Attr_ACTIVE (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_ACTIVE n = new (&hist) IIR_Attr_ACTIVE (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_EVENT vaul_node_creator::mIIR_Attr_EVENT (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_EVENT n = new (&hist) IIR_Attr_EVENT (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_EVENT vaul_node_creator::mIIR_Attr_EVENT (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_EVENT n = new (&hist) IIR_Attr_EVENT (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_AttrSigFunc vaul_node_creator::mIIR_AttrSigFunc (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_AttrSigFunc n = new (&hist) IIR_AttrSigFunc (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_AttrSigFunc vaul_node_creator::mIIR_AttrSigFunc (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_AttrSigFunc n = new (&hist) IIR_AttrSigFunc (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_FunctionAttr vaul_node_creator::mIIR_FunctionAttr (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_FunctionAttr n = new (&hist) IIR_FunctionAttr (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_FunctionAttr vaul_node_creator::mIIR_FunctionAttr (int lineno, pIIR_Type subtype)
{
  pIIR_FunctionAttr n = new (&hist) IIR_FunctionAttr (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_Attr_TRANSACTION vaul_node_creator::mIIR_Attr_TRANSACTION (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_TRANSACTION n = new (&hist) IIR_Attr_TRANSACTION (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_TRANSACTION vaul_node_creator::mIIR_Attr_TRANSACTION (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_Attr_TRANSACTION n = new (&hist) IIR_Attr_TRANSACTION (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_Attr_QUIET vaul_node_creator::mIIR_Attr_QUIET (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression duration)
{
  pIIR_Attr_QUIET n = new (&hist) IIR_Attr_QUIET (pos, subtype, IR_NOT_STATIC, signal, duration);
  return n;
}

pIIR_Attr_QUIET vaul_node_creator::mIIR_Attr_QUIET (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression duration)
{
  pIIR_Attr_QUIET n = new (&hist) IIR_Attr_QUIET (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal, duration);
  return n;
}

pIIR_Attr_STABLE vaul_node_creator::mIIR_Attr_STABLE (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression duration)
{
  pIIR_Attr_STABLE n = new (&hist) IIR_Attr_STABLE (pos, subtype, IR_NOT_STATIC, signal, duration);
  return n;
}

pIIR_Attr_STABLE vaul_node_creator::mIIR_Attr_STABLE (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression duration)
{
  pIIR_Attr_STABLE n = new (&hist) IIR_Attr_STABLE (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal, duration);
  return n;
}

pIIR_Attr_DELAYED vaul_node_creator::mIIR_Attr_DELAYED (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression delay)
{
  pIIR_Attr_DELAYED n = new (&hist) IIR_Attr_DELAYED (pos, subtype, IR_NOT_STATIC, signal, delay);
  return n;
}

pIIR_Attr_DELAYED vaul_node_creator::mIIR_Attr_DELAYED (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal, pIIR_Expression delay)
{
  pIIR_Attr_DELAYED n = new (&hist) IIR_Attr_DELAYED (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal, delay);
  return n;
}

pIIR_SignalAttr vaul_node_creator::mIIR_SignalAttr (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_SignalAttr n = new (&hist) IIR_SignalAttr (pos, subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_SignalAttr vaul_node_creator::mIIR_SignalAttr (int lineno, pIIR_Type subtype, pIIR_ObjectReference signal)
{
  pIIR_SignalAttr n = new (&hist) IIR_SignalAttr (make_posinfo(lineno), subtype, IR_NOT_STATIC, signal);
  return n;
}

pIIR_SliceReference vaul_node_creator::mIIR_SliceReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_Range range)
{
  pIIR_SliceReference n = new (&hist) IIR_SliceReference (pos, subtype, IR_NOT_STATIC, array, range);
  return n;
}

pIIR_SliceReference vaul_node_creator::mIIR_SliceReference (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_Range range)
{
  pIIR_SliceReference n = new (&hist) IIR_SliceReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, range);
  return n;
}

pIIR_ArrayReference vaul_node_creator::mIIR_ArrayReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array, pIIR_ExpressionList indices)
{
  pIIR_ArrayReference n = new (&hist) IIR_ArrayReference (pos, subtype, IR_NOT_STATIC, array, indices);
  return n;
}

pIIR_ArrayReference vaul_node_creator::mIIR_ArrayReference (int lineno, pIIR_Type subtype, pIIR_Expression array, pIIR_ExpressionList indices)
{
  pIIR_ArrayReference n = new (&hist) IIR_ArrayReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, array, indices);
  return n;
}

pIIR_GenericArrayReference vaul_node_creator::mIIR_GenericArrayReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression array)
{
  pIIR_GenericArrayReference n = new (&hist) IIR_GenericArrayReference (pos, subtype, IR_NOT_STATIC, array);
  return n;
}

pIIR_GenericArrayReference vaul_node_creator::mIIR_GenericArrayReference (int lineno, pIIR_Type subtype, pIIR_Expression array)
{
  pIIR_GenericArrayReference n = new (&hist) IIR_GenericArrayReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, array);
  return n;
}

pIIR_RecordReference vaul_node_creator::mIIR_RecordReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression record, pIIR_ElementDeclaration element)
{
  pIIR_RecordReference n = new (&hist) IIR_RecordReference (pos, subtype, IR_NOT_STATIC, record, element);
  return n;
}

pIIR_RecordReference vaul_node_creator::mIIR_RecordReference (int lineno, pIIR_Type subtype, pIIR_Expression record, pIIR_ElementDeclaration element)
{
  pIIR_RecordReference n = new (&hist) IIR_RecordReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, record, element);
  return n;
}

pIIR_AccessReference vaul_node_creator::mIIR_AccessReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Expression access)
{
  pIIR_AccessReference n = new (&hist) IIR_AccessReference (pos, subtype, IR_NOT_STATIC, access);
  return n;
}

pIIR_AccessReference vaul_node_creator::mIIR_AccessReference (int lineno, pIIR_Type subtype, pIIR_Expression access)
{
  pIIR_AccessReference n = new (&hist) IIR_AccessReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, access);
  return n;
}

pIIR_SimpleReference vaul_node_creator::mIIR_SimpleReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ObjectDeclaration object)
{
  pIIR_SimpleReference n = new (&hist) IIR_SimpleReference (pos, subtype, IR_NOT_STATIC, object);
  return n;
}

pIIR_SimpleReference vaul_node_creator::mIIR_SimpleReference (int lineno, pIIR_Type subtype, pIIR_ObjectDeclaration object)
{
  pIIR_SimpleReference n = new (&hist) IIR_SimpleReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, object);
  return n;
}

pIIR_ObjectReference vaul_node_creator::mIIR_ObjectReference (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_ObjectReference n = new (&hist) IIR_ObjectReference (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_ObjectReference vaul_node_creator::mIIR_ObjectReference (int lineno, pIIR_Type subtype)
{
  pIIR_ObjectReference n = new (&hist) IIR_ObjectReference (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_OpenExpression vaul_node_creator::mIIR_OpenExpression (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_OpenExpression n = new (&hist) IIR_OpenExpression (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_OpenExpression vaul_node_creator::mIIR_OpenExpression (int lineno, pIIR_Type subtype)
{
  pIIR_OpenExpression n = new (&hist) IIR_OpenExpression (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_Allocator vaul_node_creator::mIIR_Allocator (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression value)
{
  pIIR_Allocator n = new (&hist) IIR_Allocator (pos, subtype, IR_NOT_STATIC, type_mark, value);
  return n;
}

pIIR_Allocator vaul_node_creator::mIIR_Allocator (int lineno, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression value)
{
  pIIR_Allocator n = new (&hist) IIR_Allocator (make_posinfo(lineno), subtype, IR_NOT_STATIC, type_mark, value);
  return n;
}

pIIR_TypeConversion vaul_node_creator::mIIR_TypeConversion (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression expression)
{
  pIIR_TypeConversion n = new (&hist) IIR_TypeConversion (pos, subtype, IR_NOT_STATIC, type_mark, expression);
  return n;
}

pIIR_TypeConversion vaul_node_creator::mIIR_TypeConversion (int lineno, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression expression)
{
  pIIR_TypeConversion n = new (&hist) IIR_TypeConversion (make_posinfo(lineno), subtype, IR_NOT_STATIC, type_mark, expression);
  return n;
}

pIIR_QualifiedExpression vaul_node_creator::mIIR_QualifiedExpression (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression expression)
{
  pIIR_QualifiedExpression n = new (&hist) IIR_QualifiedExpression (pos, subtype, IR_NOT_STATIC, type_mark, expression);
  return n;
}

pIIR_QualifiedExpression vaul_node_creator::mIIR_QualifiedExpression (int lineno, pIIR_Type subtype, pIIR_Type type_mark, pIIR_Expression expression)
{
  pIIR_QualifiedExpression n = new (&hist) IIR_QualifiedExpression (make_posinfo(lineno), subtype, IR_NOT_STATIC, type_mark, expression);
  return n;
}

pIIR_FunctionCall vaul_node_creator::mIIR_FunctionCall (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_FunctionDeclaration function, pIIR_AssociationList parameter_association_list)
{
  pIIR_FunctionCall n = new (&hist) IIR_FunctionCall (pos, subtype, IR_NOT_STATIC, function, parameter_association_list);
  return n;
}

pIIR_FunctionCall vaul_node_creator::mIIR_FunctionCall (int lineno, pIIR_Type subtype, pIIR_FunctionDeclaration function, pIIR_AssociationList parameter_association_list)
{
  pIIR_FunctionCall n = new (&hist) IIR_FunctionCall (make_posinfo(lineno), subtype, IR_NOT_STATIC, function, parameter_association_list);
  return n;
}

pIIR_ArtificialArrayAggregate vaul_node_creator::mIIR_ArtificialArrayAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_IndexedAssociationList indexed_association_list)
{
  pIIR_ArtificialArrayAggregate n = new (&hist) IIR_ArtificialArrayAggregate (pos, subtype, IR_NOT_STATIC, indexed_association_list);
  return n;
}

pIIR_ArtificialArrayAggregate vaul_node_creator::mIIR_ArtificialArrayAggregate (int lineno, pIIR_Type subtype, pIIR_IndexedAssociationList indexed_association_list)
{
  pIIR_ArtificialArrayAggregate n = new (&hist) IIR_ArtificialArrayAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, indexed_association_list);
  return n;
}

pIIR_ArrayAggregate vaul_node_creator::mIIR_ArrayAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_IndexedAssociationList indexed_association_list)
{
  pIIR_ArrayAggregate n = new (&hist) IIR_ArrayAggregate (pos, subtype, IR_NOT_STATIC, indexed_association_list);
  return n;
}

pIIR_ArrayAggregate vaul_node_creator::mIIR_ArrayAggregate (int lineno, pIIR_Type subtype, pIIR_IndexedAssociationList indexed_association_list)
{
  pIIR_ArrayAggregate n = new (&hist) IIR_ArrayAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, indexed_association_list);
  return n;
}

pIIR_ArtificialRecordAggregate vaul_node_creator::mIIR_ArtificialRecordAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ElementAssociationList element_association_list)
{
  pIIR_ArtificialRecordAggregate n = new (&hist) IIR_ArtificialRecordAggregate (pos, subtype, IR_NOT_STATIC, element_association_list);
  return n;
}

pIIR_ArtificialRecordAggregate vaul_node_creator::mIIR_ArtificialRecordAggregate (int lineno, pIIR_Type subtype, pIIR_ElementAssociationList element_association_list)
{
  pIIR_ArtificialRecordAggregate n = new (&hist) IIR_ArtificialRecordAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, element_association_list);
  return n;
}

pIIR_RecordAggregate vaul_node_creator::mIIR_RecordAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ElementAssociationList element_association_list)
{
  pIIR_RecordAggregate n = new (&hist) IIR_RecordAggregate (pos, subtype, IR_NOT_STATIC, element_association_list);
  return n;
}

pIIR_RecordAggregate vaul_node_creator::mIIR_RecordAggregate (int lineno, pIIR_Type subtype, pIIR_ElementAssociationList element_association_list)
{
  pIIR_RecordAggregate n = new (&hist) IIR_RecordAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, element_association_list);
  return n;
}

pIIR_Aggregate vaul_node_creator::mIIR_Aggregate (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_Aggregate n = new (&hist) IIR_Aggregate (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_Aggregate vaul_node_creator::mIIR_Aggregate (int lineno, pIIR_Type subtype)
{
  pIIR_Aggregate n = new (&hist) IIR_Aggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_NullExpression vaul_node_creator::mIIR_NullExpression (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_NullExpression n = new (&hist) IIR_NullExpression (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_NullExpression vaul_node_creator::mIIR_NullExpression (int lineno, pIIR_Type subtype)
{
  pIIR_NullExpression n = new (&hist) IIR_NullExpression (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_EnumLiteralReference vaul_node_creator::mIIR_EnumLiteralReference (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_EnumerationLiteral value)
{
  pIIR_EnumLiteralReference n = new (&hist) IIR_EnumLiteralReference (pos, subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_EnumLiteralReference vaul_node_creator::mIIR_EnumLiteralReference (int lineno, pIIR_Type subtype, pIIR_EnumerationLiteral value)
{
  pIIR_EnumLiteralReference n = new (&hist) IIR_EnumLiteralReference (make_posinfo(lineno), subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_ArrayLiteralExpression vaul_node_creator::mIIR_ArrayLiteralExpression (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_StringLiteral value)
{
  pIIR_ArrayLiteralExpression n = new (&hist) IIR_ArrayLiteralExpression (pos, subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_ArrayLiteralExpression vaul_node_creator::mIIR_ArrayLiteralExpression (int lineno, pIIR_Type subtype, pIIR_StringLiteral value)
{
  pIIR_ArrayLiteralExpression n = new (&hist) IIR_ArrayLiteralExpression (make_posinfo(lineno), subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_PhysicalLiteral vaul_node_creator::mIIR_PhysicalLiteral (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_AbstractLiteral value, pIIR_PhysicalUnit unit)
{
  pIIR_PhysicalLiteral n = new (&hist) IIR_PhysicalLiteral (pos, subtype, IR_NOT_STATIC, value, unit);
  return n;
}

pIIR_PhysicalLiteral vaul_node_creator::mIIR_PhysicalLiteral (int lineno, pIIR_Type subtype, pIIR_AbstractLiteral value, pIIR_PhysicalUnit unit)
{
  pIIR_PhysicalLiteral n = new (&hist) IIR_PhysicalLiteral (make_posinfo(lineno), subtype, IR_NOT_STATIC, value, unit);
  return n;
}

pIIR_AbstractLiteralExpression vaul_node_creator::mIIR_AbstractLiteralExpression (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_AbstractLiteral value)
{
  pIIR_AbstractLiteralExpression n = new (&hist) IIR_AbstractLiteralExpression (pos, subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_AbstractLiteralExpression vaul_node_creator::mIIR_AbstractLiteralExpression (int lineno, pIIR_Type subtype, pIIR_AbstractLiteral value)
{
  pIIR_AbstractLiteralExpression n = new (&hist) IIR_AbstractLiteralExpression (make_posinfo(lineno), subtype, IR_NOT_STATIC, value);
  return n;
}

pIIR_Expression vaul_node_creator::mIIR_Expression (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pIIR_Expression n = new (&hist) IIR_Expression (pos, subtype, IR_NOT_STATIC);
  return n;
}

pIIR_Expression vaul_node_creator::mIIR_Expression (int lineno, pIIR_Type subtype)
{
  pIIR_Expression n = new (&hist) IIR_Expression (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pIIR_UseClause vaul_node_creator::mIIR_UseClause (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Declaration used_unit)
{
  pIIR_UseClause n = new (&hist) IIR_UseClause (pos, declarator, NULL, NULL, -1, used_unit);
  return n;
}

pIIR_UseClause vaul_node_creator::mIIR_UseClause (int lineno, pIIR_TextLiteral declarator, pIIR_Declaration used_unit)
{
  pIIR_UseClause n = new (&hist) IIR_UseClause (make_posinfo(lineno), declarator, NULL, NULL, -1, used_unit);
  return n;
}

pIIR_LibraryClause vaul_node_creator::mIIR_LibraryClause (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_LibraryClause n = new (&hist) IIR_LibraryClause (pos, declarator, NULL, NULL, -1);
  return n;
}

pIIR_LibraryClause vaul_node_creator::mIIR_LibraryClause (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_LibraryClause n = new (&hist) IIR_LibraryClause (make_posinfo(lineno), declarator, NULL, NULL, -1);
  return n;
}

pIIR_Label vaul_node_creator::mIIR_Label (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_SequentialStatement statement)
{
  pIIR_Label n = new (&hist) IIR_Label (pos, declarator, NULL, NULL, -1, statement);
  return n;
}

pIIR_Label vaul_node_creator::mIIR_Label (int lineno, pIIR_TextLiteral declarator, pIIR_SequentialStatement statement)
{
  pIIR_Label n = new (&hist) IIR_Label (make_posinfo(lineno), declarator, NULL, NULL, -1, statement);
  return n;
}

pIIR_DisconnectSpecification vaul_node_creator::mIIR_DisconnectSpecification (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type type_mark, pIIR_Expression time_expression, pIIR_ObjectReference guarded_signal)
{
  pIIR_DisconnectSpecification n = new (&hist) IIR_DisconnectSpecification (pos, declarator, NULL, NULL, -1, type_mark, time_expression, guarded_signal);
  return n;
}

pIIR_DisconnectSpecification vaul_node_creator::mIIR_DisconnectSpecification (int lineno, pIIR_TextLiteral declarator, pIIR_Type type_mark, pIIR_Expression time_expression, pIIR_ObjectReference guarded_signal)
{
  pIIR_DisconnectSpecification n = new (&hist) IIR_DisconnectSpecification (make_posinfo(lineno), declarator, NULL, NULL, -1, type_mark, time_expression, guarded_signal);
  return n;
}

pIIR_ConfigurationSpecification vaul_node_creator::mIIR_ConfigurationSpecification (pIIR_PosInfo pos, pIIR_Identifier label, pIIR_ComponentDeclaration component, pIIR_BindingIndication binding)
{
  pIIR_ConfigurationSpecification n = new (&hist) IIR_ConfigurationSpecification (pos, label, component, binding);
  return n;
}

pIIR_ConfigurationSpecification vaul_node_creator::mIIR_ConfigurationSpecification (int lineno, pIIR_Identifier label, pIIR_ComponentDeclaration component, pIIR_BindingIndication binding)
{
  pIIR_ConfigurationSpecification n = new (&hist) IIR_ConfigurationSpecification (make_posinfo(lineno), label, component, binding);
  return n;
}

pIIR_BindingIndication vaul_node_creator::mIIR_BindingIndication (pIIR_PosInfo pos, pIIR_DeclarativeRegion unit, pIIR_AssociationList generic_map_list, pIIR_AssociationList port_map_list)
{
  pIIR_BindingIndication n = new (&hist) IIR_BindingIndication (pos, unit, generic_map_list, port_map_list);
  return n;
}

pIIR_BindingIndication vaul_node_creator::mIIR_BindingIndication (int lineno, pIIR_DeclarativeRegion unit, pIIR_AssociationList generic_map_list, pIIR_AssociationList port_map_list)
{
  pIIR_BindingIndication n = new (&hist) IIR_BindingIndication (make_posinfo(lineno), unit, generic_map_list, port_map_list);
  return n;
}

pIIR_PhysicalUnit vaul_node_creator::mIIR_PhysicalUnit (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Expression multiplier, pIIR_PhysicalUnit unit_name, pIIR_PhysicalType type, int unit_pos)
{
  pIIR_PhysicalUnit n = new (&hist) IIR_PhysicalUnit (pos, declarator, NULL, NULL, -1, multiplier, unit_name, type, unit_pos);
  return n;
}

pIIR_PhysicalUnit vaul_node_creator::mIIR_PhysicalUnit (int lineno, pIIR_TextLiteral declarator, pIIR_Expression multiplier, pIIR_PhysicalUnit unit_name, pIIR_PhysicalType type, int unit_pos)
{
  pIIR_PhysicalUnit n = new (&hist) IIR_PhysicalUnit (make_posinfo(lineno), declarator, NULL, NULL, -1, multiplier, unit_name, type, unit_pos);
  return n;
}

pIIR_ComponentConfiguration vaul_node_creator::mIIR_ComponentConfiguration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_LibraryUnit entity_aspect, pIIR_ComponentInstantiationList instantiation_list, pIIR_AssociationList generic_map_aspect, pIIR_AssociationList port_map_aspect, pIIR_BlockConfiguration block_config)
{
  pIIR_ComponentConfiguration n = new (&hist) IIR_ComponentConfiguration (pos, declarator, NULL, NULL, -1, NULL, NULL, entity_aspect, instantiation_list, generic_map_aspect, port_map_aspect, block_config);
  return n;
}

pIIR_ComponentConfiguration vaul_node_creator::mIIR_ComponentConfiguration (int lineno, pIIR_TextLiteral declarator, pIIR_LibraryUnit entity_aspect, pIIR_ComponentInstantiationList instantiation_list, pIIR_AssociationList generic_map_aspect, pIIR_AssociationList port_map_aspect, pIIR_BlockConfiguration block_config)
{
  pIIR_ComponentConfiguration n = new (&hist) IIR_ComponentConfiguration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, entity_aspect, instantiation_list, generic_map_aspect, port_map_aspect, block_config);
  return n;
}

pIIR_BlockConfiguration vaul_node_creator::mIIR_BlockConfiguration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion block_specification, pIIR_DeclarationList use_clause_list, pIIR_ConfigurationItemList configuration_item_list)
{
  pIIR_BlockConfiguration n = new (&hist) IIR_BlockConfiguration (pos, declarator, NULL, NULL, -1, NULL, NULL, block_specification, use_clause_list, configuration_item_list);
  return n;
}

pIIR_BlockConfiguration vaul_node_creator::mIIR_BlockConfiguration (int lineno, pIIR_TextLiteral declarator, pIIR_DeclarativeRegion block_specification, pIIR_DeclarationList use_clause_list, pIIR_ConfigurationItemList configuration_item_list)
{
  pIIR_BlockConfiguration n = new (&hist) IIR_BlockConfiguration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, block_specification, use_clause_list, configuration_item_list);
  return n;
}

pIIR_ConfigurationItem vaul_node_creator::mIIR_ConfigurationItem (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_ConfigurationItem n = new (&hist) IIR_ConfigurationItem (pos, declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_ConfigurationItem vaul_node_creator::mIIR_ConfigurationItem (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_ConfigurationItem n = new (&hist) IIR_ConfigurationItem (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_ConfigurationDeclaration vaul_node_creator::mIIR_ConfigurationDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity)
{
  pIIR_ConfigurationDeclaration n = new (&hist) IIR_ConfigurationDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, entity);
  return n;
}

pIIR_ConfigurationDeclaration vaul_node_creator::mIIR_ConfigurationDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity)
{
  pIIR_ConfigurationDeclaration n = new (&hist) IIR_ConfigurationDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, entity);
  return n;
}

pIIR_ConfigurationDeclaration vaul_node_creator::mIIR_ConfigurationDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_BlockConfiguration block_configuration, pIIR_EntityDeclaration entity)
{
  pIIR_ConfigurationDeclaration n = new (&hist) IIR_ConfigurationDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, block_configuration, entity);
  return n;
}

pIIR_ConfigurationDeclaration vaul_node_creator::mIIR_ConfigurationDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_BlockConfiguration block_configuration, pIIR_EntityDeclaration entity)
{
  pIIR_ConfigurationDeclaration n = new (&hist) IIR_ConfigurationDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, block_configuration, entity);
  return n;
}

pIIR_PackageBodyDeclaration vaul_node_creator::mIIR_PackageBodyDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_PackageDeclaration package)
{
  pIIR_PackageBodyDeclaration n = new (&hist) IIR_PackageBodyDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, package);
  return n;
}

pIIR_PackageBodyDeclaration vaul_node_creator::mIIR_PackageBodyDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_PackageDeclaration package)
{
  pIIR_PackageBodyDeclaration n = new (&hist) IIR_PackageBodyDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, package);
  return n;
}

pIIR_PackageDeclaration vaul_node_creator::mIIR_PackageDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_PackageDeclaration n = new (&hist) IIR_PackageDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_PackageDeclaration vaul_node_creator::mIIR_PackageDeclaration (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_PackageDeclaration n = new (&hist) IIR_PackageDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_ArchitectureRef vaul_node_creator::mIIR_ArchitectureRef (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity, pIIR_TextLiteral architecture_name)
{
  pIIR_ArchitectureRef n = new (&hist) IIR_ArchitectureRef (pos, declarator, NULL, NULL, -1, NULL, NULL, entity, architecture_name);
  return n;
}

pIIR_ArchitectureRef vaul_node_creator::mIIR_ArchitectureRef (int lineno, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity, pIIR_TextLiteral architecture_name)
{
  pIIR_ArchitectureRef n = new (&hist) IIR_ArchitectureRef (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, entity, architecture_name);
  return n;
}

pIIR_ArchitectureDeclaration vaul_node_creator::mIIR_ArchitectureDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity)
{
  pIIR_ArchitectureDeclaration n = new (&hist) IIR_ArchitectureDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, entity, NULL, NULL);
  return n;
}

pIIR_ArchitectureDeclaration vaul_node_creator::mIIR_ArchitectureDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_EntityDeclaration entity)
{
  pIIR_ArchitectureDeclaration n = new (&hist) IIR_ArchitectureDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, entity, NULL, NULL);
  return n;
}

pIIR_EntityDeclaration vaul_node_creator::mIIR_EntityDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_EntityDeclaration n = new (&hist) IIR_EntityDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_EntityDeclaration vaul_node_creator::mIIR_EntityDeclaration (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_EntityDeclaration n = new (&hist) IIR_EntityDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_LibraryUnit vaul_node_creator::mIIR_LibraryUnit (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_LibraryUnit n = new (&hist) IIR_LibraryUnit (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_LibraryUnit vaul_node_creator::mIIR_LibraryUnit (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_LibraryUnit n = new (&hist) IIR_LibraryUnit (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_LibraryDeclaration vaul_node_creator::mIIR_LibraryDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_LibraryUnitList primary_units)
{
  pIIR_LibraryDeclaration n = new (&hist) IIR_LibraryDeclaration (pos, declarator, NULL, NULL, -1, primary_units);
  return n;
}

pIIR_LibraryDeclaration vaul_node_creator::mIIR_LibraryDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_LibraryUnitList primary_units)
{
  pIIR_LibraryDeclaration n = new (&hist) IIR_LibraryDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, primary_units);
  return n;
}

pIIR_ComponentDeclaration vaul_node_creator::mIIR_ComponentDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_ComponentDeclaration n = new (&hist) IIR_ComponentDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_ComponentDeclaration vaul_node_creator::mIIR_ComponentDeclaration (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_ComponentDeclaration n = new (&hist) IIR_ComponentDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL);
  return n;
}

pIIR_AttributeDeclaration vaul_node_creator::mIIR_AttributeDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype)
{
  pIIR_AttributeDeclaration n = new (&hist) IIR_AttributeDeclaration (pos, declarator, NULL, NULL, -1, subtype);
  return n;
}

pIIR_AttributeDeclaration vaul_node_creator::mIIR_AttributeDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype)
{
  pIIR_AttributeDeclaration n = new (&hist) IIR_AttributeDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype);
  return n;
}

pIIR_FileInterfaceDeclaration vaul_node_creator::mIIR_FileInterfaceDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_FileInterfaceDeclaration n = new (&hist) IIR_FileInterfaceDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_FileInterfaceDeclaration vaul_node_creator::mIIR_FileInterfaceDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_FileInterfaceDeclaration n = new (&hist) IIR_FileInterfaceDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_SignalInterfaceDeclaration vaul_node_creator::mIIR_SignalInterfaceDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus, IR_SignalKind signal_kind)
{
  pIIR_SignalInterfaceDeclaration n = new (&hist) IIR_SignalInterfaceDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus, signal_kind);
  return n;
}

pIIR_SignalInterfaceDeclaration vaul_node_creator::mIIR_SignalInterfaceDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus, IR_SignalKind signal_kind)
{
  pIIR_SignalInterfaceDeclaration n = new (&hist) IIR_SignalInterfaceDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus, signal_kind);
  return n;
}

pIIR_VariableInterfaceDeclaration vaul_node_creator::mIIR_VariableInterfaceDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_VariableInterfaceDeclaration n = new (&hist) IIR_VariableInterfaceDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_VariableInterfaceDeclaration vaul_node_creator::mIIR_VariableInterfaceDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_VariableInterfaceDeclaration n = new (&hist) IIR_VariableInterfaceDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_ConstantInterfaceDeclaration vaul_node_creator::mIIR_ConstantInterfaceDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_ConstantInterfaceDeclaration n = new (&hist) IIR_ConstantInterfaceDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_ConstantInterfaceDeclaration vaul_node_creator::mIIR_ConstantInterfaceDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_ConstantInterfaceDeclaration n = new (&hist) IIR_ConstantInterfaceDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_InterfaceDeclaration vaul_node_creator::mIIR_InterfaceDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_InterfaceDeclaration n = new (&hist) IIR_InterfaceDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_InterfaceDeclaration vaul_node_creator::mIIR_InterfaceDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_Mode mode, bool bus)
{
  pIIR_InterfaceDeclaration n = new (&hist) IIR_InterfaceDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, mode, bus);
  return n;
}

pIIR_FileDeclaration vaul_node_creator::mIIR_FileDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_Expression file_open_expression, pIIR_Expression file_logical_name)
{
  pIIR_FileDeclaration n = new (&hist) IIR_FileDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, file_open_expression, file_logical_name);
  return n;
}

pIIR_FileDeclaration vaul_node_creator::mIIR_FileDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, pIIR_Expression file_open_expression, pIIR_Expression file_logical_name)
{
  pIIR_FileDeclaration n = new (&hist) IIR_FileDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, file_open_expression, file_logical_name);
  return n;
}

pIIR_SignalDeclaration vaul_node_creator::mIIR_SignalDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_SignalKind signal_kind)
{
  pIIR_SignalDeclaration n = new (&hist) IIR_SignalDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, signal_kind);
  return n;
}

pIIR_SignalDeclaration vaul_node_creator::mIIR_SignalDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_SignalKind signal_kind)
{
  pIIR_SignalDeclaration n = new (&hist) IIR_SignalDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, signal_kind);
  return n;
}

pIIR_SharedVariableDeclaration vaul_node_creator::mIIR_SharedVariableDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_SharedVariableDeclaration n = new (&hist) IIR_SharedVariableDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_SharedVariableDeclaration vaul_node_creator::mIIR_SharedVariableDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_SharedVariableDeclaration n = new (&hist) IIR_SharedVariableDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_VariableDeclaration vaul_node_creator::mIIR_VariableDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_VariableDeclaration n = new (&hist) IIR_VariableDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_VariableDeclaration vaul_node_creator::mIIR_VariableDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_VariableDeclaration n = new (&hist) IIR_VariableDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_ConstantDeclaration vaul_node_creator::mIIR_ConstantDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_ConstantDeclaration n = new (&hist) IIR_ConstantDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_ConstantDeclaration vaul_node_creator::mIIR_ConstantDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_ConstantDeclaration n = new (&hist) IIR_ConstantDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_ObjectDeclaration vaul_node_creator::mIIR_ObjectDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_ObjectDeclaration n = new (&hist) IIR_ObjectDeclaration (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_ObjectDeclaration vaul_node_creator::mIIR_ObjectDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value)
{
  pIIR_ObjectDeclaration n = new (&hist) IIR_ObjectDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL);
  return n;
}

pIIR_SubtypeDeclaration vaul_node_creator::mIIR_SubtypeDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type type)
{
  pIIR_SubtypeDeclaration n = new (&hist) IIR_SubtypeDeclaration (pos, declarator, NULL, NULL, -1, type);
  return n;
}

pIIR_SubtypeDeclaration vaul_node_creator::mIIR_SubtypeDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type type)
{
  pIIR_SubtypeDeclaration n = new (&hist) IIR_SubtypeDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, type);
  return n;
}

pIIR_TypeDeclaration vaul_node_creator::mIIR_TypeDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type type)
{
  pIIR_TypeDeclaration n = new (&hist) IIR_TypeDeclaration (pos, declarator, NULL, NULL, -1, type);
  return n;
}

pIIR_TypeDeclaration vaul_node_creator::mIIR_TypeDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type type)
{
  pIIR_TypeDeclaration n = new (&hist) IIR_TypeDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, type);
  return n;
}

pIIR_ElementDeclaration vaul_node_creator::mIIR_ElementDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, int declaration_pos)
{
  pIIR_ElementDeclaration n = new (&hist) IIR_ElementDeclaration (pos, declarator, NULL, NULL, -1, subtype, declaration_pos);
  return n;
}

pIIR_ElementDeclaration vaul_node_creator::mIIR_ElementDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, int declaration_pos)
{
  pIIR_ElementDeclaration n = new (&hist) IIR_ElementDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, declaration_pos);
  return n;
}

pIIR_EnumerationLiteral vaul_node_creator::mIIR_EnumerationLiteral (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_EnumerationType subtype, int enum_pos)
{
  pIIR_EnumerationLiteral n = new (&hist) IIR_EnumerationLiteral (pos, declarator, NULL, NULL, -1, subtype, enum_pos);
  return n;
}

pIIR_EnumerationLiteral vaul_node_creator::mIIR_EnumerationLiteral (int lineno, pIIR_TextLiteral declarator, pIIR_EnumerationType subtype, int enum_pos)
{
  pIIR_EnumerationLiteral n = new (&hist) IIR_EnumerationLiteral (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, enum_pos);
  return n;
}

pIIR_PredefinedFunctionDeclaration vaul_node_creator::mIIR_PredefinedFunctionDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations, bool pure, pIIR_Type return_type)
{
  pIIR_PredefinedFunctionDeclaration n = new (&hist) IIR_PredefinedFunctionDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL, pure, return_type);
  return n;
}

pIIR_PredefinedFunctionDeclaration vaul_node_creator::mIIR_PredefinedFunctionDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations, bool pure, pIIR_Type return_type)
{
  pIIR_PredefinedFunctionDeclaration n = new (&hist) IIR_PredefinedFunctionDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL, pure, return_type);
  return n;
}

pIIR_FunctionDeclaration vaul_node_creator::mIIR_FunctionDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations, bool pure, pIIR_Type return_type)
{
  pIIR_FunctionDeclaration n = new (&hist) IIR_FunctionDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL, pure, return_type);
  return n;
}

pIIR_FunctionDeclaration vaul_node_creator::mIIR_FunctionDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations, bool pure, pIIR_Type return_type)
{
  pIIR_FunctionDeclaration n = new (&hist) IIR_FunctionDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL, pure, return_type);
  return n;
}

pIIR_PredefinedProcedureDeclaration vaul_node_creator::mIIR_PredefinedProcedureDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_PredefinedProcedureDeclaration n = new (&hist) IIR_PredefinedProcedureDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_PredefinedProcedureDeclaration vaul_node_creator::mIIR_PredefinedProcedureDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_PredefinedProcedureDeclaration n = new (&hist) IIR_PredefinedProcedureDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_ProcedureDeclaration vaul_node_creator::mIIR_ProcedureDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_ProcedureDeclaration n = new (&hist) IIR_ProcedureDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_ProcedureDeclaration vaul_node_creator::mIIR_ProcedureDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_ProcedureDeclaration n = new (&hist) IIR_ProcedureDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_SubprogramDeclaration vaul_node_creator::mIIR_SubprogramDeclaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_SubprogramDeclaration n = new (&hist) IIR_SubprogramDeclaration (pos, declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_SubprogramDeclaration vaul_node_creator::mIIR_SubprogramDeclaration (int lineno, pIIR_TextLiteral declarator, pIIR_InterfaceList interface_declarations)
{
  pIIR_SubprogramDeclaration n = new (&hist) IIR_SubprogramDeclaration (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, interface_declarations, NULL, NULL);
  return n;
}

pIIR_LoopDeclarativeRegion vaul_node_creator::mIIR_LoopDeclarativeRegion (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_LoopStatement loop_statement)
{
  pIIR_LoopDeclarativeRegion n = new (&hist) IIR_LoopDeclarativeRegion (pos, declarator, NULL, NULL, -1, NULL, NULL, loop_statement);
  return n;
}

pIIR_LoopDeclarativeRegion vaul_node_creator::mIIR_LoopDeclarativeRegion (int lineno, pIIR_TextLiteral declarator, pIIR_LoopStatement loop_statement)
{
  pIIR_LoopDeclarativeRegion n = new (&hist) IIR_LoopDeclarativeRegion (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, loop_statement);
  return n;
}

pIIR_DeclarativeRegion vaul_node_creator::mIIR_DeclarativeRegion (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_DeclarativeRegion n = new (&hist) IIR_DeclarativeRegion (pos, declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_DeclarativeRegion vaul_node_creator::mIIR_DeclarativeRegion (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_DeclarativeRegion n = new (&hist) IIR_DeclarativeRegion (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pIIR_Declaration vaul_node_creator::mIIR_Declaration (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pIIR_Declaration n = new (&hist) IIR_Declaration (pos, declarator, NULL, NULL, -1);
  return n;
}

pIIR_Declaration vaul_node_creator::mIIR_Declaration (int lineno, pIIR_TextLiteral declarator)
{
  pIIR_Declaration n = new (&hist) IIR_Declaration (make_posinfo(lineno), declarator, NULL, NULL, -1);
  return n;
}

pIIR_ArraySubtype vaul_node_creator::mIIR_ArraySubtype (pIIR_PosInfo pos, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function, pIIR_TypeList constraint)
{
  pIIR_ArraySubtype n = new (&hist) IIR_ArraySubtype (pos, NULL, base, IR_NOT_STATIC, immediate_base, resolution_function, constraint);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ArraySubtype vaul_node_creator::mIIR_ArraySubtype (int lineno, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function, pIIR_TypeList constraint)
{
  pIIR_ArraySubtype n = new (&hist) IIR_ArraySubtype (make_posinfo(lineno), NULL, base, IR_NOT_STATIC, immediate_base, resolution_function, constraint);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ArrayType vaul_node_creator::mIIR_ArrayType (pIIR_PosInfo pos, pIIR_TypeList index_types, pIIR_Type element_type)
{
  pIIR_ArrayType n = new (&hist) IIR_ArrayType (pos, NULL, NULL, IR_NOT_STATIC, index_types, element_type);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ArrayType vaul_node_creator::mIIR_ArrayType (int lineno, pIIR_TypeList index_types, pIIR_Type element_type)
{
  pIIR_ArrayType n = new (&hist) IIR_ArrayType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, index_types, element_type);
  vaul_fix_static_level (n);
  return n;
}

pIIR_FileType vaul_node_creator::mIIR_FileType (pIIR_PosInfo pos, pIIR_Type type_mark)
{
  pIIR_FileType n = new (&hist) IIR_FileType (pos, NULL, NULL, IR_NOT_STATIC, type_mark);
  vaul_fix_static_level (n);
  return n;
}

pIIR_FileType vaul_node_creator::mIIR_FileType (int lineno, pIIR_Type type_mark)
{
  pIIR_FileType n = new (&hist) IIR_FileType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, type_mark);
  vaul_fix_static_level (n);
  return n;
}

pIIR_AccessType vaul_node_creator::mIIR_AccessType (pIIR_PosInfo pos, pIIR_Type designated_type)
{
  pIIR_AccessType n = new (&hist) IIR_AccessType (pos, NULL, NULL, IR_NOT_STATIC, designated_type);
  vaul_fix_static_level (n);
  return n;
}

pIIR_AccessType vaul_node_creator::mIIR_AccessType (int lineno, pIIR_Type designated_type)
{
  pIIR_AccessType n = new (&hist) IIR_AccessType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, designated_type);
  vaul_fix_static_level (n);
  return n;
}

pIIR_RecordSubtype vaul_node_creator::mIIR_RecordSubtype (pIIR_PosInfo pos, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function)
{
  pIIR_RecordSubtype n = new (&hist) IIR_RecordSubtype (pos, NULL, base, IR_NOT_STATIC, immediate_base, resolution_function);
  vaul_fix_static_level (n);
  return n;
}

pIIR_RecordSubtype vaul_node_creator::mIIR_RecordSubtype (int lineno, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function)
{
  pIIR_RecordSubtype n = new (&hist) IIR_RecordSubtype (make_posinfo(lineno), NULL, base, IR_NOT_STATIC, immediate_base, resolution_function);
  vaul_fix_static_level (n);
  return n;
}

pIIR_RecordType vaul_node_creator::mIIR_RecordType (pIIR_PosInfo pos, pIIR_ElementDeclarationList element_declarations)
{
  pIIR_RecordType n = new (&hist) IIR_RecordType (pos, NULL, NULL, IR_NOT_STATIC, element_declarations);
  vaul_fix_static_level (n);
  return n;
}

pIIR_RecordType vaul_node_creator::mIIR_RecordType (int lineno, pIIR_ElementDeclarationList element_declarations)
{
  pIIR_RecordType n = new (&hist) IIR_RecordType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, element_declarations);
  vaul_fix_static_level (n);
  return n;
}

pIIR_CompositeType vaul_node_creator::mIIR_CompositeType (pIIR_PosInfo pos)
{
  pIIR_CompositeType n = new (&hist) IIR_CompositeType (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_CompositeType vaul_node_creator::mIIR_CompositeType (int lineno)
{
  pIIR_CompositeType n = new (&hist) IIR_CompositeType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_PhysicalType vaul_node_creator::mIIR_PhysicalType (pIIR_PosInfo pos, pIIR_PhysicalUnit primary_unit, pIIR_UnitList units)
{
  pIIR_PhysicalType n = new (&hist) IIR_PhysicalType (pos, NULL, NULL, IR_NOT_STATIC, primary_unit, units);
  vaul_fix_static_level (n);
  return n;
}

pIIR_PhysicalType vaul_node_creator::mIIR_PhysicalType (int lineno, pIIR_PhysicalUnit primary_unit, pIIR_UnitList units)
{
  pIIR_PhysicalType n = new (&hist) IIR_PhysicalType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, primary_unit, units);
  vaul_fix_static_level (n);
  return n;
}

pIIR_FloatingType vaul_node_creator::mIIR_FloatingType (pIIR_PosInfo pos)
{
  pIIR_FloatingType n = new (&hist) IIR_FloatingType (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_FloatingType vaul_node_creator::mIIR_FloatingType (int lineno)
{
  pIIR_FloatingType n = new (&hist) IIR_FloatingType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_IntegerType vaul_node_creator::mIIR_IntegerType (pIIR_PosInfo pos)
{
  pIIR_IntegerType n = new (&hist) IIR_IntegerType (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_IntegerType vaul_node_creator::mIIR_IntegerType (int lineno)
{
  pIIR_IntegerType n = new (&hist) IIR_IntegerType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_EnumerationType vaul_node_creator::mIIR_EnumerationType (pIIR_PosInfo pos, pIIR_EnumerationLiteralList enumeration_literals)
{
  pIIR_EnumerationType n = new (&hist) IIR_EnumerationType (pos, NULL, NULL, IR_NOT_STATIC, enumeration_literals);
  vaul_fix_static_level (n);
  return n;
}

pIIR_EnumerationType vaul_node_creator::mIIR_EnumerationType (int lineno, pIIR_EnumerationLiteralList enumeration_literals)
{
  pIIR_EnumerationType n = new (&hist) IIR_EnumerationType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, enumeration_literals);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ScalarSubtype vaul_node_creator::mIIR_ScalarSubtype (pIIR_PosInfo pos, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function, pIIR_Range range)
{
  pIIR_ScalarSubtype n = new (&hist) IIR_ScalarSubtype (pos, NULL, base, IR_NOT_STATIC, immediate_base, resolution_function, range);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ScalarSubtype vaul_node_creator::mIIR_ScalarSubtype (int lineno, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function, pIIR_Range range)
{
  pIIR_ScalarSubtype n = new (&hist) IIR_ScalarSubtype (make_posinfo(lineno), NULL, base, IR_NOT_STATIC, immediate_base, resolution_function, range);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ScalarType vaul_node_creator::mIIR_ScalarType (pIIR_PosInfo pos)
{
  pIIR_ScalarType n = new (&hist) IIR_ScalarType (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_ScalarType vaul_node_creator::mIIR_ScalarType (int lineno)
{
  pIIR_ScalarType n = new (&hist) IIR_ScalarType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_Subtype vaul_node_creator::mIIR_Subtype (pIIR_PosInfo pos, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function)
{
  pIIR_Subtype n = new (&hist) IIR_Subtype (pos, NULL, base, IR_NOT_STATIC, immediate_base, resolution_function);
  vaul_fix_static_level (n);
  return n;
}

pIIR_Subtype vaul_node_creator::mIIR_Subtype (int lineno, pIIR_Type base, pIIR_Type immediate_base, pIIR_FunctionDeclaration resolution_function)
{
  pIIR_Subtype n = new (&hist) IIR_Subtype (make_posinfo(lineno), NULL, base, IR_NOT_STATIC, immediate_base, resolution_function);
  vaul_fix_static_level (n);
  return n;
}

pIIR_Type vaul_node_creator::mIIR_Type (pIIR_PosInfo pos)
{
  pIIR_Type n = new (&hist) IIR_Type (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_Type vaul_node_creator::mIIR_Type (int lineno)
{
  pIIR_Type n = new (&hist) IIR_Type (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pIIR_Attr_ArrayREVERSE_RANGE vaul_node_creator::mIIR_Attr_ArrayREVERSE_RANGE (pIIR_PosInfo pos, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_Attr_ArrayREVERSE_RANGE n = new (&hist) IIR_Attr_ArrayREVERSE_RANGE (pos, type, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayREVERSE_RANGE vaul_node_creator::mIIR_Attr_ArrayREVERSE_RANGE (int lineno, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_Attr_ArrayREVERSE_RANGE n = new (&hist) IIR_Attr_ArrayREVERSE_RANGE (make_posinfo(lineno), type, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayRANGE vaul_node_creator::mIIR_Attr_ArrayRANGE (pIIR_PosInfo pos, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_Attr_ArrayRANGE n = new (&hist) IIR_Attr_ArrayRANGE (pos, type, array, array_type, index);
  return n;
}

pIIR_Attr_ArrayRANGE vaul_node_creator::mIIR_Attr_ArrayRANGE (int lineno, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_Attr_ArrayRANGE n = new (&hist) IIR_Attr_ArrayRANGE (make_posinfo(lineno), type, array, array_type, index);
  return n;
}

pIIR_ArrayRange vaul_node_creator::mIIR_ArrayRange (pIIR_PosInfo pos, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_ArrayRange n = new (&hist) IIR_ArrayRange (pos, type, array, array_type, index);
  return n;
}

pIIR_ArrayRange vaul_node_creator::mIIR_ArrayRange (int lineno, pIIR_Type type, pIIR_Expression array, pIIR_Type array_type, pIIR_Expression index)
{
  pIIR_ArrayRange n = new (&hist) IIR_ArrayRange (make_posinfo(lineno), type, array, array_type, index);
  return n;
}

pIIR_ExplicitRange vaul_node_creator::mIIR_ExplicitRange (pIIR_PosInfo pos, pIIR_Expression left, pIIR_Expression right, IR_Direction direction)
{
  pIIR_ExplicitRange n = new (&hist) IIR_ExplicitRange (pos, left, right, direction);
  return n;
}

pIIR_ExplicitRange vaul_node_creator::mIIR_ExplicitRange (int lineno, pIIR_Expression left, pIIR_Expression right, IR_Direction direction)
{
  pIIR_ExplicitRange n = new (&hist) IIR_ExplicitRange (make_posinfo(lineno), left, right, direction);
  return n;
}

pIIR_Range vaul_node_creator::mIIR_Range (pIIR_PosInfo pos)
{
  pIIR_Range n = new (&hist) IIR_Range (pos);
  return n;
}

pIIR_Range vaul_node_creator::mIIR_Range (int lineno)
{
  pIIR_Range n = new (&hist) IIR_Range (make_posinfo(lineno));
  return n;
}

pIIR_IdentifierList vaul_node_creator::mIIR_IdentifierList (pIIR_PosInfo pos, pIIR_Identifier first, pIIR_IdentifierList rest)
{
  pIIR_IdentifierList n = new (&hist) IIR_IdentifierList (pos, first, rest);
  return n;
}

pIIR_IdentifierList vaul_node_creator::mIIR_IdentifierList (int lineno, pIIR_Identifier first, pIIR_IdentifierList rest)
{
  pIIR_IdentifierList n = new (&hist) IIR_IdentifierList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ConfigurationSpecificationList vaul_node_creator::mIIR_ConfigurationSpecificationList (pIIR_PosInfo pos, pIIR_ConfigurationSpecification first, pIIR_ConfigurationSpecificationList rest)
{
  pIIR_ConfigurationSpecificationList n = new (&hist) IIR_ConfigurationSpecificationList (pos, first, rest);
  return n;
}

pIIR_ConfigurationSpecificationList vaul_node_creator::mIIR_ConfigurationSpecificationList (int lineno, pIIR_ConfigurationSpecification first, pIIR_ConfigurationSpecificationList rest)
{
  pIIR_ConfigurationSpecificationList n = new (&hist) IIR_ConfigurationSpecificationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ComponentInstantiationList vaul_node_creator::mIIR_ComponentInstantiationList (pIIR_PosInfo pos, pIIR_ComponentInstantiationStatement first, pIIR_ComponentInstantiationList rest)
{
  pIIR_ComponentInstantiationList n = new (&hist) IIR_ComponentInstantiationList (pos, first, rest);
  return n;
}

pIIR_ComponentInstantiationList vaul_node_creator::mIIR_ComponentInstantiationList (int lineno, pIIR_ComponentInstantiationStatement first, pIIR_ComponentInstantiationList rest)
{
  pIIR_ComponentInstantiationList n = new (&hist) IIR_ComponentInstantiationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ElementAssociationList vaul_node_creator::mIIR_ElementAssociationList (pIIR_PosInfo pos, pIIR_ElementAssociation first, pIIR_ElementAssociationList rest)
{
  pIIR_ElementAssociationList n = new (&hist) IIR_ElementAssociationList (pos, first, rest);
  return n;
}

pIIR_ElementAssociationList vaul_node_creator::mIIR_ElementAssociationList (int lineno, pIIR_ElementAssociation first, pIIR_ElementAssociationList rest)
{
  pIIR_ElementAssociationList n = new (&hist) IIR_ElementAssociationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_IndexedAssociationList vaul_node_creator::mIIR_IndexedAssociationList (pIIR_PosInfo pos, pIIR_IndexedAssociation first, pIIR_IndexedAssociationList rest)
{
  pIIR_IndexedAssociationList n = new (&hist) IIR_IndexedAssociationList (pos, first, rest);
  return n;
}

pIIR_IndexedAssociationList vaul_node_creator::mIIR_IndexedAssociationList (int lineno, pIIR_IndexedAssociation first, pIIR_IndexedAssociationList rest)
{
  pIIR_IndexedAssociationList n = new (&hist) IIR_IndexedAssociationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ExpressionList vaul_node_creator::mIIR_ExpressionList (pIIR_PosInfo pos, pIIR_Expression first, pIIR_ExpressionList rest)
{
  pIIR_ExpressionList n = new (&hist) IIR_ExpressionList (pos, first, rest);
  return n;
}

pIIR_ExpressionList vaul_node_creator::mIIR_ExpressionList (int lineno, pIIR_Expression first, pIIR_ExpressionList rest)
{
  pIIR_ExpressionList n = new (&hist) IIR_ExpressionList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_TypeList vaul_node_creator::mIIR_TypeList (pIIR_PosInfo pos, pIIR_Type first, pIIR_TypeList rest)
{
  pIIR_TypeList n = new (&hist) IIR_TypeList (pos, first, rest);
  return n;
}

pIIR_TypeList vaul_node_creator::mIIR_TypeList (int lineno, pIIR_Type first, pIIR_TypeList rest)
{
  pIIR_TypeList n = new (&hist) IIR_TypeList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_WaveformList vaul_node_creator::mIIR_WaveformList (pIIR_PosInfo pos, pIIR_WaveformElement first, pIIR_WaveformList rest)
{
  pIIR_WaveformList n = new (&hist) IIR_WaveformList (pos, first, rest);
  return n;
}

pIIR_WaveformList vaul_node_creator::mIIR_WaveformList (int lineno, pIIR_WaveformElement first, pIIR_WaveformList rest)
{
  pIIR_WaveformList n = new (&hist) IIR_WaveformList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_UnitList vaul_node_creator::mIIR_UnitList (pIIR_PosInfo pos, pIIR_PhysicalUnit first, pIIR_UnitList rest)
{
  pIIR_UnitList n = new (&hist) IIR_UnitList (pos, first, rest);
  return n;
}

pIIR_UnitList vaul_node_creator::mIIR_UnitList (int lineno, pIIR_PhysicalUnit first, pIIR_UnitList rest)
{
  pIIR_UnitList n = new (&hist) IIR_UnitList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_SequentialStatementList vaul_node_creator::mIIR_SequentialStatementList (pIIR_PosInfo pos, pIIR_SequentialStatement first, pIIR_SequentialStatementList rest)
{
  pIIR_SequentialStatementList n = new (&hist) IIR_SequentialStatementList (pos, first, rest);
  return n;
}

pIIR_SequentialStatementList vaul_node_creator::mIIR_SequentialStatementList (int lineno, pIIR_SequentialStatement first, pIIR_SequentialStatementList rest)
{
  pIIR_SequentialStatementList n = new (&hist) IIR_SequentialStatementList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_LibraryUnitList vaul_node_creator::mIIR_LibraryUnitList (pIIR_PosInfo pos, pIIR_LibraryUnit first, pIIR_LibraryUnitList rest)
{
  pIIR_LibraryUnitList n = new (&hist) IIR_LibraryUnitList (pos, first, rest);
  return n;
}

pIIR_LibraryUnitList vaul_node_creator::mIIR_LibraryUnitList (int lineno, pIIR_LibraryUnit first, pIIR_LibraryUnitList rest)
{
  pIIR_LibraryUnitList n = new (&hist) IIR_LibraryUnitList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_InterfaceList vaul_node_creator::mIIR_InterfaceList (pIIR_PosInfo pos, pIIR_InterfaceDeclaration first, pIIR_InterfaceList rest)
{
  pIIR_InterfaceList n = new (&hist) IIR_InterfaceList (pos, first, rest);
  return n;
}

pIIR_InterfaceList vaul_node_creator::mIIR_InterfaceList (int lineno, pIIR_InterfaceDeclaration first, pIIR_InterfaceList rest)
{
  pIIR_InterfaceList n = new (&hist) IIR_InterfaceList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_EnumerationLiteralList vaul_node_creator::mIIR_EnumerationLiteralList (pIIR_PosInfo pos, pIIR_EnumerationLiteral first, pIIR_EnumerationLiteralList rest)
{
  pIIR_EnumerationLiteralList n = new (&hist) IIR_EnumerationLiteralList (pos, first, rest);
  return n;
}

pIIR_EnumerationLiteralList vaul_node_creator::mIIR_EnumerationLiteralList (int lineno, pIIR_EnumerationLiteral first, pIIR_EnumerationLiteralList rest)
{
  pIIR_EnumerationLiteralList n = new (&hist) IIR_EnumerationLiteralList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_EntityClassEntryList vaul_node_creator::mIIR_EntityClassEntryList (pIIR_PosInfo pos, pIIR_EntityClassEntry first, pIIR_EntityClassEntryList rest)
{
  pIIR_EntityClassEntryList n = new (&hist) IIR_EntityClassEntryList (pos, first, rest);
  return n;
}

pIIR_EntityClassEntryList vaul_node_creator::mIIR_EntityClassEntryList (int lineno, pIIR_EntityClassEntry first, pIIR_EntityClassEntryList rest)
{
  pIIR_EntityClassEntryList n = new (&hist) IIR_EntityClassEntryList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ElementDeclarationList vaul_node_creator::mIIR_ElementDeclarationList (pIIR_PosInfo pos, pIIR_ElementDeclaration first, pIIR_ElementDeclarationList rest)
{
  pIIR_ElementDeclarationList n = new (&hist) IIR_ElementDeclarationList (pos, first, rest);
  return n;
}

pIIR_ElementDeclarationList vaul_node_creator::mIIR_ElementDeclarationList (int lineno, pIIR_ElementDeclaration first, pIIR_ElementDeclarationList rest)
{
  pIIR_ElementDeclarationList n = new (&hist) IIR_ElementDeclarationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_DeclarationList vaul_node_creator::mIIR_DeclarationList (pIIR_PosInfo pos, pIIR_Declaration first, pIIR_DeclarationList rest)
{
  pIIR_DeclarationList n = new (&hist) IIR_DeclarationList (pos, first, rest);
  return n;
}

pIIR_DeclarationList vaul_node_creator::mIIR_DeclarationList (int lineno, pIIR_Declaration first, pIIR_DeclarationList rest)
{
  pIIR_DeclarationList n = new (&hist) IIR_DeclarationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ConfigurationItemList vaul_node_creator::mIIR_ConfigurationItemList (pIIR_PosInfo pos, pIIR_ConfigurationItem first, pIIR_ConfigurationItemList rest)
{
  pIIR_ConfigurationItemList n = new (&hist) IIR_ConfigurationItemList (pos, first, rest);
  return n;
}

pIIR_ConfigurationItemList vaul_node_creator::mIIR_ConfigurationItemList (int lineno, pIIR_ConfigurationItem first, pIIR_ConfigurationItemList rest)
{
  pIIR_ConfigurationItemList n = new (&hist) IIR_ConfigurationItemList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ConcurrentStatementList vaul_node_creator::mIIR_ConcurrentStatementList (pIIR_PosInfo pos, pIIR_ConcurrentStatement first, pIIR_ConcurrentStatementList rest)
{
  pIIR_ConcurrentStatementList n = new (&hist) IIR_ConcurrentStatementList (pos, first, rest);
  return n;
}

pIIR_ConcurrentStatementList vaul_node_creator::mIIR_ConcurrentStatementList (int lineno, pIIR_ConcurrentStatement first, pIIR_ConcurrentStatementList rest)
{
  pIIR_ConcurrentStatementList n = new (&hist) IIR_ConcurrentStatementList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_ChoiceList vaul_node_creator::mIIR_ChoiceList (pIIR_PosInfo pos, pIIR_Choice first, pIIR_ChoiceList rest)
{
  pIIR_ChoiceList n = new (&hist) IIR_ChoiceList (pos, first, rest);
  return n;
}

pIIR_ChoiceList vaul_node_creator::mIIR_ChoiceList (int lineno, pIIR_Choice first, pIIR_ChoiceList rest)
{
  pIIR_ChoiceList n = new (&hist) IIR_ChoiceList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_CaseStatementAlternativeList vaul_node_creator::mIIR_CaseStatementAlternativeList (pIIR_PosInfo pos, pIIR_CaseStatementAlternative first, pIIR_CaseStatementAlternativeList rest)
{
  pIIR_CaseStatementAlternativeList n = new (&hist) IIR_CaseStatementAlternativeList (pos, first, rest);
  return n;
}

pIIR_CaseStatementAlternativeList vaul_node_creator::mIIR_CaseStatementAlternativeList (int lineno, pIIR_CaseStatementAlternative first, pIIR_CaseStatementAlternativeList rest)
{
  pIIR_CaseStatementAlternativeList n = new (&hist) IIR_CaseStatementAlternativeList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_AttributeValueList vaul_node_creator::mIIR_AttributeValueList (pIIR_PosInfo pos, pIIR_AttributeValue first, pIIR_AttributeValueList rest)
{
  pIIR_AttributeValueList n = new (&hist) IIR_AttributeValueList (pos, first, rest);
  return n;
}

pIIR_AttributeValueList vaul_node_creator::mIIR_AttributeValueList (int lineno, pIIR_AttributeValue first, pIIR_AttributeValueList rest)
{
  pIIR_AttributeValueList n = new (&hist) IIR_AttributeValueList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_AssociationList vaul_node_creator::mIIR_AssociationList (pIIR_PosInfo pos, pIIR_AssociationElement first, pIIR_AssociationList rest)
{
  pIIR_AssociationList n = new (&hist) IIR_AssociationList (pos, first, rest);
  return n;
}

pIIR_AssociationList vaul_node_creator::mIIR_AssociationList (int lineno, pIIR_AssociationElement first, pIIR_AssociationList rest)
{
  pIIR_AssociationList n = new (&hist) IIR_AssociationList (make_posinfo(lineno), first, rest);
  return n;
}

pIIR_List vaul_node_creator::mIIR_List (pIIR_PosInfo pos)
{
  pIIR_List n = new (&hist) IIR_List (pos);
  return n;
}

pIIR_List vaul_node_creator::mIIR_List (int lineno)
{
  pIIR_List n = new (&hist) IIR_List (make_posinfo(lineno));
  return n;
}

pIIR_AttributeValue vaul_node_creator::mIIR_AttributeValue (pIIR_PosInfo pos, pIIR_Expression value, pIIR_AttributeDeclaration attribute)
{
  pIIR_AttributeValue n = new (&hist) IIR_AttributeValue (pos, value, attribute);
  return n;
}

pIIR_AttributeValue vaul_node_creator::mIIR_AttributeValue (int lineno, pIIR_Expression value, pIIR_AttributeDeclaration attribute)
{
  pIIR_AttributeValue n = new (&hist) IIR_AttributeValue (make_posinfo(lineno), value, attribute);
  return n;
}

pIIR_OthersIndexedAssociation vaul_node_creator::mIIR_OthersIndexedAssociation (pIIR_PosInfo pos, pIIR_Expression value)
{
  pIIR_OthersIndexedAssociation n = new (&hist) IIR_OthersIndexedAssociation (pos, value);
  return n;
}

pIIR_OthersIndexedAssociation vaul_node_creator::mIIR_OthersIndexedAssociation (int lineno, pIIR_Expression value)
{
  pIIR_OthersIndexedAssociation n = new (&hist) IIR_OthersIndexedAssociation (make_posinfo(lineno), value);
  return n;
}

pIIR_SliceIndexedAssociation vaul_node_creator::mIIR_SliceIndexedAssociation (pIIR_PosInfo pos, pIIR_Expression value, pIIR_Range index_range)
{
  pIIR_SliceIndexedAssociation n = new (&hist) IIR_SliceIndexedAssociation (pos, value, index_range);
  return n;
}

pIIR_SliceIndexedAssociation vaul_node_creator::mIIR_SliceIndexedAssociation (int lineno, pIIR_Expression value, pIIR_Range index_range)
{
  pIIR_SliceIndexedAssociation n = new (&hist) IIR_SliceIndexedAssociation (make_posinfo(lineno), value, index_range);
  return n;
}

pIIR_RangeIndexedAssociation vaul_node_creator::mIIR_RangeIndexedAssociation (pIIR_PosInfo pos, pIIR_Expression value, pIIR_Range index_range)
{
  pIIR_RangeIndexedAssociation n = new (&hist) IIR_RangeIndexedAssociation (pos, value, index_range);
  return n;
}

pIIR_RangeIndexedAssociation vaul_node_creator::mIIR_RangeIndexedAssociation (int lineno, pIIR_Expression value, pIIR_Range index_range)
{
  pIIR_RangeIndexedAssociation n = new (&hist) IIR_RangeIndexedAssociation (make_posinfo(lineno), value, index_range);
  return n;
}

pIIR_SingleIndexedAssociation vaul_node_creator::mIIR_SingleIndexedAssociation (pIIR_PosInfo pos, pIIR_Expression value, pIIR_Expression index)
{
  pIIR_SingleIndexedAssociation n = new (&hist) IIR_SingleIndexedAssociation (pos, value, index);
  return n;
}

pIIR_SingleIndexedAssociation vaul_node_creator::mIIR_SingleIndexedAssociation (int lineno, pIIR_Expression value, pIIR_Expression index)
{
  pIIR_SingleIndexedAssociation n = new (&hist) IIR_SingleIndexedAssociation (make_posinfo(lineno), value, index);
  return n;
}

pIIR_IndexedAssociation vaul_node_creator::mIIR_IndexedAssociation (pIIR_PosInfo pos, pIIR_Expression value)
{
  pIIR_IndexedAssociation n = new (&hist) IIR_IndexedAssociation (pos, value);
  return n;
}

pIIR_IndexedAssociation vaul_node_creator::mIIR_IndexedAssociation (int lineno, pIIR_Expression value)
{
  pIIR_IndexedAssociation n = new (&hist) IIR_IndexedAssociation (make_posinfo(lineno), value);
  return n;
}

pIIR_ElementAssociation vaul_node_creator::mIIR_ElementAssociation (pIIR_PosInfo pos, pIIR_ElementDeclaration element, pIIR_Expression value)
{
  pIIR_ElementAssociation n = new (&hist) IIR_ElementAssociation (pos, element, value);
  return n;
}

pIIR_ElementAssociation vaul_node_creator::mIIR_ElementAssociation (int lineno, pIIR_ElementDeclaration element, pIIR_Expression value)
{
  pIIR_ElementAssociation n = new (&hist) IIR_ElementAssociation (make_posinfo(lineno), element, value);
  return n;
}

pIIR_WaveformElement vaul_node_creator::mIIR_WaveformElement (pIIR_PosInfo pos, pIIR_Expression value, pIIR_Expression time)
{
  pIIR_WaveformElement n = new (&hist) IIR_WaveformElement (pos, value, time);
  return n;
}

pIIR_WaveformElement vaul_node_creator::mIIR_WaveformElement (int lineno, pIIR_Expression value, pIIR_Expression time)
{
  pIIR_WaveformElement n = new (&hist) IIR_WaveformElement (make_posinfo(lineno), value, time);
  return n;
}

pIIR_EntityClassEntry vaul_node_creator::mIIR_EntityClassEntry (pIIR_PosInfo pos, IR_Kind entity_kind, bool is_boxed)
{
  pIIR_EntityClassEntry n = new (&hist) IIR_EntityClassEntry (pos, entity_kind, is_boxed);
  return n;
}

pIIR_EntityClassEntry vaul_node_creator::mIIR_EntityClassEntry (int lineno, IR_Kind entity_kind, bool is_boxed)
{
  pIIR_EntityClassEntry n = new (&hist) IIR_EntityClassEntry (make_posinfo(lineno), entity_kind, is_boxed);
  return n;
}

pIIR_ChoiceByOthers vaul_node_creator::mIIR_ChoiceByOthers (pIIR_PosInfo pos)
{
  pIIR_ChoiceByOthers n = new (&hist) IIR_ChoiceByOthers (pos);
  return n;
}

pIIR_ChoiceByOthers vaul_node_creator::mIIR_ChoiceByOthers (int lineno)
{
  pIIR_ChoiceByOthers n = new (&hist) IIR_ChoiceByOthers (make_posinfo(lineno));
  return n;
}

pIIR_ChoiceByRange vaul_node_creator::mIIR_ChoiceByRange (pIIR_PosInfo pos, pIIR_Range range)
{
  pIIR_ChoiceByRange n = new (&hist) IIR_ChoiceByRange (pos, range);
  return n;
}

pIIR_ChoiceByRange vaul_node_creator::mIIR_ChoiceByRange (int lineno, pIIR_Range range)
{
  pIIR_ChoiceByRange n = new (&hist) IIR_ChoiceByRange (make_posinfo(lineno), range);
  return n;
}

pIIR_ChoiceByExpression vaul_node_creator::mIIR_ChoiceByExpression (pIIR_PosInfo pos, pIIR_Expression value)
{
  pIIR_ChoiceByExpression n = new (&hist) IIR_ChoiceByExpression (pos, value);
  return n;
}

pIIR_ChoiceByExpression vaul_node_creator::mIIR_ChoiceByExpression (int lineno, pIIR_Expression value)
{
  pIIR_ChoiceByExpression n = new (&hist) IIR_ChoiceByExpression (make_posinfo(lineno), value);
  return n;
}

pIIR_Choice vaul_node_creator::mIIR_Choice (pIIR_PosInfo pos)
{
  pIIR_Choice n = new (&hist) IIR_Choice (pos);
  return n;
}

pIIR_Choice vaul_node_creator::mIIR_Choice (int lineno)
{
  pIIR_Choice n = new (&hist) IIR_Choice (make_posinfo(lineno));
  return n;
}

pIIR_CaseStatementAlternative vaul_node_creator::mIIR_CaseStatementAlternative (pIIR_PosInfo pos, pIIR_SequentialStatementList sequence_of_statements, pIIR_ChoiceList choices)
{
  pIIR_CaseStatementAlternative n = new (&hist) IIR_CaseStatementAlternative (pos, sequence_of_statements, choices);
  return n;
}

pIIR_CaseStatementAlternative vaul_node_creator::mIIR_CaseStatementAlternative (int lineno, pIIR_SequentialStatementList sequence_of_statements, pIIR_ChoiceList choices)
{
  pIIR_CaseStatementAlternative n = new (&hist) IIR_CaseStatementAlternative (make_posinfo(lineno), sequence_of_statements, choices);
  return n;
}

pIIR_AssociationElementOpen vaul_node_creator::mIIR_AssociationElementOpen (pIIR_PosInfo pos, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElementOpen n = new (&hist) IIR_AssociationElementOpen (pos, formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_AssociationElementOpen vaul_node_creator::mIIR_AssociationElementOpen (int lineno, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElementOpen n = new (&hist) IIR_AssociationElementOpen (make_posinfo(lineno), formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_AssociationElementByExpression vaul_node_creator::mIIR_AssociationElementByExpression (pIIR_PosInfo pos, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElementByExpression n = new (&hist) IIR_AssociationElementByExpression (pos, formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_AssociationElementByExpression vaul_node_creator::mIIR_AssociationElementByExpression (int lineno, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElementByExpression n = new (&hist) IIR_AssociationElementByExpression (make_posinfo(lineno), formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_AssociationElement vaul_node_creator::mIIR_AssociationElement (pIIR_PosInfo pos, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElement n = new (&hist) IIR_AssociationElement (pos, formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_AssociationElement vaul_node_creator::mIIR_AssociationElement (int lineno, pIIR_ObjectReference formal, pIIR_InterfaceDeclaration formal_declaration, pIIR_Declaration formal_conversion, pIIR_Expression actual, pIIR_Declaration actual_conversion)
{
  pIIR_AssociationElement n = new (&hist) IIR_AssociationElement (make_posinfo(lineno), formal, formal_declaration, formal_conversion, actual, actual_conversion);
  return n;
}

pIIR_Tuple vaul_node_creator::mIIR_Tuple (pIIR_PosInfo pos)
{
  pIIR_Tuple n = new (&hist) IIR_Tuple (pos);
  return n;
}

pIIR_Tuple vaul_node_creator::mIIR_Tuple (int lineno)
{
  pIIR_Tuple n = new (&hist) IIR_Tuple (make_posinfo(lineno));
  return n;
}

pIIR_FloatingPointLiteral vaul_node_creator::mIIR_FloatingPointLiteral (pIIR_PosInfo pos, IR_String text)
{
  pIIR_FloatingPointLiteral n = new (&hist) IIR_FloatingPointLiteral (pos, text);
  return n;
}

pIIR_FloatingPointLiteral vaul_node_creator::mIIR_FloatingPointLiteral (int lineno, IR_String text)
{
  pIIR_FloatingPointLiteral n = new (&hist) IIR_FloatingPointLiteral (make_posinfo(lineno), text);
  return n;
}

pIIR_FloatingPointLiteral vaul_node_creator::mIIR_FloatingPointLiteral (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_FloatingPointLiteral n = new (&hist) IIR_FloatingPointLiteral (pos, IR_String(str, len));
  return n;
}

pIIR_FloatingPointLiteral vaul_node_creator::mIIR_FloatingPointLiteral (int lineno, IR_Character *str, int len)
{
  pIIR_FloatingPointLiteral n = new (&hist) IIR_FloatingPointLiteral (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_IntegerLiteral vaul_node_creator::mIIR_IntegerLiteral (pIIR_PosInfo pos, IR_String text)
{
  pIIR_IntegerLiteral n = new (&hist) IIR_IntegerLiteral (pos, text);
  return n;
}

pIIR_IntegerLiteral vaul_node_creator::mIIR_IntegerLiteral (int lineno, IR_String text)
{
  pIIR_IntegerLiteral n = new (&hist) IIR_IntegerLiteral (make_posinfo(lineno), text);
  return n;
}

pIIR_IntegerLiteral vaul_node_creator::mIIR_IntegerLiteral (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_IntegerLiteral n = new (&hist) IIR_IntegerLiteral (pos, IR_String(str, len));
  return n;
}

pIIR_IntegerLiteral vaul_node_creator::mIIR_IntegerLiteral (int lineno, IR_Character *str, int len)
{
  pIIR_IntegerLiteral n = new (&hist) IIR_IntegerLiteral (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_AbstractLiteral vaul_node_creator::mIIR_AbstractLiteral (pIIR_PosInfo pos)
{
  pIIR_AbstractLiteral n = new (&hist) IIR_AbstractLiteral (pos);
  return n;
}

pIIR_AbstractLiteral vaul_node_creator::mIIR_AbstractLiteral (int lineno)
{
  pIIR_AbstractLiteral n = new (&hist) IIR_AbstractLiteral (make_posinfo(lineno));
  return n;
}

pIIR_StringLiteral vaul_node_creator::mIIR_StringLiteral (pIIR_PosInfo pos, IR_String text)
{
  pIIR_StringLiteral n = new (&hist) IIR_StringLiteral (pos, text);
  return n;
}

pIIR_StringLiteral vaul_node_creator::mIIR_StringLiteral (int lineno, IR_String text)
{
  pIIR_StringLiteral n = new (&hist) IIR_StringLiteral (make_posinfo(lineno), text);
  return n;
}

pIIR_StringLiteral vaul_node_creator::mIIR_StringLiteral (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_StringLiteral n = new (&hist) IIR_StringLiteral (pos, IR_String(str, len));
  return n;
}

pIIR_StringLiteral vaul_node_creator::mIIR_StringLiteral (int lineno, IR_Character *str, int len)
{
  pIIR_StringLiteral n = new (&hist) IIR_StringLiteral (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_CharacterLiteral vaul_node_creator::mIIR_CharacterLiteral (pIIR_PosInfo pos, IR_String text)
{
  pIIR_CharacterLiteral n = new (&hist) IIR_CharacterLiteral (pos, text);
  return n;
}

pIIR_CharacterLiteral vaul_node_creator::mIIR_CharacterLiteral (int lineno, IR_String text)
{
  pIIR_CharacterLiteral n = new (&hist) IIR_CharacterLiteral (make_posinfo(lineno), text);
  return n;
}

pIIR_CharacterLiteral vaul_node_creator::mIIR_CharacterLiteral (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_CharacterLiteral n = new (&hist) IIR_CharacterLiteral (pos, IR_String(str, len));
  return n;
}

pIIR_CharacterLiteral vaul_node_creator::mIIR_CharacterLiteral (int lineno, IR_Character *str, int len)
{
  pIIR_CharacterLiteral n = new (&hist) IIR_CharacterLiteral (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_Identifier vaul_node_creator::mIIR_Identifier (pIIR_PosInfo pos, IR_String text)
{
  pIIR_Identifier n = new (&hist) IIR_Identifier (pos, text);
  return n;
}

pIIR_Identifier vaul_node_creator::mIIR_Identifier (int lineno, IR_String text)
{
  pIIR_Identifier n = new (&hist) IIR_Identifier (make_posinfo(lineno), text);
  return n;
}

pIIR_Identifier vaul_node_creator::mIIR_Identifier (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_Identifier n = new (&hist) IIR_Identifier (pos, IR_String(str, len));
  return n;
}

pIIR_Identifier vaul_node_creator::mIIR_Identifier (int lineno, IR_Character *str, int len)
{
  pIIR_Identifier n = new (&hist) IIR_Identifier (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_TextLiteral vaul_node_creator::mIIR_TextLiteral (pIIR_PosInfo pos, IR_String text)
{
  pIIR_TextLiteral n = new (&hist) IIR_TextLiteral (pos, text);
  return n;
}

pIIR_TextLiteral vaul_node_creator::mIIR_TextLiteral (int lineno, IR_String text)
{
  pIIR_TextLiteral n = new (&hist) IIR_TextLiteral (make_posinfo(lineno), text);
  return n;
}

pIIR_TextLiteral vaul_node_creator::mIIR_TextLiteral (pIIR_PosInfo pos, IR_Character *str, int len)
{
  pIIR_TextLiteral n = new (&hist) IIR_TextLiteral (pos, IR_String(str, len));
  return n;
}

pIIR_TextLiteral vaul_node_creator::mIIR_TextLiteral (int lineno, IR_Character *str, int len)
{
  pIIR_TextLiteral n = new (&hist) IIR_TextLiteral (make_posinfo(lineno), IR_String(str, len));
  return n;
}

pIIR_Literal vaul_node_creator::mIIR_Literal (pIIR_PosInfo pos)
{
  pIIR_Literal n = new (&hist) IIR_Literal (pos);
  return n;
}

pIIR_Literal vaul_node_creator::mIIR_Literal (int lineno)
{
  pIIR_Literal n = new (&hist) IIR_Literal (make_posinfo(lineno));
  return n;
}

pIIR_Signature vaul_node_creator::mIIR_Signature (pIIR_PosInfo pos)
{
  pIIR_Signature n = new (&hist) IIR_Signature (pos);
  return n;
}

pIIR_Signature vaul_node_creator::mIIR_Signature (int lineno)
{
  pIIR_Signature n = new (&hist) IIR_Signature (make_posinfo(lineno));
  return n;
}

pIIR_Dummy vaul_node_creator::mIIR_Dummy (pIIR_PosInfo pos)
{
  pIIR_Dummy n = new (&hist) IIR_Dummy (pos);
  return n;
}

pIIR_Dummy vaul_node_creator::mIIR_Dummy (int lineno)
{
  pIIR_Dummy n = new (&hist) IIR_Dummy (make_posinfo(lineno));
  return n;
}

pIIR_Root vaul_node_creator::mIIR_Root (pIIR_PosInfo pos)
{
  pIIR_Root n = new (&hist) IIR_Root (pos);
  return n;
}

pIIR_Root vaul_node_creator::mIIR_Root (int lineno)
{
  pIIR_Root n = new (&hist) IIR_Root (make_posinfo(lineno));
  return n;
}

pIIR_PosInfo_Sheet vaul_node_creator::mIIR_PosInfo_Sheet (const char* sheet_name, int x_coordinate, int y_coordinate)
{
  pIIR_PosInfo_Sheet n = new (&hist) IIR_PosInfo_Sheet (sheet_name, x_coordinate, y_coordinate);
  return n;
}

pIIR_PosInfo_TextFile vaul_node_creator::mIIR_PosInfo_TextFile (const char* file_name, int line_number)
{
  pIIR_PosInfo_TextFile n = new (&hist) IIR_PosInfo_TextFile (file_name, line_number);
  return n;
}

pIIR_PosInfo vaul_node_creator::mIIR_PosInfo ()
{
  pIIR_PosInfo n = new (&hist) IIR_PosInfo ();
  return n;
}

pVAUL_FilenameAndMode vaul_node_creator::mVAUL_FilenameAndMode (pIIR_Expression name, IR_Mode mode)
{
  pVAUL_FilenameAndMode n = new (&hist) VAUL_FilenameAndMode (name, mode);
  return n;
}

pVAUL_DeclCache vaul_node_creator::mVAUL_DeclCache (vaul_decl_set* set, pIIR_TextLiteral id, pIIR_Declaration scope, bool by_sel)
{
  pVAUL_DeclCache n = new (&hist) VAUL_DeclCache (NULL, set, id, scope, by_sel);
  return n;
}

pVAUL_IncrementalBindingIndic vaul_node_creator::mVAUL_IncrementalBindingIndic (pIIR_PosInfo pos, pIIR_DeclarativeRegion unit, pVAUL_NamedAssocElem generic_assoc, pVAUL_NamedAssocElem port_assoc)
{
  pVAUL_IncrementalBindingIndic n = new (&hist) VAUL_IncrementalBindingIndic (pos, unit, generic_assoc, port_assoc);
  return n;
}

pVAUL_IncrementalBindingIndic vaul_node_creator::mVAUL_IncrementalBindingIndic (int lineno, pIIR_DeclarativeRegion unit, pVAUL_NamedAssocElem generic_assoc, pVAUL_NamedAssocElem port_assoc)
{
  pVAUL_IncrementalBindingIndic n = new (&hist) VAUL_IncrementalBindingIndic (make_posinfo(lineno), unit, generic_assoc, port_assoc);
  return n;
}

pVAUL_InstList_OTHERS vaul_node_creator::mVAUL_InstList_OTHERS (pIIR_PosInfo pos)
{
  pVAUL_InstList_OTHERS n = new (&hist) VAUL_InstList_OTHERS (pos);
  return n;
}

pVAUL_InstList_OTHERS vaul_node_creator::mVAUL_InstList_OTHERS (int lineno)
{
  pVAUL_InstList_OTHERS n = new (&hist) VAUL_InstList_OTHERS (make_posinfo(lineno));
  return n;
}

pVAUL_InstList_ALL vaul_node_creator::mVAUL_InstList_ALL (pIIR_PosInfo pos)
{
  pVAUL_InstList_ALL n = new (&hist) VAUL_InstList_ALL (pos);
  return n;
}

pVAUL_InstList_ALL vaul_node_creator::mVAUL_InstList_ALL (int lineno)
{
  pVAUL_InstList_ALL n = new (&hist) VAUL_InstList_ALL (make_posinfo(lineno));
  return n;
}

pVAUL_InstList_Ids vaul_node_creator::mVAUL_InstList_Ids (pIIR_PosInfo pos, pIIR_IdentifierList ids)
{
  pVAUL_InstList_Ids n = new (&hist) VAUL_InstList_Ids (pos, ids);
  return n;
}

pVAUL_InstList_Ids vaul_node_creator::mVAUL_InstList_Ids (int lineno, pIIR_IdentifierList ids)
{
  pVAUL_InstList_Ids n = new (&hist) VAUL_InstList_Ids (make_posinfo(lineno), ids);
  return n;
}

pVAUL_InstList vaul_node_creator::mVAUL_InstList (pIIR_PosInfo pos)
{
  pVAUL_InstList n = new (&hist) VAUL_InstList (pos);
  return n;
}

pVAUL_InstList vaul_node_creator::mVAUL_InstList (int lineno)
{
  pVAUL_InstList n = new (&hist) VAUL_InstList (make_posinfo(lineno));
  return n;
}

pVAUL_ComponentSpec vaul_node_creator::mVAUL_ComponentSpec (pIIR_PosInfo pos, pVAUL_InstList ids, pIIR_ComponentDeclaration comp)
{
  pVAUL_ComponentSpec n = new (&hist) VAUL_ComponentSpec (pos, ids, comp);
  return n;
}

pVAUL_ComponentSpec vaul_node_creator::mVAUL_ComponentSpec (int lineno, pVAUL_InstList ids, pIIR_ComponentDeclaration comp)
{
  pVAUL_ComponentSpec n = new (&hist) VAUL_ComponentSpec (make_posinfo(lineno), ids, comp);
  return n;
}

pVAUL_ConfigSpec vaul_node_creator::mVAUL_ConfigSpec (pIIR_PosInfo pos, pVAUL_ComponentSpec comps, pIIR_BindingIndication binding)
{
  pVAUL_ConfigSpec n = new (&hist) VAUL_ConfigSpec (pos, comps, binding, NULL);
  return n;
}

pVAUL_ConfigSpec vaul_node_creator::mVAUL_ConfigSpec (int lineno, pVAUL_ComponentSpec comps, pIIR_BindingIndication binding)
{
  pVAUL_ConfigSpec n = new (&hist) VAUL_ConfigSpec (make_posinfo(lineno), comps, binding, NULL);
  return n;
}

pVAUL_ForScheme vaul_node_creator::mVAUL_ForScheme (pIIR_PosInfo pos, pIIR_Identifier var, pIIR_Type range)
{
  pVAUL_ForScheme n = new (&hist) VAUL_ForScheme (pos, var, range);
  return n;
}

pVAUL_ForScheme vaul_node_creator::mVAUL_ForScheme (int lineno, pIIR_Identifier var, pIIR_Type range)
{
  pVAUL_ForScheme n = new (&hist) VAUL_ForScheme (make_posinfo(lineno), var, range);
  return n;
}

pVAUL_WhileScheme vaul_node_creator::mVAUL_WhileScheme (pIIR_PosInfo pos, pIIR_Expression condition)
{
  pVAUL_WhileScheme n = new (&hist) VAUL_WhileScheme (pos, condition);
  return n;
}

pVAUL_WhileScheme vaul_node_creator::mVAUL_WhileScheme (int lineno, pIIR_Expression condition)
{
  pVAUL_WhileScheme n = new (&hist) VAUL_WhileScheme (make_posinfo(lineno), condition);
  return n;
}

pVAUL_IfScheme vaul_node_creator::mVAUL_IfScheme (pIIR_PosInfo pos, pIIR_Expression condition)
{
  pVAUL_IfScheme n = new (&hist) VAUL_IfScheme (pos, condition);
  return n;
}

pVAUL_IfScheme vaul_node_creator::mVAUL_IfScheme (int lineno, pIIR_Expression condition)
{
  pVAUL_IfScheme n = new (&hist) VAUL_IfScheme (make_posinfo(lineno), condition);
  return n;
}

pVAUL_IterationScheme vaul_node_creator::mVAUL_IterationScheme (pIIR_PosInfo pos)
{
  pVAUL_IterationScheme n = new (&hist) VAUL_IterationScheme (pos);
  return n;
}

pVAUL_IterationScheme vaul_node_creator::mVAUL_IterationScheme (int lineno)
{
  pVAUL_IterationScheme n = new (&hist) VAUL_IterationScheme (make_posinfo(lineno));
  return n;
}

pVAUL_ChoiceByName vaul_node_creator::mVAUL_ChoiceByName (pIIR_PosInfo pos, pVAUL_Name name)
{
  pVAUL_ChoiceByName n = new (&hist) VAUL_ChoiceByName (pos, name);
  return n;
}

pVAUL_ChoiceByName vaul_node_creator::mVAUL_ChoiceByName (int lineno, pVAUL_Name name)
{
  pVAUL_ChoiceByName n = new (&hist) VAUL_ChoiceByName (make_posinfo(lineno), name);
  return n;
}

pVAUL_ElemAssoc vaul_node_creator::mVAUL_ElemAssoc (pIIR_PosInfo pos, pVAUL_ElemAssoc next, pIIR_ChoiceList choices, pIIR_Expression actual)
{
  pVAUL_ElemAssoc n = new (&hist) VAUL_ElemAssoc (pos, next, choices, actual);
  return n;
}

pVAUL_ElemAssoc vaul_node_creator::mVAUL_ElemAssoc (int lineno, pVAUL_ElemAssoc next, pIIR_ChoiceList choices, pIIR_Expression actual)
{
  pVAUL_ElemAssoc n = new (&hist) VAUL_ElemAssoc (make_posinfo(lineno), next, choices, actual);
  return n;
}

pVAUL_ArtificialAmbgAggregate vaul_node_creator::mVAUL_ArtificialAmbgAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pVAUL_ElemAssoc first_assoc)
{
  pVAUL_ArtificialAmbgAggregate n = new (&hist) VAUL_ArtificialAmbgAggregate (pos, subtype, IR_NOT_STATIC, first_assoc);
  return n;
}

pVAUL_ArtificialAmbgAggregate vaul_node_creator::mVAUL_ArtificialAmbgAggregate (int lineno, pIIR_Type subtype, pVAUL_ElemAssoc first_assoc)
{
  pVAUL_ArtificialAmbgAggregate n = new (&hist) VAUL_ArtificialAmbgAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, first_assoc);
  return n;
}

pVAUL_AmbgAggregate vaul_node_creator::mVAUL_AmbgAggregate (pIIR_PosInfo pos, pIIR_Type subtype, pVAUL_ElemAssoc first_assoc)
{
  pVAUL_AmbgAggregate n = new (&hist) VAUL_AmbgAggregate (pos, subtype, IR_NOT_STATIC, first_assoc);
  return n;
}

pVAUL_AmbgAggregate vaul_node_creator::mVAUL_AmbgAggregate (int lineno, pIIR_Type subtype, pVAUL_ElemAssoc first_assoc)
{
  pVAUL_AmbgAggregate n = new (&hist) VAUL_AmbgAggregate (make_posinfo(lineno), subtype, IR_NOT_STATIC, first_assoc);
  return n;
}

pVAUL_EntityNameList_OTHERS vaul_node_creator::mVAUL_EntityNameList_OTHERS (pIIR_PosInfo pos)
{
  pVAUL_EntityNameList_OTHERS n = new (&hist) VAUL_EntityNameList_OTHERS (pos);
  return n;
}

pVAUL_EntityNameList_OTHERS vaul_node_creator::mVAUL_EntityNameList_OTHERS (int lineno)
{
  pVAUL_EntityNameList_OTHERS n = new (&hist) VAUL_EntityNameList_OTHERS (make_posinfo(lineno));
  return n;
}

pVAUL_EntityNameList_ALL vaul_node_creator::mVAUL_EntityNameList_ALL (pIIR_PosInfo pos)
{
  pVAUL_EntityNameList_ALL n = new (&hist) VAUL_EntityNameList_ALL (pos);
  return n;
}

pVAUL_EntityNameList_ALL vaul_node_creator::mVAUL_EntityNameList_ALL (int lineno)
{
  pVAUL_EntityNameList_ALL n = new (&hist) VAUL_EntityNameList_ALL (make_posinfo(lineno));
  return n;
}

pVAUL_EntityNameList_Ids vaul_node_creator::mVAUL_EntityNameList_Ids (pIIR_PosInfo pos, pVAUL_DesigList ids)
{
  pVAUL_EntityNameList_Ids n = new (&hist) VAUL_EntityNameList_Ids (pos, ids);
  return n;
}

pVAUL_EntityNameList_Ids vaul_node_creator::mVAUL_EntityNameList_Ids (int lineno, pVAUL_DesigList ids)
{
  pVAUL_EntityNameList_Ids n = new (&hist) VAUL_EntityNameList_Ids (make_posinfo(lineno), ids);
  return n;
}

pVAUL_EntityNameList vaul_node_creator::mVAUL_EntityNameList (pIIR_PosInfo pos)
{
  pVAUL_EntityNameList n = new (&hist) VAUL_EntityNameList (pos);
  return n;
}

pVAUL_EntityNameList vaul_node_creator::mVAUL_EntityNameList (int lineno)
{
  pVAUL_EntityNameList n = new (&hist) VAUL_EntityNameList (make_posinfo(lineno));
  return n;
}

pVAUL_EntitySpec vaul_node_creator::mVAUL_EntitySpec (pIIR_PosInfo pos, pVAUL_EntityNameList names, IR_Kind entity_class)
{
  pVAUL_EntitySpec n = new (&hist) VAUL_EntitySpec (pos, names, entity_class);
  return n;
}

pVAUL_EntitySpec vaul_node_creator::mVAUL_EntitySpec (int lineno, pVAUL_EntityNameList names, IR_Kind entity_class)
{
  pVAUL_EntitySpec n = new (&hist) VAUL_EntitySpec (make_posinfo(lineno), names, entity_class);
  return n;
}

pVAUL_AttributeSpec vaul_node_creator::mVAUL_AttributeSpec (pIIR_PosInfo pos, pIIR_Identifier attr_desig, pVAUL_EntitySpec entities, pIIR_Expression value)
{
  pVAUL_AttributeSpec n = new (&hist) VAUL_AttributeSpec (pos, attr_desig, entities, value);
  return n;
}

pVAUL_AttributeSpec vaul_node_creator::mVAUL_AttributeSpec (int lineno, pIIR_Identifier attr_desig, pVAUL_EntitySpec entities, pIIR_Expression value)
{
  pVAUL_AttributeSpec n = new (&hist) VAUL_AttributeSpec (make_posinfo(lineno), attr_desig, entities, value);
  return n;
}

pVAUL_AmbgEnumLitRef vaul_node_creator::mVAUL_AmbgEnumLitRef (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pVAUL_AmbgEnumLitRef n = new (&hist) VAUL_AmbgEnumLitRef (pos, subtype, IR_NOT_STATIC, NULL);
  return n;
}

pVAUL_AmbgEnumLitRef vaul_node_creator::mVAUL_AmbgEnumLitRef (int lineno, pIIR_Type subtype)
{
  pVAUL_AmbgEnumLitRef n = new (&hist) VAUL_AmbgEnumLitRef (make_posinfo(lineno), subtype, IR_NOT_STATIC, NULL);
  return n;
}

pVAUL_AmbgNullExpr vaul_node_creator::mVAUL_AmbgNullExpr (pIIR_PosInfo pos, pIIR_Type subtype)
{
  pVAUL_AmbgNullExpr n = new (&hist) VAUL_AmbgNullExpr (pos, subtype, IR_NOT_STATIC);
  return n;
}

pVAUL_AmbgNullExpr vaul_node_creator::mVAUL_AmbgNullExpr (int lineno, pIIR_Type subtype)
{
  pVAUL_AmbgNullExpr n = new (&hist) VAUL_AmbgNullExpr (make_posinfo(lineno), subtype, IR_NOT_STATIC);
  return n;
}

pVAUL_AmbgArrayLitRef vaul_node_creator::mVAUL_AmbgArrayLitRef (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_StringLiteral value)
{
  pVAUL_AmbgArrayLitRef n = new (&hist) VAUL_AmbgArrayLitRef (pos, subtype, IR_NOT_STATIC, value);
  return n;
}

pVAUL_AmbgArrayLitRef vaul_node_creator::mVAUL_AmbgArrayLitRef (int lineno, pIIR_Type subtype, pIIR_StringLiteral value)
{
  pVAUL_AmbgArrayLitRef n = new (&hist) VAUL_AmbgArrayLitRef (make_posinfo(lineno), subtype, IR_NOT_STATIC, value);
  return n;
}

pVAUL_RangeAssocElem vaul_node_creator::mVAUL_RangeAssocElem (pIIR_PosInfo pos, pVAUL_GenAssocElem next, pIIR_Range range)
{
  pVAUL_RangeAssocElem n = new (&hist) VAUL_RangeAssocElem (pos, next, range);
  return n;
}

pVAUL_RangeAssocElem vaul_node_creator::mVAUL_RangeAssocElem (int lineno, pVAUL_GenAssocElem next, pIIR_Range range)
{
  pVAUL_RangeAssocElem n = new (&hist) VAUL_RangeAssocElem (make_posinfo(lineno), next, range);
  return n;
}

pVAUL_SubtypeAssocElem vaul_node_creator::mVAUL_SubtypeAssocElem (pIIR_PosInfo pos, pVAUL_GenAssocElem next, pIIR_Type type)
{
  pVAUL_SubtypeAssocElem n = new (&hist) VAUL_SubtypeAssocElem (pos, next, type);
  return n;
}

pVAUL_SubtypeAssocElem vaul_node_creator::mVAUL_SubtypeAssocElem (int lineno, pVAUL_GenAssocElem next, pIIR_Type type)
{
  pVAUL_SubtypeAssocElem n = new (&hist) VAUL_SubtypeAssocElem (make_posinfo(lineno), next, type);
  return n;
}

pVAUL_NamedAssocElem vaul_node_creator::mVAUL_NamedAssocElem (pIIR_PosInfo pos, pVAUL_GenAssocElem next, pVAUL_Name formal, pIIR_Expression actual)
{
  pVAUL_NamedAssocElem n = new (&hist) VAUL_NamedAssocElem (pos, next, formal, actual, NULL, NULL, NULL);
  return n;
}

pVAUL_NamedAssocElem vaul_node_creator::mVAUL_NamedAssocElem (int lineno, pVAUL_GenAssocElem next, pVAUL_Name formal, pIIR_Expression actual)
{
  pVAUL_NamedAssocElem n = new (&hist) VAUL_NamedAssocElem (make_posinfo(lineno), next, formal, actual, NULL, NULL, NULL);
  return n;
}

pVAUL_GenAssocElem vaul_node_creator::mVAUL_GenAssocElem (pIIR_PosInfo pos, pVAUL_GenAssocElem next)
{
  pVAUL_GenAssocElem n = new (&hist) VAUL_GenAssocElem (pos, next);
  return n;
}

pVAUL_GenAssocElem vaul_node_creator::mVAUL_GenAssocElem (int lineno, pVAUL_GenAssocElem next)
{
  pVAUL_GenAssocElem n = new (&hist) VAUL_GenAssocElem (make_posinfo(lineno), next);
  return n;
}

pVAUL_AmbgCall vaul_node_creator::mVAUL_AmbgCall (pIIR_PosInfo pos, pIIR_Type subtype, pVAUL_NamedAssocElem first_actual)
{
  pVAUL_AmbgCall n = new (&hist) VAUL_AmbgCall (pos, subtype, IR_NOT_STATIC, first_actual, NULL);
  return n;
}

pVAUL_AmbgCall vaul_node_creator::mVAUL_AmbgCall (int lineno, pIIR_Type subtype, pVAUL_NamedAssocElem first_actual)
{
  pVAUL_AmbgCall n = new (&hist) VAUL_AmbgCall (make_posinfo(lineno), subtype, IR_NOT_STATIC, first_actual, NULL);
  return n;
}

pVAUL_ProcedureCall vaul_node_creator::mVAUL_ProcedureCall (pIIR_PosInfo pos, pIIR_Type subtype, pIIR_ProcedureDeclaration proc, pIIR_AssociationList actuals)
{
  pVAUL_ProcedureCall n = new (&hist) VAUL_ProcedureCall (pos, subtype, IR_NOT_STATIC, proc, actuals);
  return n;
}

pVAUL_ProcedureCall vaul_node_creator::mVAUL_ProcedureCall (int lineno, pIIR_Type subtype, pIIR_ProcedureDeclaration proc, pIIR_AssociationList actuals)
{
  pVAUL_ProcedureCall n = new (&hist) VAUL_ProcedureCall (make_posinfo(lineno), subtype, IR_NOT_STATIC, proc, actuals);
  return n;
}

pVAUL_UnresolvedName vaul_node_creator::mVAUL_UnresolvedName (pIIR_PosInfo pos, pIIR_Type subtype, pVAUL_Name name)
{
  pVAUL_UnresolvedName n = new (&hist) VAUL_UnresolvedName (pos, subtype, IR_NOT_STATIC, name);
  return n;
}

pVAUL_UnresolvedName vaul_node_creator::mVAUL_UnresolvedName (int lineno, pIIR_Type subtype, pVAUL_Name name)
{
  pVAUL_UnresolvedName n = new (&hist) VAUL_UnresolvedName (make_posinfo(lineno), subtype, IR_NOT_STATIC, name);
  return n;
}

pVAUL_GuardSignal vaul_node_creator::mVAUL_GuardSignal (pIIR_PosInfo pos, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_SignalKind signal_kind)
{
  pVAUL_GuardSignal n = new (&hist) VAUL_GuardSignal (pos, declarator, NULL, NULL, -1, subtype, initial_value, NULL, signal_kind);
  return n;
}

pVAUL_GuardSignal vaul_node_creator::mVAUL_GuardSignal (int lineno, pIIR_TextLiteral declarator, pIIR_Type subtype, pIIR_Expression initial_value, IR_SignalKind signal_kind)
{
  pVAUL_GuardSignal n = new (&hist) VAUL_GuardSignal (make_posinfo(lineno), declarator, NULL, NULL, -1, subtype, initial_value, NULL, signal_kind);
  return n;
}

pVAUL_PreIndexSubtypeConstraint vaul_node_creator::mVAUL_PreIndexSubtypeConstraint (pIIR_PosInfo pos, pIIR_Type type)
{
  pVAUL_PreIndexSubtypeConstraint n = new (&hist) VAUL_PreIndexSubtypeConstraint (pos, NULL, NULL, IR_NOT_STATIC, type);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_PreIndexSubtypeConstraint vaul_node_creator::mVAUL_PreIndexSubtypeConstraint (int lineno, pIIR_Type type)
{
  pVAUL_PreIndexSubtypeConstraint n = new (&hist) VAUL_PreIndexSubtypeConstraint (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, type);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_PreIndexRangeConstraint vaul_node_creator::mVAUL_PreIndexRangeConstraint (pIIR_PosInfo pos, pIIR_Range range)
{
  pVAUL_PreIndexRangeConstraint n = new (&hist) VAUL_PreIndexRangeConstraint (pos, NULL, NULL, IR_NOT_STATIC, range);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_PreIndexRangeConstraint vaul_node_creator::mVAUL_PreIndexRangeConstraint (int lineno, pIIR_Range range)
{
  pVAUL_PreIndexRangeConstraint n = new (&hist) VAUL_PreIndexRangeConstraint (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, range);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_PreIndexConstraint vaul_node_creator::mVAUL_PreIndexConstraint (pIIR_PosInfo pos)
{
  pVAUL_PreIndexConstraint n = new (&hist) VAUL_PreIndexConstraint (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_PreIndexConstraint vaul_node_creator::mVAUL_PreIndexConstraint (int lineno)
{
  pVAUL_PreIndexConstraint n = new (&hist) VAUL_PreIndexConstraint (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_SubarrayType vaul_node_creator::mVAUL_SubarrayType (pIIR_PosInfo pos, pIIR_TypeList index_types, pIIR_Type element_type, pIIR_ArrayType complete_type)
{
  pVAUL_SubarrayType n = new (&hist) VAUL_SubarrayType (pos, NULL, NULL, IR_NOT_STATIC, index_types, element_type, complete_type);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_SubarrayType vaul_node_creator::mVAUL_SubarrayType (int lineno, pIIR_TypeList index_types, pIIR_Type element_type, pIIR_ArrayType complete_type)
{
  pVAUL_SubarrayType n = new (&hist) VAUL_SubarrayType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, index_types, element_type, complete_type);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_VoidType vaul_node_creator::mVAUL_VoidType (pIIR_PosInfo pos)
{
  pVAUL_VoidType n = new (&hist) VAUL_VoidType (pos, NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_VoidType vaul_node_creator::mVAUL_VoidType (int lineno)
{
  pVAUL_VoidType n = new (&hist) VAUL_VoidType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_IncompleteType vaul_node_creator::mVAUL_IncompleteType (pIIR_PosInfo pos)
{
  pVAUL_IncompleteType n = new (&hist) VAUL_IncompleteType (pos, NULL, NULL, IR_NOT_STATIC, NULL);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_IncompleteType vaul_node_creator::mVAUL_IncompleteType (int lineno)
{
  pVAUL_IncompleteType n = new (&hist) VAUL_IncompleteType (make_posinfo(lineno), NULL, NULL, IR_NOT_STATIC, NULL);
  vaul_fix_static_level (n);
  return n;
}

pVAUL_StandardPackage vaul_node_creator::mVAUL_StandardPackage (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pVAUL_StandardPackage n = new (&hist) VAUL_StandardPackage (pos, declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pVAUL_StandardPackage vaul_node_creator::mVAUL_StandardPackage (int lineno, pIIR_TextLiteral declarator)
{
  pVAUL_StandardPackage n = new (&hist) VAUL_StandardPackage (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  return n;
}

pVAUL_TopScope vaul_node_creator::mVAUL_TopScope (pIIR_PosInfo pos, pIIR_TextLiteral declarator)
{
  pVAUL_TopScope n = new (&hist) VAUL_TopScope (pos, declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pVAUL_TopScope vaul_node_creator::mVAUL_TopScope (int lineno, pIIR_TextLiteral declarator)
{
  pVAUL_TopScope n = new (&hist) VAUL_TopScope (make_posinfo(lineno), declarator, NULL, NULL, -1, NULL, NULL);
  return n;
}

pVAUL_NameList vaul_node_creator::mVAUL_NameList (pIIR_PosInfo pos, pVAUL_Name name, pVAUL_NameList link)
{
  pVAUL_NameList n = new (&hist) VAUL_NameList (pos, name, link);
  return n;
}

pVAUL_NameList vaul_node_creator::mVAUL_NameList (int lineno, pVAUL_Name name, pVAUL_NameList link)
{
  pVAUL_NameList n = new (&hist) VAUL_NameList (make_posinfo(lineno), name, link);
  return n;
}

pVAUL_SelNameList vaul_node_creator::mVAUL_SelNameList (pIIR_PosInfo pos, pVAUL_SelName name, pVAUL_SelNameList link)
{
  pVAUL_SelNameList n = new (&hist) VAUL_SelNameList (pos, name, link);
  return n;
}

pVAUL_SelNameList vaul_node_creator::mVAUL_SelNameList (int lineno, pVAUL_SelName name, pVAUL_SelNameList link)
{
  pVAUL_SelNameList n = new (&hist) VAUL_SelNameList (make_posinfo(lineno), name, link);
  return n;
}

pVAUL_AttributeName vaul_node_creator::mVAUL_AttributeName (pIIR_PosInfo pos, pVAUL_Name prefix, pIIR_Identifier attribute, pVAUL_NamedAssocElem first_actual)
{
  pVAUL_AttributeName n = new (&hist) VAUL_AttributeName (pos, prefix, attribute, first_actual);
  return n;
}

pVAUL_AttributeName vaul_node_creator::mVAUL_AttributeName (int lineno, pVAUL_Name prefix, pIIR_Identifier attribute, pVAUL_NamedAssocElem first_actual)
{
  pVAUL_AttributeName n = new (&hist) VAUL_AttributeName (make_posinfo(lineno), prefix, attribute, first_actual);
  return n;
}

pVAUL_IftsName vaul_node_creator::mVAUL_IftsName (pIIR_PosInfo pos, pVAUL_Name prefix, pVAUL_GenAssocElem assoc)
{
  pVAUL_IftsName n = new (&hist) VAUL_IftsName (pos, prefix, assoc);
  return n;
}

pVAUL_IftsName vaul_node_creator::mVAUL_IftsName (int lineno, pVAUL_Name prefix, pVAUL_GenAssocElem assoc)
{
  pVAUL_IftsName n = new (&hist) VAUL_IftsName (make_posinfo(lineno), prefix, assoc);
  return n;
}

pVAUL_SelName vaul_node_creator::mVAUL_SelName (pIIR_PosInfo pos, pVAUL_Name prefix, pIIR_TextLiteral suffix)
{
  pVAUL_SelName n = new (&hist) VAUL_SelName (pos, prefix, suffix);
  return n;
}

pVAUL_SelName vaul_node_creator::mVAUL_SelName (int lineno, pVAUL_Name prefix, pIIR_TextLiteral suffix)
{
  pVAUL_SelName n = new (&hist) VAUL_SelName (make_posinfo(lineno), prefix, suffix);
  return n;
}

pVAUL_SimpleName vaul_node_creator::mVAUL_SimpleName (pIIR_PosInfo pos, pIIR_TextLiteral id)
{
  pVAUL_SimpleName n = new (&hist) VAUL_SimpleName (pos, id);
  return n;
}

pVAUL_SimpleName vaul_node_creator::mVAUL_SimpleName (int lineno, pIIR_TextLiteral id)
{
  pVAUL_SimpleName n = new (&hist) VAUL_SimpleName (make_posinfo(lineno), id);
  return n;
}

pVAUL_Name vaul_node_creator::mVAUL_Name (pIIR_PosInfo pos)
{
  pVAUL_Name n = new (&hist) VAUL_Name (pos);
  return n;
}

pVAUL_Name vaul_node_creator::mVAUL_Name (int lineno)
{
  pVAUL_Name n = new (&hist) VAUL_Name (make_posinfo(lineno));
  return n;
}

pVAUL_DesigList vaul_node_creator::mVAUL_DesigList (pIIR_PosInfo pos, pIIR_TextLiteral desig, pVAUL_DesigList link)
{
  pVAUL_DesigList n = new (&hist) VAUL_DesigList (pos, desig, link);
  return n;
}

pVAUL_DesigList vaul_node_creator::mVAUL_DesigList (int lineno, pIIR_TextLiteral desig, pVAUL_DesigList link)
{
  pVAUL_DesigList n = new (&hist) VAUL_DesigList (make_posinfo(lineno), desig, link);
  return n;
}

pVAUL_SelSignalAssign vaul_node_creator::mVAUL_SelSignalAssign (pIIR_PosInfo pos, pIIR_Expression value, pIIR_Expression target, bool guarded, pVAUL_DelayMechanism delay, pVAUL_SelWaveform wave)
{
  pVAUL_SelSignalAssign n = new (&hist) VAUL_SelSignalAssign (pos, value, target, guarded, delay, wave);
  return n;
}

pVAUL_SelSignalAssign vaul_node_creator::mVAUL_SelSignalAssign (int lineno, pIIR_Expression value, pIIR_Expression target, bool guarded, pVAUL_DelayMechanism delay, pVAUL_SelWaveform wave)
{
  pVAUL_SelSignalAssign n = new (&hist) VAUL_SelSignalAssign (make_posinfo(lineno), value, target, guarded, delay, wave);
  return n;
}

pVAUL_SelWaveform vaul_node_creator::mVAUL_SelWaveform (pIIR_PosInfo pos, pIIR_WaveformList wave, pIIR_ChoiceList choice, pVAUL_SelWaveform next_wave)
{
  pVAUL_SelWaveform n = new (&hist) VAUL_SelWaveform (pos, wave, choice, next_wave);
  return n;
}

pVAUL_SelWaveform vaul_node_creator::mVAUL_SelWaveform (int lineno, pIIR_WaveformList wave, pIIR_ChoiceList choice, pVAUL_SelWaveform next_wave)
{
  pVAUL_SelWaveform n = new (&hist) VAUL_SelWaveform (make_posinfo(lineno), wave, choice, next_wave);
  return n;
}

pVAUL_CondalSignalAssign vaul_node_creator::mVAUL_CondalSignalAssign (pIIR_PosInfo pos, pIIR_Expression target, bool guarded, pVAUL_DelayMechanism delay, pVAUL_CondalWaveform wave)
{
  pVAUL_CondalSignalAssign n = new (&hist) VAUL_CondalSignalAssign (pos, target, guarded, delay, wave);
  return n;
}

pVAUL_CondalSignalAssign vaul_node_creator::mVAUL_CondalSignalAssign (int lineno, pIIR_Expression target, bool guarded, pVAUL_DelayMechanism delay, pVAUL_CondalWaveform wave)
{
  pVAUL_CondalSignalAssign n = new (&hist) VAUL_CondalSignalAssign (make_posinfo(lineno), target, guarded, delay, wave);
  return n;
}

pVAUL_CondalWaveform vaul_node_creator::mVAUL_CondalWaveform (pIIR_PosInfo pos, pIIR_WaveformList wave, pIIR_Expression condition)
{
  pVAUL_CondalWaveform n = new (&hist) VAUL_CondalWaveform (pos, wave, condition, NULL);
  return n;
}

pVAUL_CondalWaveform vaul_node_creator::mVAUL_CondalWaveform (int lineno, pIIR_WaveformList wave, pIIR_Expression condition)
{
  pVAUL_CondalWaveform n = new (&hist) VAUL_CondalWaveform (make_posinfo(lineno), wave, condition, NULL);
  return n;
}

pVAUL_DelayTransport vaul_node_creator::mVAUL_DelayTransport (pIIR_PosInfo pos)
{
  pVAUL_DelayTransport n = new (&hist) VAUL_DelayTransport (pos);
  return n;
}

pVAUL_DelayTransport vaul_node_creator::mVAUL_DelayTransport (int lineno)
{
  pVAUL_DelayTransport n = new (&hist) VAUL_DelayTransport (make_posinfo(lineno));
  return n;
}

pVAUL_DelayInertial vaul_node_creator::mVAUL_DelayInertial (pIIR_PosInfo pos, pIIR_Expression rejection_time)
{
  pVAUL_DelayInertial n = new (&hist) VAUL_DelayInertial (pos, rejection_time);
  return n;
}

pVAUL_DelayInertial vaul_node_creator::mVAUL_DelayInertial (int lineno, pIIR_Expression rejection_time)
{
  pVAUL_DelayInertial n = new (&hist) VAUL_DelayInertial (make_posinfo(lineno), rejection_time);
  return n;
}

pVAUL_DelayMechanism vaul_node_creator::mVAUL_DelayMechanism (pIIR_PosInfo pos)
{
  pVAUL_DelayMechanism n = new (&hist) VAUL_DelayMechanism (pos);
  return n;
}

pVAUL_DelayMechanism vaul_node_creator::mVAUL_DelayMechanism (int lineno)
{
  pVAUL_DelayMechanism n = new (&hist) VAUL_DelayMechanism (make_posinfo(lineno));
  return n;
}

static tree_kind vaul_kinds[57] = {
  VAUL_DELAY_MECHANISM,
  VAUL_DELAY_INERTIAL,
  VAUL_DELAY_TRANSPORT,
  VAUL_CONDAL_WAVEFORM,
  VAUL_CONDAL_SIGNAL_ASSIGN,
  VAUL_SEL_WAVEFORM,
  VAUL_SEL_SIGNAL_ASSIGN,
  VAUL_DESIG_LIST,
  VAUL_NAME,
  VAUL_SIMPLE_NAME,
  VAUL_SEL_NAME,
  VAUL_IFTS_NAME,
  VAUL_ATTRIBUTE_NAME,
  VAUL_SEL_NAME_LIST,
  VAUL_NAME_LIST,
  VAUL_TOP_SCOPE,
  VAUL_STANDARD_PACKAGE,
  VAUL_INCOMPLETE_TYPE,
  VAUL_VOID_TYPE,
  VAUL_SUBARRAY_TYPE,
  VAUL_PRE_INDEX_CONSTRAINT,
  VAUL_PRE_INDEX_RANGE_CONSTRAINT,
  VAUL_PRE_INDEX_SUBTYPE_CONSTRAINT,
  VAUL_GUARD_SIGNAL,
  VAUL_UNRESOLVED_NAME,
  VAUL_PROCEDURE_CALL,
  VAUL_AMBG_CALL,
  VAUL_GEN_ASSOC_ELEM,
  VAUL_NAMED_ASSOC_ELEM,
  VAUL_SUBTYPE_ASSOC_ELEM,
  VAUL_RANGE_ASSOC_ELEM,
  VAUL_AMBG_ARRAY_LIT_REF,
  VAUL_AMBG_NULL_EXPR,
  VAUL_AMBG_ENUM_LIT_REF,
  VAUL_ATTRIBUTE_SPEC,
  VAUL_ENTITY_SPEC,
  VAUL_ENTITY_NAME_LIST,
  VAUL_ENTITY_NAME_LIST_IDS,
  VAUL_ENTITY_NAME_LIST_ALL,
  VAUL_ENTITY_NAME_LIST_OTHERS,
  VAUL_AMBG_AGGREGATE,
  VAUL_ARTIFICIAL_AMBG_AGGREGATE,
  VAUL_ELEM_ASSOC,
  VAUL_CHOICE_BY_NAME,
  VAUL_ITERATION_SCHEME,
  VAUL_IF_SCHEME,
  VAUL_WHILE_SCHEME,
  VAUL_FOR_SCHEME,
  VAUL_CONFIG_SPEC,
  VAUL_COMPONENT_SPEC,
  VAUL_INST_LIST,
  VAUL_INST_LIST_IDS,
  VAUL_INST_LIST_ALL,
  VAUL_INST_LIST_OTHERS,
  VAUL_INCREMENTAL_BINDING_INDIC,
  VAUL_DECL_CACHE,
  VAUL_FILENAME_AND_MODE,
};

struct tree_chunk_info vaul_chunk_info = {
  -1,
  "vaul",
  57,
  vaul_kinds
};

void init_vaul_chunk ()
{
  if (vaul_chunk_info.chunk_id != -1)
    return;
  init_fire_chunk ();

  tree_register_chunk (&vaul_chunk_info);
  vaul_IIR_DeclarativeRegion_key = tree_uniq_prop_key (IR_DECLARATIVE_REGION);
  vaul_IIR_SimpleReference_key = tree_uniq_prop_key (IR_SIMPLE_REFERENCE);
  vaul_IIR_ChoiceByRange_key = tree_uniq_prop_key (IR_CHOICE_BY_RANGE);
  vaul_IIR_BlockStatement_key = tree_uniq_prop_key (IR_BLOCK_STATEMENT);
  vaul_IIR_ConfigurationSpecification_key = tree_uniq_prop_key (IR_CONFIGURATION_SPECIFICATION);
  vaul_IIR_ComponentConfiguration_key = tree_uniq_prop_key (IR_COMPONENT_CONFIGURATION);
}

struct vaul_auto_initializer {
  vaul_auto_initializer () { init_vaul_chunk (); }
} vaul_ignition;
