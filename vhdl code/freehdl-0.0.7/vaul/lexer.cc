#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[105] =
    {   0,
       36,   34,   35,    1,    2,   34,   35,   32,   35,    2,
       34,   35,    1,   34,   35,   24,   34,   35,   34,   35,
       34,   35,    3,   34,   35,    4,   34,   35,    5,   34,
       35,    6,   34,   35,    8,   34,   35,    9,   34,   35,
       10,   34,   35,   11,   34,   35,   25,   34,   35,   26,
       34,   35,   28,   34,   35,   13,   34,   35,   14,   34,
       35,   17,   34,   35,   19,   34,   35,   18,   34,   35,
       27,   34,   35,   27,   34,   35,   23,   34,   35,   30,
       30,    7,   20,   28,   12,   15,   22,   21,   16,   27,
       27,   29,   33,   28,   28,   28,   28,   28,   28,   31,

       28,   28,   28,   28
    } ;

static yyconst flex_int16_t yy_accept[99] =
    {   0,
        1,    1,    1,    2,    4,    8,   10,   13,   16,   19,
       21,   23,   26,   29,   32,   35,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   80,   81,   81,   82,   82,   83,   83,   84,   84,
       84,   85,   85,   85,   85,   86,   87,   88,   89,   90,
       91,   92,   92,   92,   93,   93,   94,   94,   95,   95,
       95,   96,   96,   96,   97,   97,   97,   97,   98,   98,
       98,   98,   99,   99,  100,  100,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  102,  102,  102,  102,
      102,  102,  103,  104,  104,  105,  105,  105

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,    9,    9,   27,   28,   27,   27,   29,   27,
       30,   30,   30,   30,   30,   30,   30,   30,   31,   30,
       30,   30,   30,   30,   30,   30,   30,   32,   30,   30,
        9,    9,    9,    9,   33,    9,   34,   35,   34,   34,

       36,   34,   37,   37,   37,   37,   37,   37,   37,   37,
       38,   37,   37,   37,   37,   37,   37,   37,   37,   39,
       37,   37,    9,   40,    9,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[41] =
    {   0,
        1,    2,    1,    1,    2,    2,    3,    4,    2,    5,
        2,    2,    2,    2,    2,    2,    2,    2,    6,    2,
        7,    8,    2,    2,    2,    2,    7,    7,    7,    9,
        9,    9,   10,    7,    7,    7,    9,    9,    9,    2
    } ;

static yyconst flex_int16_t yy_base[115] =
    {   0,
        0,    0,  221,  222,  222,  222,  222,  222,  222,  213,
      209,  222,    0,  222,  222,  203,  222,  222,  199,  222,
      191,   33,  190,  222,   17,  188,  187,  175,   37,  222,
      200,  198,  194,  191,  188,  222,  195,  222,    0,  174,
        0,    0,   30,  173,  222,  222,  222,  222,  222,  159,
      158,    0,    0,  222,  187,  222,   41,   32,   45,  166,
       24,   43,   46,   44,    0,   63,   64,   56,  161,    0,
       62,   57,   68,   42,  160,  222,   81,   84,   88,   89,
       84,   86,   82,   90,  157,   91,   95,   99,   87,   94,
      143,   92,   97,  113,  102,  112,  222,  134,  143,  152,

      156,  166,  124,  122,  119,  103,  173,  178,  186,  192,
       52,   51,  199,  203
    } ;

static yyconst flex_int16_t yy_def[115] =
    {   0,
       97,    1,   97,   97,   97,   97,   97,   97,   97,   98,
       99,   97,  100,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  101,  101,   97,
       98,   97,   99,   97,   97,   97,  102,   97,  103,   97,
       22,  104,   97,   97,   97,   97,   97,   97,   97,  101,
      101,  105,  106,   97,  102,   97,  107,   97,  108,   97,
       97,  109,  110,   97,  111,  107,  107,   97,   97,  112,
      108,   97,  108,   97,   97,   97,  109,  109,  110,  110,
       97,  113,  114,   97,   97,   97,  113,  113,  114,  114,
       97,   97,   97,   97,   97,   97,    0,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97
    } ;

static yyconst flex_int16_t yy_nxt[263] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,    4,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   28,   28,
       29,   29,   28,   28,   29,   28,   28,   29,   29,   30,
       39,   46,   47,   52,   74,   60,   53,   60,   64,   76,
       61,   40,   68,   41,   42,   76,   75,   83,   82,   65,
       43,   43,   74,   70,   69,   44,   72,   43,   43,   51,
       64,   97,   81,   67,   75,   78,   68,   73,   80,   81,
       70,   65,   97,   72,   43,   84,   97,   76,   69,   97,
       97,   43,   84,   64,   73,   67,   97,   76,   97,   85,

       97,   85,   64,   72,   86,   91,   97,   91,   72,   63,
       92,   93,   95,   78,   90,   97,   97,   93,   88,   90,
       80,   97,   95,   94,   96,   62,   97,   88,   59,   94,
       57,   97,   95,   93,   96,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   50,   92,   50,   50,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   66,   86,   66,   66,
       74,   68,   66,   71,   71,   71,   61,   71,   77,   56,
       51,   51,   77,   41,   58,   77,   79,   56,   79,   54,

       33,   79,   87,   34,   31,   87,   32,   51,   87,   89,
       89,   49,   89,   48,   45,   38,   37,   36,   34,   32,
       97,    3,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97
    } ;

static yyconst flex_int16_t yy_chk[263] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       22,   25,   25,   29,   61,   43,   29,   43,   57,   62,
       43,   22,   58,   22,   22,   63,   61,  112,  111,   57,
       58,   22,   74,   59,   58,   22,   59,   58,   22,   29,
       66,   67,   64,   57,   74,   62,   68,   59,   63,   64,
       71,   66,   67,   71,   68,   72,   73,   77,   68,   73,
       78,   68,   72,   82,   71,   66,   67,   79,   80,   81,

       73,   81,   87,   83,   81,   84,   88,   84,   89,  106,
       84,   86,   92,   77,   83,   90,   78,   93,   82,   89,
       79,   80,   95,   86,   92,  105,   90,   87,  104,   93,
      103,   88,   96,   94,   95,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,   91,  101,  101,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  107,   85,  107,  107,
       75,   69,  107,  108,  108,  108,   60,  108,  109,   55,
       51,   50,  109,   44,   40,  109,  110,   37,  110,   35,

       34,  110,  113,   33,   32,  113,   31,   28,  113,  114,
      114,   27,  114,   26,   23,   21,   19,   16,   11,   10,
        3,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97
    } ;

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.ll"
/* flex scanner. -*- c++ -*-

   Copyright (C) 1993, 2003 Universite Pierre et Marie Curie (PARIS VI)
   MASI/CAO-VLSI CAD Team

   Copyright (C) Thomas Dettmer

   Copyright (C) 1994-1997 University of Dortmund
   Department of Electrical Engineering, AG SIV

   Yes, this file has been hacked by many people, and it shows.

   VAUL is free software; you can redistribute it and/or modify it
   under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   VAUL is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General
   Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with VAUL; see the file COPYING.LIB.  If not, write
   to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
   Boston, MA 02111-1307 USA.

   Please see the file "vhdl.lex" for additional details.
*/
#line 32 "lexer.ll"

#include <freehdl/vaul-lexer.h>
#include <freehdl/vaul-util.h>

#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>

int yyFlexLexer::yywrap() { return 1; }

  //using namespace std;

inline static void str_to_name(char *n)
{
    while(*n) {
	*n = tolower(*n);
	n++;
    }
}

#include "bison-parser.h"

#define YY_DECL int vaul_lexer::lex(vaul_yystype *val, vaul_yyltype *loc)

#define set_loc()	{ loc->first_line = lineno; }
#define YY_USER_ACTION	set_loc();

#define MVL_LG_MC 15
#define MVL_NB_MC (sizeof(tab_mc)/sizeof(struct el_mc))  // 84

int MVL_LINNUM=1;

struct el_mc {
  char nom[MVL_LG_MC];
  int kval, skip_kval;
};

static el_mc tab_mc []=
  {
    {"abs"	    ,t_ABS, t_ABS},
    {"access"	    ,t_ACCESS, t_ACCESS},
    {"after"	    ,t_AFTER, t_AFTER},
    {"alias"	    ,t_ALIAS, t_ALIAS},
    {"all"	    ,t_ALL, t_ALL},
    {"and"	    ,t_AND, t_AND},
    {"architecture" ,t_ARCHITECTURE, skip_t_ARCHITECTURE},
    {"array"	    ,t_ARRAY, t_ARRAY},
    {"assert"	    ,t_ASSERT, t_ASSERT},
    {"attribute"    ,t_ATTRIBUTE, t_ATTRIBUTE},
    {"begin"	    ,t_BEGIN, t_BEGIN},
    {"block"	    ,t_BLOCK, t_BLOCK},
    {"body"	    ,t_BODY, skip_t_BODY},
    {"buffer"	    ,t_BUFFER, t_BUFFER},
    {"bus"	    ,t_BUS, t_BUS},
    {"case"	    ,t_CASE, t_CASE},
    {"component"    ,t_COMPONENT, t_COMPONENT},
    {"configuration",t_CONFIGURATION, skip_t_CONFIGURATION},
    {"constant"	    ,t_CONSTANT, t_CONSTANT},
    {"disconnect"   ,t_DISCONNECT, t_DISCONNECT},
    {"downto"	    ,t_DOWNTO, t_DOWNTO},
    {"else"	    ,t_ELSE, t_ELSE},
    {"elsif"	    ,t_ELSIF, t_ELSIF},
    {"end"	    ,t_END, t_END},
    {"entity"	    ,t_ENTITY, t_ENTITY},
    {"exit"	    ,t_EXIT, t_EXIT},
    {"file"	    ,t_FILE, t_FILE},
    {"for"	    ,t_FOR, t_FOR},
    {"function"	    ,t_FUNCTION, t_FUNCTION},
    {"generate"	    ,t_GENERATE, t_GENERATE},
    {"generic"	    ,t_GENERIC, t_GENERIC},
    {"guarded"	    ,t_GUARDED, t_GUARDED},
    {"if"	    ,t_IF, t_IF},
    {"impure"       ,t_IMPURE, t_IMPURE},
    {"in"	    ,t_IN, t_IN},
    {"inertial"     ,t_INERTIAL, t_INERTIAL},
    {"inout"	    ,t_INOUT, t_INOUT},
    {"is"	    ,t_IS, t_IS},
    {"label"	    ,t_LABEL, t_LABEL},
    {"library"	    ,t_LIBRARY, t_LIBRARY},
    {"linkage"	    ,t_LINKAGE, t_LINKAGE},
    {"loop"	    ,t_LOOP, t_LOOP},
    {"map"	    ,t_MAP, t_MAP},
    {"mod"	    ,t_MOD, t_MOD},
    {"nand"	    ,t_NAND, t_NAND},
    {"new"	    ,t_NEW, t_NEW},
    {"next"	    ,t_NEXT, t_NEXT},
    {"nor"	    ,t_NOR, t_NOR},
    {"not"	    ,t_NOT, t_NOT},
    {"null"	    ,t_NULL, t_NULL},
    {"of"	    ,t_OF, t_OF},
    {"on"	    ,t_ON, t_ON},
    {"open"	    ,t_OPEN, t_OPEN},
    {"or"	    ,t_OR, t_OR},
    {"others"	    ,t_OTHERS, t_OTHERS},
    {"out"	    ,t_OUT, t_OUT},
    {"package"	    ,t_PACKAGE, t_PACKAGE},
    {"port"	    ,t_PORT, t_PORT},
    {"postponed"    ,t_POSTPONED, t_POSTPONED},
    {"procedure"    ,t_PROCEDURE, t_PROCEDURE},
    {"process"	    ,t_PROCESS, t_PROCESS},
    {"pure"         ,t_PURE, t_PURE},
    {"range"	    ,t_RANGE, t_RANGE},
    {"record"	    ,t_RECORD, t_RECORD},
    {"register"	    ,t_REGISTER, t_REGISTER},
    {"reject"       ,t_REJECT, t_REJECT},
    {"rem"	    ,t_REM, t_REM},
    {"report"	    ,t_REPORT, t_REPORT},
    {"return"	    ,t_RETURN, t_RETURN},
    {"reverse_range",t_REVERSE_RANGE, t_REVERSE_RANGE},
    {"rol"          ,t_ROL, t_ROL},
    {"ror"          ,t_ROR, t_ROR},
    {"select"	    ,t_SELECT, t_SELECT},
    {"severity"	    ,t_SEVERITY, t_SEVERITY},
    {"signal"	    ,t_SIGNAL, t_SIGNAL},
    {"sla"          ,t_SLA, t_SLA},
    {"sll"          ,t_SLL, t_SLL},
    {"sra"          ,t_SRA, t_SRA},
    {"srl"          ,t_SRL, t_SRL},
    {"subtype"	    ,t_SUBTYPE, t_SUBTYPE},
    {"then"	    ,t_THEN, t_THEN},
    {"to"	    ,t_TO, t_TO},
    {"transport"    ,t_TRANSPORT, t_TRANSPORT},
    {"type"	    ,t_TYPE, t_TYPE},
    {"units"	    ,t_UNITS, t_UNITS},
    {"until"	    ,t_UNTIL, t_UNTIL},
    {"use"	    ,t_USE, t_USE},
    {"variable"	    ,t_VARIABLE, t_VARIABLE},
    {"wait"	    ,t_WAIT, t_WAIT},
    {"when"	    ,t_WHEN, t_WHEN},
    {"while"	    ,t_WHILE, t_WHILE},
    {"with"	    ,t_WITH, t_WITH},
    {"xnor"	    ,t_XNOR, t_XNOR},
    {"xor"	    ,t_XOR, t_XOR}
};

typedef int cmpfunc_t(const void *, const void *);

static int find_mc(char *s, int skip_p)
{
    char l[strlen(s)+1];
    strcpy(l, s);
    str_to_name(l);
    el_mc *pt = (el_mc *) bsearch(l, tab_mc, MVL_NB_MC, sizeof(el_mc),
			  (cmpfunc_t *)strcmp);
    if (pt==NULL)
	return(-1);
    else
	return(skip_p? pt->skip_kval : pt->kval);
}

#line 710 "lexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 209 "lexer.ll"


	    if(stopped) return 0;

#line 820 "lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 98 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 222 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 213 "lexer.ll"
/* nothing */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 214 "lexer.ll"
/* still nothing */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 216 "lexer.ll"
return t_Ampersand;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 217 "lexer.ll"
return t_Apostrophe;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 218 "lexer.ll"
return t_LeftParen;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 219 "lexer.ll"
return t_RightParen;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 220 "lexer.ll"
return t_DoubleStar;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 221 "lexer.ll"
return t_Star;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 222 "lexer.ll"
return t_Plus;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 223 "lexer.ll"
return t_Comma;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 224 "lexer.ll"
return t_Minus;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 225 "lexer.ll"
return t_VarAsgn;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 226 "lexer.ll"
return t_Colon;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 227 "lexer.ll"
return t_Semicolon;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 228 "lexer.ll"
return t_LESym;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 229 "lexer.ll"
return t_GESym;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 230 "lexer.ll"
return t_LTSym;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 231 "lexer.ll"
return t_GTSym;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 232 "lexer.ll"
return t_EQSym;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 233 "lexer.ll"
return t_NESym;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 234 "lexer.ll"
return t_Arrow;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 235 "lexer.ll"
return t_Box;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 236 "lexer.ll"
return t_Bar;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 237 "lexer.ll"
return t_Bar;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 238 "lexer.ll"
return t_Dot;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 239 "lexer.ll"
return t_Slash;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 241 "lexer.ll"
{

  /* Allow underscores everywhere, and complain later */

	    int itoken;

	    maybe_complain_about_improper_underscores (yytext);

	    itoken=find_mc(yytext, skipping);
	    if (itoken== -1) {
		val->tree.IIR_Identifier =
		   creator->mIIR_Identifier (lineno, 
                                             (IR_Character *) yytext,
                                             (int) yyleng);
		return t_Identifier;
	    } else
		return itoken;
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 261 "lexer.ll"
{
  
    if (strchr (yytext, '.'))
      val->tree.IIR_Literal = 
        creator->mIIR_FloatingPointLiteral (lineno,
			 		    (IR_Character *) yytext,
					    (int) yyleng);
    else
      val->tree.IIR_Literal = 
	creator->mIIR_IntegerLiteral (lineno,
			 	      (IR_Character *) yytext,
				      (int) yyleng);
    return t_AbstractLit;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 277 "lexer.ll"
{

            val->tree.IIR_CharacterLiteral =
	      creator->mIIR_CharacterLiteral (lineno,
					      (IR_Character *) yytext,
	                                      (int) yyleng);
	    return t_CharacterLit;
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 286 "lexer.ll"
{

            val->tree.IIR_StringLiteral =
	      creator->mIIR_StringLiteral (lineno,
					   (IR_Character *) yytext,
					   (int) yyleng);
	    return t_StringLit;
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 295 "lexer.ll"
{

            val->tree.IIR_StringLiteral =
	      creator->mIIR_StringLiteral (lineno,
					   expand_bitstring(yytext, yyleng));
	    return t_StringLit;
	}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 303 "lexer.ll"
lineno++;
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 305 "lexer.ll"
/* comment */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 307 "lexer.ll"
{   
	    if(prt)
		prt->fprintf(log, "%?illegal character '0x%02x'\n",
				     this, (unsigned char)yytext[0]);
	}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 314 "lexer.ll"
ECHO;
	YY_BREAK
#line 1145 "lexer.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 98 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 98 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 97);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 314 "lexer.ll"



int
yyFlexLexer::yylex ()
{
  vaul_fatal ("internal lexer fuck up\n");
  return 0;	
}

vaul_lexer::vaul_lexer (const char *fn, FILE *f)
{
  close_file = 0;
  file = NULL;
  filename = vaul_xstrdup (fn);
  lineno = 1;
  prt = NULL;

  if (f == NULL) 
    {
      if (!(f = fopen(fn, "r")))
	{
	  set_error ();
	  return;
	}
      close_file = 1;
    }
  file = f;
  stopped = false;
  skipping = false;
}

vaul_lexer::~vaul_lexer()
{
  if (close_file)
    fclose (file);
  free (filename);
}

void
vaul_lexer::stop ()
{
  stopped = true;
}

void
vaul_lexer::skip_bodies (bool flag)
{
  skipping = flag;
}

int
vaul_lexer::LexerInput (char *buf, int max_size)
{
  if (file == NULL)
    return 0;

  if (!fgets (buf, max_size, file))
    {
      set_error ();
      return 0;
    }

  return strlen (buf);
}

void
vaul_lexer::LexerError (char *m)
{
  if (prt)
    prt->fprintf (log, "%?%s %C\n", this, m, this);
  else
    fprintf (stderr, "%s:%d: %s at %s\n", filename, lineno, m, context());
}

IR_String
vaul_lexer::expand_bitstring (const char *tok, int len)
{
  char buf[len*4];
  char *bp = buf;

  char bid = tolower (tok[0]);
  int bits = (bid == 'b'? 1 : bid == 'o'? 3 : bid == 'x'? 4 : 0);
  if(bits == 0
     || (tok[1] != '"' && tok[1] != '%') 
     || (tok[strlen(tok)-1] != '"' && tok[strlen(tok)-1] != '%'))
    {
      prt->fprintf (log, "%?illegal bitstring literal\n", this);
      return IR_String ((IR_Character *)"\"\"", 2);
    }

  *bp++ = '"';
  for (const char *cp = tok+2; *cp != '"' && *cp != '%'; cp++)
    {
      if (*cp == '_')
	continue;
      int dig = tolower (*cp) - '0';
      if (dig > 10)
	dig -= 'a'-'9'-1;
      if (dig >= (1 << bits)) 
	{
	  prt->fprintf (log, "%?illegal digit '%c' in bitstring literal\n",
			this, *cp);
	  dig = 0;
	}
      
      for (int i = bits-1; i >= 0; i--)
	*bp++ = (dig & (1 << i))? '1' : '0';
    }
  *bp++ = '"';
  *bp = '\0';
  // prt->fprintf (log, "%?xxx - expanded '%s' to '%s'\n", this, tok, buf);
  return IR_String ((IR_Character *)buf, bp-buf);
}

void
vaul_lexer::maybe_complain_about_improper_underscores (const char *id)
{
  // Underscores are not allowed at the start, the end, and immediatly
  // following another underscore.

  bool underscore_allowed = false;
  for (const char *cp = id; *cp; cp++)
    {
      if (*cp == '_')
	{
	  if (!underscore_allowed || *(cp+1) == '\0')
	    prt->fprintf (log, "%?illegal underscore in `%s'\n", this, id);
	  underscore_allowed = false;
	}
      else
	underscore_allowed = true;
    }
}

bool
vaul_name_eq (const char *n1, const char *n2)
{
  if (n1 == NULL || n2 == NULL)
    return false;
  if (n1[0] == '\\' || n1[0] == '\'')
    return !strcmp (n1, n2);
  else
    return !strcasecmp (n1, n2);
}

bool
vaul_name_eq (pIIR_TextLiteral i1, pIIR_TextLiteral i2)
{
  if (i1 == NULL || i2 == NULL)
    return false;

  int len = i1->text.len();
  if (i2->text.len() != len)
    return false;

  // XXX - this is slow

  char *n1 = i1->text.to_chars(), *n2 = i2->text.to_chars();

  if (n1[0] == '\\' || n1[0] == '\'')
    return !strncmp (n1, n2, len);
  else
    return !strncasecmp (n1, n2, len);
}

bool
vaul_name_eq (pIIR_TextLiteral i1, const char *n2)
{
  if (i1 == NULL || n2 == NULL)
    return false;

  unsigned int len = i1->text.len();
  if (strlen (n2) != len)
    return false;

  char *n1 = i1->text.to_chars();

  if (n1[0] == '\\' || n1[0] == '\'')
    return !strncmp (n1, n2, len);
  else
    return !strncasecmp (n1, n2, len);
}

bool
vaul_name_eq (const char *n1, pIIR_TextLiteral i2)
{
  return vaul_name_eq (i2, n1);
}

bool
vaul_pos_eq (pIIR_PosInfo p1, pIIR_PosInfo p2)
{
  if (p1->is(IR_POS_INFO_TEXT_FILE)
      && p2->is(IR_POS_INFO_TEXT_FILE))
    {
      pIIR_PosInfo_TextFile pt1 = pIIR_PosInfo_TextFile (p1);
      pIIR_PosInfo_TextFile pt2 = pIIR_PosInfo_TextFile (p2);
      return pt1->file_name == pt2->file_name
	&& pt1->line_number == pt2->line_number;
    }
  
  return false;
}

