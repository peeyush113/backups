
package cetus.cctreewalk;

import java.lang.*;
import java.util.*;

abstract public class CCTreeWalkBase implements CCTypeEnum
{
    protected static final int __ACTION_BEFORE__ = 0;
    protected static final int __ACTION_AFTER__ = 1;

    public CCTreeWalkBase()
    {
    }

    public GeneralSyntaxNode run(GeneralSyntaxNode tree_root)
    {
        System.out.println("Start Walking the tree to solve ambiguities:");
        process_translation_unit(tree_root);

		return tree_root;
    }

    protected void errorExit(String _error_msg)
    {
        throw (new TreeWalkException(_error_msg));
		
		/*
		System.out.println(_error_msg);
        System.exit(1);*/
    }

    protected boolean process_STRING_LITERAL_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __STRING_LITERAL__)
            {
                boolean action_result = action____STRING_LITERAL_seq__STRING_LITERAL(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [STRING_LITERAL_seq] --> [STRING_LITERAL] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __STRING_LITERAL_seq__
               &&child_2_type == __STRING_LITERAL__)
            {
                boolean action_result_before = action____STRING_LITERAL_seq__STRING_LITERAL_seq__STRING_LITERAL(node, __ACTION_BEFORE__);

                boolean result_1 = process_STRING_LITERAL_seq(child_1);

                boolean action_result_after = action____STRING_LITERAL_seq__STRING_LITERAL_seq__STRING_LITERAL(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [STRING_LITERAL_seq] --> [STRING_LITERAL_seq STRING_LITERAL] returns false.");
                    return false;
                }
            }
        }

        return action____STRING_LITERAL_seq__default_semantic_action(node);
    }

    protected boolean process_abstract_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ptr_operator__)
            {
                boolean action_result_before = action____abstract_declarator__ptr_operator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);

                boolean action_result_after = action____abstract_declarator__ptr_operator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [abstract_declarator] --> [ptr_operator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ptr_operator__
               &&child_2_type == __abstract_declarator__)
            {
                boolean action_result_before = action____abstract_declarator__ptr_operator__abstract_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);
                boolean result_2 = process_abstract_declarator(child_2);

                boolean action_result_after = action____abstract_declarator__ptr_operator__abstract_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [abstract_declarator] --> [ptr_operator abstract_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__)
            {
                boolean action_result_before = action____abstract_declarator__direct_abstract_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);

                boolean action_result_after = action____abstract_declarator__direct_abstract_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [abstract_declarator] --> [direct_abstract_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____abstract_declarator__default_semantic_action(node);
    }

    protected boolean process_access_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PRIVATE__)
            {
                boolean action_result = action____access_specifier__PRIVATE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [access_specifier] --> [PRIVATE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PROTECTED__)
            {
                boolean action_result = action____access_specifier__PROTECTED(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [access_specifier] --> [PROTECTED] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PUBLIC__)
            {
                boolean action_result = action____access_specifier__PUBLIC(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [access_specifier] --> [PUBLIC] returns false.");
                    return false;
                }
            }
        }

        return action____access_specifier__default_semantic_action(node);
    }

    protected boolean process_additive_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __multiplicative_expression__)
            {
                boolean action_result_before = action____additive_expression__multiplicative_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_multiplicative_expression(child_1);

                boolean action_result_after = action____additive_expression__multiplicative_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [additive_expression] --> [multiplicative_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __additive_expression__
               &&child_2_type == __PLUS_SIGN__
               &&child_3_type == __multiplicative_expression__)
            {
                boolean action_result_before = action____additive_expression__additive_expression__PLUS_SIGN__multiplicative_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_additive_expression(child_1);
                boolean result_3 = process_multiplicative_expression(child_3);

                boolean action_result_after = action____additive_expression__additive_expression__PLUS_SIGN__multiplicative_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [additive_expression] --> [additive_expression '+' multiplicative_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __additive_expression__
               &&child_2_type == __MINUS_SIGN__
               &&child_3_type == __multiplicative_expression__)
            {
                boolean action_result_before = action____additive_expression__additive_expression__MINUS_SIGN__multiplicative_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_additive_expression(child_1);
                boolean result_3 = process_multiplicative_expression(child_3);

                boolean action_result_after = action____additive_expression__additive_expression__MINUS_SIGN__multiplicative_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [additive_expression] --> [additive_expression '-' multiplicative_expression] returns false.");
                    return false;
                }
            }
        }

        return action____additive_expression__default_semantic_action(node);
    }

    protected boolean process_and_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __equality_expression__)
            {
                boolean action_result_before = action____and_expression__equality_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_equality_expression(child_1);

                boolean action_result_after = action____and_expression__equality_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [and_expression] --> [equality_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __and_expression__
               &&child_2_type == __AMPERSAND__
               &&child_3_type == __equality_expression__)
            {
                boolean action_result_before = action____and_expression__and_expression__AMPERSAND__equality_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_and_expression(child_1);
                boolean result_3 = process_equality_expression(child_3);

                boolean action_result_after = action____and_expression__and_expression__AMPERSAND__equality_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [and_expression] --> [and_expression '&' equality_expression] returns false.");
                    return false;
                }
            }
        }

        return action____and_expression__default_semantic_action(node);
    }

    protected boolean process_any_word(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __IDENTIFIER__)
            {
                boolean action_result = action____any_word__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [any_word] --> [IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __storage_class_specifier__)
            {
                boolean action_result_before = action____any_word__storage_class_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_storage_class_specifier(child_1);

                boolean action_result_after = action____any_word__storage_class_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [any_word] --> [storage_class_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __cv_qualifier__)
            {
                boolean action_result_before = action____any_word__cv_qualifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_cv_qualifier(child_1);

                boolean action_result_after = action____any_word__cv_qualifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [any_word] --> [cv_qualifier] returns false.");
                    return false;
                }
            }
        }

        return action____any_word__default_semantic_action(node);
    }

    protected boolean process_asm_clobbers(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __STRING_LITERAL__)
            {
                boolean action_result = action____asm_clobbers__STRING_LITERAL(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_clobbers] --> [STRING_LITERAL] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __asm_clobbers__
               &&child_2_type == __COMMA__
               &&child_3_type == __STRING_LITERAL__)
            {
                boolean action_result_before = action____asm_clobbers__asm_clobbers__COMMA__STRING_LITERAL(node, __ACTION_BEFORE__);

                boolean result_1 = process_asm_clobbers(child_1);

                boolean action_result_after = action____asm_clobbers__asm_clobbers__COMMA__STRING_LITERAL(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_clobbers] --> [asm_clobbers ',' STRING_LITERAL] returns false.");
                    return false;
                }
            }
        }

        return action____asm_clobbers__default_semantic_action(node);
    }

    protected boolean process_asm_definition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM                '(' STRING_LITERAL_seq ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __COLON__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                    ':'                  ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __COLON__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands     ':'                  ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_6 = process_asm_operands(child_6);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                    ':' asm_operands     ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_operands__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);
                boolean result_7 = process_asm_operands(child_7);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands     ':' asm_operands     ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __COLON__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                    ':'                  ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands     ':'                  ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_operands__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_7 = process_asm_operands(child_7);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                    ':' asm_operands     ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_operands__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_8 = process_asm_operands(child_8);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands     ':' asm_operands     ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __SCOPE__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq SCOPE              ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __SCOPE__
               &&child_5_type == __asm_operands__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq SCOPE asm_operands ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __SCOPE__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq SCOPE              ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __SCOPE__
               &&child_6_type == __asm_operands__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq SCOPE asm_operands ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __COLON__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_clobbers__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_7 = process_asm_clobbers(child_7);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                    ':'                  ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __COLON__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_clobbers__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);
                boolean result_8 = process_asm_clobbers(child_8);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands     ':'                  ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_clobbers__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_8 = process_asm_clobbers(child_8);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                    ':' asm_operands     ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 11)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();
            GeneralSyntaxNode	child_11 = (GeneralSyntaxNode)(node.getChild(10));
            int	child_11_type = child_11.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_operands__
               &&child_8_type == __COLON__
               &&child_9_type == __asm_clobbers__
               &&child_10_type == __RIGHT_PARENTHESIS__
               &&child_11_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);
                boolean result_7 = process_asm_operands(child_7);
                boolean result_9 = process_asm_clobbers(child_9);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7 && true && result_9 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands     ':' asm_operands     ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __COLON__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_clobbers__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_8 = process_asm_clobbers(child_8);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                    ':'                  ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 11)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();
            GeneralSyntaxNode	child_11 = (GeneralSyntaxNode)(node.getChild(10));
            int	child_11_type = child_11.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __COLON__
               &&child_9_type == __asm_clobbers__
               &&child_10_type == __RIGHT_PARENTHESIS__
               &&child_11_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_9 = process_asm_clobbers(child_9);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && true && result_9 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands     ':'                  ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 11)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();
            GeneralSyntaxNode	child_11 = (GeneralSyntaxNode)(node.getChild(10));
            int	child_11_type = child_11.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_operands__
               &&child_8_type == __COLON__
               &&child_9_type == __asm_clobbers__
               &&child_10_type == __RIGHT_PARENTHESIS__
               &&child_11_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_7 = process_asm_operands(child_7);
                boolean result_9 = process_asm_clobbers(child_9);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && result_7 && true && result_9 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                    ':' asm_operands     ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 12)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();
            GeneralSyntaxNode	child_11 = (GeneralSyntaxNode)(node.getChild(10));
            int	child_11_type = child_11.getTypeCode();
            GeneralSyntaxNode	child_12 = (GeneralSyntaxNode)(node.getChild(11));
            int	child_12_type = child_12.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_operands__
               &&child_9_type == __COLON__
               &&child_10_type == __asm_clobbers__
               &&child_11_type == __RIGHT_PARENTHESIS__
               &&child_12_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_8 = process_asm_operands(child_8);
                boolean result_10 = process_asm_clobbers(child_10);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && result_8 && true && result_10 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands     ':' asm_operands     ':' asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __SCOPE__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_clobbers__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_6 = process_asm_clobbers(child_6);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq SCOPE              ':'   asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __SCOPE__
               &&child_5_type == __asm_operands__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_clobbers__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);
                boolean result_7 = process_asm_clobbers(child_7);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq SCOPE asm_operands ':'   asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __SCOPE__
               &&child_6_type == __COLON__
               &&child_7_type == __asm_clobbers__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_7 = process_asm_clobbers(child_7);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq SCOPE              ':'   asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __SCOPE__
               &&child_6_type == __asm_operands__
               &&child_7_type == __COLON__
               &&child_8_type == __asm_clobbers__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_8 = process_asm_clobbers(child_8);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq SCOPE asm_operands ':'   asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __SCOPE__
               &&child_6_type == __asm_clobbers__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_6 = process_asm_clobbers(child_6);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'                SCOPE asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __STRING_LITERAL_seq__
               &&child_4_type == __COLON__
               &&child_5_type == __asm_operands__
               &&child_6_type == __SCOPE__
               &&child_7_type == __asm_clobbers__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_STRING_LITERAL_seq(child_3);
                boolean result_5 = process_asm_operands(child_5);
                boolean result_7 = process_asm_clobbers(child_7);

                boolean action_result_after = action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM              '(' STRING_LITERAL_seq ':'   asm_operands SCOPE asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 9)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __SCOPE__
               &&child_7_type == __asm_clobbers__
               &&child_8_type == __RIGHT_PARENTHESIS__
               &&child_9_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_7 = process_asm_clobbers(child_7);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && true && result_7 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'                SCOPE asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 10)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();
            GeneralSyntaxNode	child_9 = (GeneralSyntaxNode)(node.getChild(8));
            int	child_9_type = child_9.getTypeCode();
            GeneralSyntaxNode	child_10 = (GeneralSyntaxNode)(node.getChild(9));
            int	child_10_type = child_10.getTypeCode();

            if (child_1_type == __ASM__
               &&child_2_type == __cv_qualifier__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __STRING_LITERAL_seq__
               &&child_5_type == __COLON__
               &&child_6_type == __asm_operands__
               &&child_7_type == __SCOPE__
               &&child_8_type == __asm_clobbers__
               &&child_9_type == __RIGHT_PARENTHESIS__
               &&child_10_type == __SEMICOLON__)
            {
                boolean action_result_before = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier(child_2);
                boolean result_4 = process_STRING_LITERAL_seq(child_4);
                boolean result_6 = process_asm_operands(child_6);
                boolean result_8 = process_asm_clobbers(child_8);

                boolean action_result_after = action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6 && true && result_8 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_definition] --> [ASM cv_qualifier '(' STRING_LITERAL_seq ':'   asm_operands SCOPE asm_clobbers ')' ';'] returns false.");
                    return false;
                }
            }
        }

        return action____asm_definition__default_semantic_action(node);
    }

    protected boolean process_asm_operand(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __STRING_LITERAL__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____asm_operand__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_expression(child_3);

                boolean action_result_after = action____asm_operand__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_operand] --> [STRING_LITERAL '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __RIGHT_BRACKET__
               &&child_4_type == __STRING_LITERAL__
               &&child_5_type == __LEFT_PARENTHESIS__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____asm_operand__LEFT_BRACKET__IDENTIFIER__RIGHT_BRACKET__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_6 = process_expression(child_6);

                boolean action_result_after = action____asm_operand__LEFT_BRACKET__IDENTIFIER__RIGHT_BRACKET__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && true && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_operand] --> ['[' IDENTIFIER ']' STRING_LITERAL '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        return action____asm_operand__default_semantic_action(node);
    }

    protected boolean process_asm_operands(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __asm_operand__)
            {
                boolean action_result_before = action____asm_operands__asm_operand(node, __ACTION_BEFORE__);

                boolean result_1 = process_asm_operand(child_1);

                boolean action_result_after = action____asm_operands__asm_operand(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_operands] --> [asm_operand] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __asm_operands__
               &&child_2_type == __COMMA__
               &&child_3_type == __asm_operand__)
            {
                boolean action_result_before = action____asm_operands__asm_operands__COMMA__asm_operand(node, __ACTION_BEFORE__);

                boolean result_1 = process_asm_operands(child_1);
                boolean result_3 = process_asm_operand(child_3);

                boolean action_result_after = action____asm_operands__asm_operands__COMMA__asm_operand(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [asm_operands] --> [asm_operands ',' asm_operand] returns false.");
                    return false;
                }
            }
        }

        return action____asm_operands__default_semantic_action(node);
    }

    protected boolean process_assignment_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __conditional_expression__)
            {
                boolean action_result_before = action____assignment_expression__conditional_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_conditional_expression(child_1);

                boolean action_result_after = action____assignment_expression__conditional_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_expression] --> [conditional_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __logical_or_expression__
               &&child_2_type == __assignment_operator__
               &&child_3_type == __assignment_expression__)
            {
                boolean action_result_before = action____assignment_expression__logical_or_expression__assignment_operator__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_or_expression(child_1);
                boolean result_2 = process_assignment_operator(child_2);
                boolean result_3 = process_assignment_expression(child_3);

                boolean action_result_after = action____assignment_expression__logical_or_expression__assignment_operator__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_expression] --> [logical_or_expression assignment_operator assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __throw_expression__)
            {
                boolean action_result_before = action____assignment_expression__throw_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_throw_expression(child_1);

                boolean action_result_after = action____assignment_expression__throw_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_expression] --> [throw_expression] returns false.");
                    return false;
                }
            }
        }

        return action____assignment_expression__default_semantic_action(node);
    }

    protected boolean process_assignment_operator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __EQUAL_SIGN__)
            {
                boolean action_result = action____assignment_operator__EQUAL_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> ['='] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MUL_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__MUL_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [MUL_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __DIV_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__DIV_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [DIV_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MOD_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__MOD_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [MOD_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ADD_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__ADD_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [ADD_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SUB_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__SUB_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [SUB_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __RIGHT_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__RIGHT_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [RIGHT_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LEFT_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__LEFT_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [LEFT_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AND_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__AND_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [AND_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __XOR_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__XOR_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [XOR_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __OR_ASSIGN__)
            {
                boolean action_result = action____assignment_operator__OR_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [assignment_operator] --> [OR_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        return action____assignment_operator__default_semantic_action(node);
    }

    protected boolean process_attrib(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __any_word__)
            {
                boolean action_result_before = action____attrib__any_word(node, __ACTION_BEFORE__);

                boolean result_1 = process_any_word(child_1);

                boolean action_result_after = action____attrib__any_word(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attrib] --> [any_word] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __any_word__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression_list__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____attrib__any_word__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_any_word(child_1);
                boolean result_3 = process_expression_list(child_3);

                boolean action_result_after = action____attrib__any_word__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attrib] --> [any_word '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____attrib__default_semantic_action(node);
    }

    protected boolean process_attribute(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __ATTRIBUTE__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __attribute_list__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____attribute__ATTRIBUTE__LEFT_PARENTHESIS__LEFT_PARENTHESIS__attribute_list__RIGHT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_4 = process_attribute_list(child_4);

                boolean action_result_after = action____attribute__ATTRIBUTE__LEFT_PARENTHESIS__LEFT_PARENTHESIS__attribute_list__RIGHT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attribute] --> [ATTRIBUTE '(' '(' attribute_list ')' ')'] returns false.");
                    return false;
                }
            }
        }

        return action____attribute__default_semantic_action(node);
    }

    protected boolean process_attribute_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __attrib__)
            {
                boolean action_result_before = action____attribute_list__attrib(node, __ACTION_BEFORE__);

                boolean result_1 = process_attrib(child_1);

                boolean action_result_after = action____attribute_list__attrib(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attribute_list] --> [attrib] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __attribute_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __attrib__)
            {
                boolean action_result_before = action____attribute_list__attribute_list__COMMA__attrib(node, __ACTION_BEFORE__);

                boolean result_1 = process_attribute_list(child_1);
                boolean result_3 = process_attrib(child_3);

                boolean action_result_after = action____attribute_list__attribute_list__COMMA__attrib(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attribute_list] --> [attribute_list ',' attrib] returns false.");
                    return false;
                }
            }
        }

        return action____attribute_list__default_semantic_action(node);
    }

    protected boolean process_attributes(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __attribute__)
            {
                boolean action_result_before = action____attributes__attribute(node, __ACTION_BEFORE__);

                boolean result_1 = process_attribute(child_1);

                boolean action_result_after = action____attributes__attribute(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attributes] --> [attribute] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __attributes__
               &&child_2_type == __attribute__)
            {
                boolean action_result_before = action____attributes__attributes__attribute(node, __ACTION_BEFORE__);

                boolean result_1 = process_attributes(child_1);
                boolean result_2 = process_attribute(child_2);

                boolean action_result_after = action____attributes__attributes__attribute(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [attributes] --> [attributes attribute] returns false.");
                    return false;
                }
            }
        }

        return action____attributes__default_semantic_action(node);
    }

    protected boolean process_base_clause(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __COLON__
               &&child_2_type == __base_specifier_list__)
            {
                boolean action_result_before = action____base_clause__COLON__base_specifier_list(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_specifier_list(child_2);

                boolean action_result_after = action____base_clause__COLON__base_specifier_list(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_clause] --> [':' base_specifier_list] returns false.");
                    return false;
                }
            }
        }

        return action____base_clause__default_semantic_action(node);
    }

    protected boolean process_base_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_class_name(child_1);

                boolean action_result_after = action____base_specifier__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____base_specifier__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __VIRTUAL__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__VIRTUAL__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____base_specifier__VIRTUAL__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [VIRTUAL                        scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __VIRTUAL__
               &&child_2_type == __access_specifier__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__VIRTUAL__access_specifier__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_access_specifier(child_2);
                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____base_specifier__VIRTUAL__access_specifier__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [VIRTUAL access_specifier       scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __VIRTUAL__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__VIRTUAL__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____base_specifier__VIRTUAL__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [VIRTUAL                  SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __VIRTUAL__
               &&child_2_type == __access_specifier__
               &&child_3_type == __SCOPE__
               &&child_4_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__VIRTUAL__access_specifier__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_access_specifier(child_2);
                boolean result_4 = process_scoped_class_name(child_4);

                boolean action_result_after = action____base_specifier__VIRTUAL__access_specifier__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [VIRTUAL access_specifier SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __access_specifier__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__access_specifier__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_access_specifier(child_1);
                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____base_specifier__access_specifier__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [access_specifier               scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __access_specifier__
               &&child_2_type == __VIRTUAL__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__access_specifier__VIRTUAL__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_access_specifier(child_1);
                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____base_specifier__access_specifier__VIRTUAL__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [access_specifier VIRTUAL       scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __access_specifier__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__access_specifier__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_access_specifier(child_1);
                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____base_specifier__access_specifier__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [access_specifier         SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __access_specifier__
               &&child_2_type == __VIRTUAL__
               &&child_3_type == __SCOPE__
               &&child_4_type == __scoped_class_name__)
            {
                boolean action_result_before = action____base_specifier__access_specifier__VIRTUAL__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_access_specifier(child_1);
                boolean result_4 = process_scoped_class_name(child_4);

                boolean action_result_after = action____base_specifier__access_specifier__VIRTUAL__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier] --> [access_specifier VIRTUAL SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        return action____base_specifier__default_semantic_action(node);
    }

    protected boolean process_base_specifier_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __base_specifier__)
            {
                boolean action_result_before = action____base_specifier_list__base_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_base_specifier(child_1);

                boolean action_result_after = action____base_specifier_list__base_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier_list] --> [base_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __base_specifier_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __base_specifier__)
            {
                boolean action_result_before = action____base_specifier_list__base_specifier_list__COMMA__base_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_base_specifier_list(child_1);
                boolean result_3 = process_base_specifier(child_3);

                boolean action_result_after = action____base_specifier_list__base_specifier_list__COMMA__base_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [base_specifier_list] --> [base_specifier_list ',' base_specifier] returns false.");
                    return false;
                }
            }
        }

        return action____base_specifier_list__default_semantic_action(node);
    }

    protected boolean process_block_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __simple_declaration__)
            {
                boolean action_result_before = action____block_declaration__simple_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_simple_declaration(child_1);

                boolean action_result_after = action____block_declaration__simple_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [simple_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __asm_definition__)
            {
                boolean action_result_before = action____block_declaration__asm_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_asm_definition(child_1);

                boolean action_result_after = action____block_declaration__asm_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [asm_definition] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __namespace_alias_definition__)
            {
                boolean action_result_before = action____block_declaration__namespace_alias_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_namespace_alias_definition(child_1);

                boolean action_result_after = action____block_declaration__namespace_alias_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [namespace_alias_definition] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __using_declaration__)
            {
                boolean action_result_before = action____block_declaration__using_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_using_declaration(child_1);

                boolean action_result_after = action____block_declaration__using_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [using_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __using_directive__)
            {
                boolean action_result_before = action____block_declaration__using_directive(node, __ACTION_BEFORE__);

                boolean result_1 = process_using_directive(child_1);

                boolean action_result_after = action____block_declaration__using_directive(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [using_directive] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __EXTENSION__
               &&child_2_type == __simple_declaration__)
            {
                boolean action_result_before = action____block_declaration__EXTENSION__simple_declaration(node, __ACTION_BEFORE__);

                boolean result_2 = process_simple_declaration(child_2);

                boolean action_result_after = action____block_declaration__EXTENSION__simple_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [block_declaration] --> [EXTENSION simple_declaration] returns false.");
                    return false;
                }
            }
        }

        return action____block_declaration__default_semantic_action(node);
    }

    protected boolean process_boolean_literal(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CTRUE__)
            {
                boolean action_result = action____boolean_literal__CTRUE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [boolean_literal] --> [CTRUE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CFALSE__)
            {
                boolean action_result = action____boolean_literal__CFALSE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [boolean_literal] --> [CFALSE] returns false.");
                    return false;
                }
            }
        }

        return action____boolean_literal__default_semantic_action(node);
    }

    protected boolean process_cast_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __unary_expression__)
            {
                boolean action_result_before = action____cast_expression__unary_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_unary_expression(child_1);

                boolean action_result_after = action____cast_expression__unary_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cast_expression] --> [unary_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __type_id__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __cast_expression__)
            {
                boolean action_result_before = action____cast_expression__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_type_id(child_2);
                boolean result_4 = process_cast_expression(child_4);

                boolean action_result_after = action____cast_expression__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cast_expression] --> ['(' type_id ')' cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __compound_statement__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____cast_expression__LEFT_PARENTHESIS__compound_statement__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_compound_statement(child_2);

                boolean action_result_after = action____cast_expression__LEFT_PARENTHESIS__compound_statement__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cast_expression] --> ['(' compound_statement ')'] returns false.");
                    return false;
                }
            }
        }

        return action____cast_expression__default_semantic_action(node);
    }

    protected boolean process_class_name(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __IDENTIFIER__)
            {
                boolean action_result = action____class_name__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [class_name] --> [IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __IDENTIFIER__
               &&child_2_type == __BEGIN_TEMPLATE__
               &&child_3_type == __RIGHT_ANGLE_BRACKET__)
            {
                boolean action_result = action____class_name__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [class_name] --> [IDENTIFIER BEGIN_TEMPLATE '>'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __IDENTIFIER__
               &&child_2_type == __BEGIN_TEMPLATE__
               &&child_3_type == __template_argument_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__)
            {
                boolean action_result_before = action____class_name__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_argument_list(child_3);

                boolean action_result_after = action____class_name__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [class_name] --> [IDENTIFIER BEGIN_TEMPLATE template_argument_list '>'] returns false.");
                    return false;
                }
            }
        }

        return action____class_name__default_semantic_action(node);
    }

    protected boolean process_compound_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_BRACE__
               &&child_2_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____compound_statement__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [compound_statement] --> ['{' '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_BRACE__
               &&child_2_type == __statement_seq__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____compound_statement__LEFT_BRACE__statement_seq__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_statement_seq(child_2);

                boolean action_result_after = action____compound_statement__LEFT_BRACE__statement_seq__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [compound_statement] --> ['{' statement_seq '}'] returns false.");
                    return false;
                }
            }
        }

        return action____compound_statement__default_semantic_action(node);
    }

    protected boolean process_condition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __expression__)
            {
                boolean action_result_before = action____condition__expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression(child_1);

                boolean action_result_after = action____condition__expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [condition] --> [expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __declarator__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __assignment_expression__)
            {
                boolean action_result_before = action____condition__type_specifier_seq__declarator__EQUAL_SIGN__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_declarator(child_2);
                boolean result_4 = process_assignment_expression(child_4);

                boolean action_result_after = action____condition__type_specifier_seq__declarator__EQUAL_SIGN__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [condition] --> [type_specifier_seq declarator '=' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____condition__default_semantic_action(node);
    }

    protected boolean process_conditional_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __logical_or_expression__)
            {
                boolean action_result_before = action____conditional_expression__logical_or_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_or_expression(child_1);

                boolean action_result_after = action____conditional_expression__logical_or_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conditional_expression] --> [logical_or_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __logical_or_expression__
               &&child_2_type == __QUESTION_MARK__
               &&child_3_type == __expression__
               &&child_4_type == __COLON__
               &&child_5_type == __assignment_expression__)
            {
                boolean action_result_before = action____conditional_expression__logical_or_expression__QUESTION_MARK__expression__COLON__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_or_expression(child_1);
                boolean result_3 = process_expression(child_3);
                boolean result_5 = process_assignment_expression(child_5);

                boolean action_result_after = action____conditional_expression__logical_or_expression__QUESTION_MARK__expression__COLON__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conditional_expression] --> [logical_or_expression '?' expression ':' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____conditional_expression__default_semantic_action(node);
    }

    protected boolean process_constant_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __conditional_expression__)
            {
                boolean action_result_before = action____constant_expression__conditional_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_conditional_expression(child_1);

                boolean action_result_after = action____constant_expression__conditional_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [constant_expression] --> [conditional_expression] returns false.");
                    return false;
                }
            }
        }

        return action____constant_expression__default_semantic_action(node);
    }

    protected boolean process_constant_initializer(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __EQUAL_SIGN__
               &&child_2_type == __constant_expression__)
            {
                boolean action_result_before = action____constant_initializer__EQUAL_SIGN__constant_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_constant_expression(child_2);

                boolean action_result_after = action____constant_initializer__EQUAL_SIGN__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [constant_initializer] --> ['=' constant_expression] returns false.");
                    return false;
                }
            }
        }

        return action____constant_initializer__default_semantic_action(node);
    }

    protected boolean process_conversion_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ptr_operator__)
            {
                boolean action_result_before = action____conversion_declarator__ptr_operator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);

                boolean action_result_after = action____conversion_declarator__ptr_operator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conversion_declarator] --> [ptr_operator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ptr_operator__
               &&child_2_type == __conversion_declarator__)
            {
                boolean action_result_before = action____conversion_declarator__ptr_operator__conversion_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);
                boolean result_2 = process_conversion_declarator(child_2);

                boolean action_result_after = action____conversion_declarator__ptr_operator__conversion_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conversion_declarator] --> [ptr_operator conversion_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____conversion_declarator__default_semantic_action(node);
    }

    protected boolean process_conversion_function_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __OPERATOR__
               &&child_2_type == __conversion_type_id__)
            {
                boolean action_result_before = action____conversion_function_id__OPERATOR__conversion_type_id(node, __ACTION_BEFORE__);

                boolean result_2 = process_conversion_type_id(child_2);

                boolean action_result_after = action____conversion_function_id__OPERATOR__conversion_type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conversion_function_id] --> [OPERATOR conversion_type_id] returns false.");
                    return false;
                }
            }
        }

        return action____conversion_function_id__default_semantic_action(node);
    }

    protected boolean process_conversion_type_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier_seq__)
            {
                boolean action_result_before = action____conversion_type_id__type_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);

                boolean action_result_after = action____conversion_type_id__type_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conversion_type_id] --> [type_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __conversion_declarator__)
            {
                boolean action_result_before = action____conversion_type_id__type_specifier_seq__conversion_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_conversion_declarator(child_2);

                boolean action_result_after = action____conversion_type_id__type_specifier_seq__conversion_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [conversion_type_id] --> [type_specifier_seq conversion_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____conversion_type_id__default_semantic_action(node);
    }

    protected boolean process_ctor_initializer(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __COLON__
               &&child_2_type == __mem_initializer_list__)
            {
                boolean action_result_before = action____ctor_initializer__COLON__mem_initializer_list(node, __ACTION_BEFORE__);

                boolean result_2 = process_mem_initializer_list(child_2);

                boolean action_result_after = action____ctor_initializer__COLON__mem_initializer_list(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ctor_initializer] --> [':' mem_initializer_list] returns false.");
                    return false;
                }
            }
        }

        return action____ctor_initializer__default_semantic_action(node);
    }

    protected boolean process_cv_qualifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CONST__)
            {
                boolean action_result = action____cv_qualifier__CONST(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cv_qualifier] --> [CONST] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __VOLATILE__)
            {
                boolean action_result = action____cv_qualifier__VOLATILE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cv_qualifier] --> [VOLATILE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __RESTRICT__)
            {
                boolean action_result = action____cv_qualifier__RESTRICT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cv_qualifier] --> [RESTRICT] returns false.");
                    return false;
                }
            }
        }

        return action____cv_qualifier__default_semantic_action(node);
    }

    protected boolean process_cv_qualifier_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __cv_qualifier__)
            {
                boolean action_result_before = action____cv_qualifier_seq__cv_qualifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_cv_qualifier(child_1);

                boolean action_result_after = action____cv_qualifier_seq__cv_qualifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cv_qualifier_seq] --> [cv_qualifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __cv_qualifier_seq__
               &&child_2_type == __cv_qualifier__)
            {
                boolean action_result_before = action____cv_qualifier_seq__cv_qualifier_seq__cv_qualifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_cv_qualifier_seq(child_1);
                boolean result_2 = process_cv_qualifier(child_2);

                boolean action_result_after = action____cv_qualifier_seq__cv_qualifier_seq__cv_qualifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [cv_qualifier_seq] --> [cv_qualifier_seq cv_qualifier] returns false.");
                    return false;
                }
            }
        }

        return action____cv_qualifier_seq__default_semantic_action(node);
    }

    protected boolean process_decl_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __storage_class_specifier__)
            {
                boolean action_result_before = action____decl_specifier__storage_class_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_storage_class_specifier(child_1);

                boolean action_result_after = action____decl_specifier__storage_class_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier] --> [storage_class_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier__)
            {
                boolean action_result_before = action____decl_specifier__type_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier(child_1);

                boolean action_result_after = action____decl_specifier__type_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier] --> [type_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __function_specifier__)
            {
                boolean action_result_before = action____decl_specifier__function_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_specifier(child_1);

                boolean action_result_after = action____decl_specifier__function_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier] --> [function_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __FRIEND__)
            {
                boolean action_result = action____decl_specifier__FRIEND(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier] --> [FRIEND] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __TYPEDEF__)
            {
                boolean action_result = action____decl_specifier__TYPEDEF(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier] --> [TYPEDEF] returns false.");
                    return false;
                }
            }
        }

        return action____decl_specifier__default_semantic_action(node);
    }

    protected boolean process_decl_specifier_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __decl_specifier__)
            {
                boolean action_result_before = action____decl_specifier_seq__decl_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier(child_1);

                boolean action_result_after = action____decl_specifier_seq__decl_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier_seq] --> [decl_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __decl_specifier__)
            {
                boolean action_result_before = action____decl_specifier_seq__decl_specifier_seq__decl_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_decl_specifier(child_2);

                boolean action_result_after = action____decl_specifier_seq__decl_specifier_seq__decl_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [decl_specifier_seq] --> [decl_specifier_seq decl_specifier] returns false.");
                    return false;
                }
            }
        }

        return action____decl_specifier_seq__default_semantic_action(node);
    }

    protected boolean process_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __block_declaration__)
            {
                boolean action_result_before = action____declaration__block_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_block_declaration(child_1);

                boolean action_result_after = action____declaration__block_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [block_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __function_definition__)
            {
                boolean action_result_before = action____declaration__function_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_definition(child_1);

                boolean action_result_after = action____declaration__function_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [function_definition] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __template_declaration__)
            {
                boolean action_result_before = action____declaration__template_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_declaration(child_1);

                boolean action_result_after = action____declaration__template_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [template_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __explicit_instantiation__)
            {
                boolean action_result_before = action____declaration__explicit_instantiation(node, __ACTION_BEFORE__);

                boolean result_1 = process_explicit_instantiation(child_1);

                boolean action_result_after = action____declaration__explicit_instantiation(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [explicit_instantiation] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __explicit_specialization__)
            {
                boolean action_result_before = action____declaration__explicit_specialization(node, __ACTION_BEFORE__);

                boolean result_1 = process_explicit_specialization(child_1);

                boolean action_result_after = action____declaration__explicit_specialization(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [explicit_specialization] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __linkage_specification__)
            {
                boolean action_result_before = action____declaration__linkage_specification(node, __ACTION_BEFORE__);

                boolean result_1 = process_linkage_specification(child_1);

                boolean action_result_after = action____declaration__linkage_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [linkage_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __namespace_definition__)
            {
                boolean action_result_before = action____declaration__namespace_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_namespace_definition(child_1);

                boolean action_result_after = action____declaration__namespace_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration] --> [namespace_definition] returns false.");
                    return false;
                }
            }
        }

        return action____declaration__default_semantic_action(node);
    }

    protected boolean process_declaration_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declaration__)
            {
                boolean action_result_before = action____declaration_seq__declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_declaration(child_1);

                boolean action_result_after = action____declaration_seq__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration_seq] --> [declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __declaration_seq__
               &&child_2_type == __declaration__)
            {
                boolean action_result_before = action____declaration_seq__declaration_seq__declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_declaration_seq(child_1);
                boolean result_2 = process_declaration(child_2);

                boolean action_result_after = action____declaration_seq__declaration_seq__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declaration_seq] --> [declaration_seq declaration] returns false.");
                    return false;
                }
            }
        }

        return action____declaration_seq__default_semantic_action(node);
    }

    protected boolean process_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __direct_declarator__)
            {
                boolean action_result_before = action____declarator__direct_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);

                boolean action_result_after = action____declarator__direct_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator] --> [direct_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ptr_operator__
               &&child_2_type == __declarator__)
            {
                boolean action_result_before = action____declarator__ptr_operator__declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);
                boolean result_2 = process_declarator(child_2);

                boolean action_result_after = action____declarator__ptr_operator__declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator] --> [ptr_operator declarator] returns false.");
                    return false;
                }
            }
        }

        return action____declarator__default_semantic_action(node);
    }

    protected boolean process_declarator_head(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator_id__)
            {
                boolean action_result_before = action____declarator_head__declarator_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator_id(child_1);

                boolean action_result_after = action____declarator_head__declarator_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_head] --> [declarator_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __declarator__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____declarator_head__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_declarator(child_2);

                boolean action_result_after = action____declarator_head__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_head] --> ['(' declarator ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ptr_operator__
               &&child_2_type == __declarator_head__)
            {
                boolean action_result_before = action____declarator_head__ptr_operator__declarator_head(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);
                boolean result_2 = process_declarator_head(child_2);

                boolean action_result_after = action____declarator_head__ptr_operator__declarator_head(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_head] --> [ptr_operator declarator_head] returns false.");
                    return false;
                }
            }
        }

        return action____declarator_head__default_semantic_action(node);
    }

    protected boolean process_declarator_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __id_expression__)
            {
                boolean action_result_before = action____declarator_id__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_id_expression(child_1);

                boolean action_result_after = action____declarator_id__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_id] --> [id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __id_expression__)
            {
                boolean action_result_before = action____declarator_id__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_id_expression(child_2);

                boolean action_result_after = action____declarator_id__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_id] --> [SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        return action____declarator_id__default_semantic_action(node);
    }

    protected boolean process_declarator_tail(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);

                boolean action_result_after = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['(' parameter_declaration_clause ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_cv_qualifier_seq(child_4);

                boolean action_result_after = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['(' parameter_declaration_clause ')' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __exception_specification__)
            {
                boolean action_result_before = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_exception_specification(child_4);

                boolean action_result_after = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['(' parameter_declaration_clause ')'                  exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __cv_qualifier_seq__
               &&child_5_type == __exception_specification__)
            {
                boolean action_result_before = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_cv_qualifier_seq(child_4);
                boolean result_5 = process_exception_specification(child_5);

                boolean action_result_after = action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['(' parameter_declaration_clause ')' cv_qualifier_seq exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __RIGHT_BRACKET__)
            {
                boolean action_result = action____declarator_tail__LEFT_BRACKET__RIGHT_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __constant_expression__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____declarator_tail__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_2 = process_constant_expression(child_2);

                boolean action_result_after = action____declarator_tail__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail] --> ['[' constant_expression ']'] returns false.");
                    return false;
                }
            }
        }

        return action____declarator_tail__default_semantic_action(node);
    }

    protected boolean process_declarator_tail_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator_tail__)
            {
                boolean action_result_before = action____declarator_tail_seq__declarator_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator_tail(child_1);

                boolean action_result_after = action____declarator_tail_seq__declarator_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail_seq] --> [declarator_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __declarator_tail_seq__
               &&child_2_type == __declarator_tail__)
            {
                boolean action_result_before = action____declarator_tail_seq__declarator_tail_seq__declarator_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator_tail_seq(child_1);
                boolean result_2 = process_declarator_tail(child_2);

                boolean action_result_after = action____declarator_tail_seq__declarator_tail_seq__declarator_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [declarator_tail_seq] --> [declarator_tail_seq declarator_tail] returns false.");
                    return false;
                }
            }
        }

        return action____declarator_tail_seq__default_semantic_action(node);
    }

    protected boolean process_delete_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __DELETE__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____delete_expression__DELETE__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____delete_expression__DELETE__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [delete_expression] --> [DELETE cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __DELETE__
               &&child_3_type == __cast_expression__)
            {
                boolean action_result_before = action____delete_expression__SCOPE__DELETE__cast_expression(node, __ACTION_BEFORE__);

                boolean result_3 = process_cast_expression(child_3);

                boolean action_result_after = action____delete_expression__SCOPE__DELETE__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [delete_expression] --> [SCOPE DELETE cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __DELETE__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __RIGHT_BRACKET__
               &&child_4_type == __cast_expression__)
            {
                boolean action_result_before = action____delete_expression__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(node, __ACTION_BEFORE__);

                boolean result_4 = process_cast_expression(child_4);

                boolean action_result_after = action____delete_expression__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [delete_expression] --> [DELETE '[' ']' cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __DELETE__
               &&child_3_type == __LEFT_BRACKET__
               &&child_4_type == __RIGHT_BRACKET__
               &&child_5_type == __cast_expression__)
            {
                boolean action_result_before = action____delete_expression__SCOPE__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(node, __ACTION_BEFORE__);

                boolean result_5 = process_cast_expression(child_5);

                boolean action_result_after = action____delete_expression__SCOPE__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [delete_expression] --> [SCOPE DELETE '[' ']' cast_expression] returns false.");
                    return false;
                }
            }
        }

        return action____delete_expression__default_semantic_action(node);
    }

    protected boolean process_direct_abstract_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['(' parameter_declaration_clause ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_cv_qualifier_seq(child_4);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['(' parameter_declaration_clause ')' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_exception_specification(child_4);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['(' parameter_declaration_clause ')'                  exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __parameter_declaration_clause__
               &&child_3_type == __RIGHT_PARENTHESIS__
               &&child_4_type == __cv_qualifier_seq__
               &&child_5_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_BEFORE__);

                boolean result_2 = process_parameter_declaration_clause(child_2);
                boolean result_4 = process_cv_qualifier_seq(child_4);
                boolean result_5 = process_exception_specification(child_5);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['(' parameter_declaration_clause ')' cv_qualifier_seq exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '(' parameter_declaration_clause ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_cv_qualifier_seq(child_5);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '(' parameter_declaration_clause ')' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_exception_specification(child_5);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '(' parameter_declaration_clause ')'                  exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __cv_qualifier_seq__
               &&child_6_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_cv_qualifier_seq(child_5);
                boolean result_6 = process_exception_specification(child_6);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5 && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '(' parameter_declaration_clause ')' cv_qualifier_seq exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __RIGHT_BRACKET__)
            {
                boolean action_result = action____direct_abstract_declarator__LEFT_BRACKET__RIGHT_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __constant_expression__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_2 = process_constant_expression(child_2);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['[' constant_expression ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __direct_abstract_declarator__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __constant_expression__
               &&child_4_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_abstract_declarator(child_1);
                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> [direct_abstract_declarator '[' constant_expression ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __abstract_declarator__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____direct_abstract_declarator__LEFT_PARENTHESIS__abstract_declarator__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_abstract_declarator(child_2);

                boolean action_result_after = action____direct_abstract_declarator__LEFT_PARENTHESIS__abstract_declarator__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_abstract_declarator] --> ['(' abstract_declarator ')'] returns false.");
                    return false;
                }
            }
        }

        return action____direct_abstract_declarator__default_semantic_action(node);
    }

    protected boolean process_direct_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator_id__)
            {
                boolean action_result_before = action____direct_declarator__declarator_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator_id(child_1);

                boolean action_result_after = action____direct_declarator__declarator_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [declarator_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '(' parameter_declaration_clause ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_cv_qualifier_seq(child_5);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '(' parameter_declaration_clause ')' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_exception_specification(child_5);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '(' parameter_declaration_clause ')'                  exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __parameter_declaration_clause__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __cv_qualifier_seq__
               &&child_6_type == __exception_specification__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);
                boolean result_3 = process_parameter_declaration_clause(child_3);
                boolean result_5 = process_cv_qualifier_seq(child_5);
                boolean result_6 = process_exception_specification(child_6);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true && result_5 && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '(' parameter_declaration_clause ')' cv_qualifier_seq exception_specification] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_BRACKET__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_BRACKET__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __direct_declarator__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __constant_expression__
               &&child_4_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_declarator__direct_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_declarator(child_1);
                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____direct_declarator__direct_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> [direct_declarator '[' constant_expression ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __declarator__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____direct_declarator__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_declarator(child_2);

                boolean action_result_after = action____direct_declarator__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_declarator] --> ['(' declarator ')'] returns false.");
                    return false;
                }
            }
        }

        return action____direct_declarator__default_semantic_action(node);
    }

    protected boolean process_direct_new_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __expression__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_new_declarator__LEFT_BRACKET__expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression(child_2);

                boolean action_result_after = action____direct_new_declarator__LEFT_BRACKET__expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_new_declarator] --> ['[' expression ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __direct_new_declarator__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __constant_expression__
               &&child_4_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____direct_new_declarator__direct_new_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_new_declarator(child_1);
                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____direct_new_declarator__direct_new_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [direct_new_declarator] --> [direct_new_declarator '[' constant_expression ']'] returns false.");
                    return false;
                }
            }
        }

        return action____direct_new_declarator__default_semantic_action(node);
    }

    protected boolean process_enumerator_definition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __IDENTIFIER__)
            {
                boolean action_result = action____enumerator_definition__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [enumerator_definition] --> [IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __IDENTIFIER__
               &&child_2_type == __EQUAL_SIGN__
               &&child_3_type == __constant_expression__)
            {
                boolean action_result_before = action____enumerator_definition__IDENTIFIER__EQUAL_SIGN__constant_expression(node, __ACTION_BEFORE__);

                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____enumerator_definition__IDENTIFIER__EQUAL_SIGN__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [enumerator_definition] --> [IDENTIFIER '=' constant_expression] returns false.");
                    return false;
                }
            }
        }

        return action____enumerator_definition__default_semantic_action(node);
    }

    protected boolean process_enumerator_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __enumerator_definition__)
            {
                boolean action_result_before = action____enumerator_list__enumerator_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_enumerator_definition(child_1);

                boolean action_result_after = action____enumerator_list__enumerator_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [enumerator_list] --> [enumerator_definition] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __enumerator_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __enumerator_definition__)
            {
                boolean action_result_before = action____enumerator_list__enumerator_list__COMMA__enumerator_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_enumerator_list(child_1);
                boolean result_3 = process_enumerator_definition(child_3);

                boolean action_result_after = action____enumerator_list__enumerator_list__COMMA__enumerator_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [enumerator_list] --> [enumerator_list ',' enumerator_definition] returns false.");
                    return false;
                }
            }
        }

        return action____enumerator_list__default_semantic_action(node);
    }

    protected boolean process_equality_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __relational_expression__)
            {
                boolean action_result_before = action____equality_expression__relational_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_relational_expression(child_1);

                boolean action_result_after = action____equality_expression__relational_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [equality_expression] --> [relational_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __equality_expression__
               &&child_2_type == __EQ_OP__
               &&child_3_type == __relational_expression__)
            {
                boolean action_result_before = action____equality_expression__equality_expression__EQ_OP__relational_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_equality_expression(child_1);
                boolean result_3 = process_relational_expression(child_3);

                boolean action_result_after = action____equality_expression__equality_expression__EQ_OP__relational_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [equality_expression] --> [equality_expression EQ_OP relational_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __equality_expression__
               &&child_2_type == __NE_OP__
               &&child_3_type == __relational_expression__)
            {
                boolean action_result_before = action____equality_expression__equality_expression__NE_OP__relational_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_equality_expression(child_1);
                boolean result_3 = process_relational_expression(child_3);

                boolean action_result_after = action____equality_expression__equality_expression__NE_OP__relational_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [equality_expression] --> [equality_expression NE_OP relational_expression] returns false.");
                    return false;
                }
            }
        }

        return action____equality_expression__default_semantic_action(node);
    }

    protected boolean process_exception_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __declarator__)
            {
                boolean action_result_before = action____exception_declaration__type_specifier_seq__declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_declarator(child_2);

                boolean action_result_after = action____exception_declaration__type_specifier_seq__declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_declaration] --> [type_specifier_seq declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __abstract_declarator__)
            {
                boolean action_result_before = action____exception_declaration__type_specifier_seq__abstract_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_abstract_declarator(child_2);

                boolean action_result_after = action____exception_declaration__type_specifier_seq__abstract_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_declaration] --> [type_specifier_seq abstract_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier_seq__)
            {
                boolean action_result_before = action____exception_declaration__type_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);

                boolean action_result_after = action____exception_declaration__type_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_declaration] --> [type_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ELLIPSIS__)
            {
                boolean action_result = action____exception_declaration__ELLIPSIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_declaration] --> [ELLIPSIS] returns false.");
                    return false;
                }
            }
        }

        return action____exception_declaration__default_semantic_action(node);
    }

    protected boolean process_exception_specification(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __THROW__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result = action____exception_specification__THROW__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_specification] --> [THROW '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __THROW__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id_list__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____exception_specification__THROW__LEFT_PARENTHESIS__type_id_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id_list(child_3);

                boolean action_result_after = action____exception_specification__THROW__LEFT_PARENTHESIS__type_id_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exception_specification] --> [THROW '(' type_id_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____exception_specification__default_semantic_action(node);
    }

    protected boolean process_exclusive_or_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __and_expression__)
            {
                boolean action_result_before = action____exclusive_or_expression__and_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_and_expression(child_1);

                boolean action_result_after = action____exclusive_or_expression__and_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exclusive_or_expression] --> [and_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __exclusive_or_expression__
               &&child_2_type == __CARET__
               &&child_3_type == __and_expression__)
            {
                boolean action_result_before = action____exclusive_or_expression__exclusive_or_expression__CARET__and_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_exclusive_or_expression(child_1);
                boolean result_3 = process_and_expression(child_3);

                boolean action_result_after = action____exclusive_or_expression__exclusive_or_expression__CARET__and_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [exclusive_or_expression] --> [exclusive_or_expression '^' and_expression] returns false.");
                    return false;
                }
            }
        }

        return action____exclusive_or_expression__default_semantic_action(node);
    }

    protected boolean process_explicit_instantiation(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __declaration__)
            {
                boolean action_result_before = action____explicit_instantiation__TEMPLATE__declaration(node, __ACTION_BEFORE__);

                boolean result_2 = process_declaration(child_2);

                boolean action_result_after = action____explicit_instantiation__TEMPLATE__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [explicit_instantiation] --> [TEMPLATE declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __EXTERN__
               &&child_2_type == __TEMPLATE__
               &&child_3_type == __declaration__)
            {
                boolean action_result_before = action____explicit_instantiation__EXTERN__TEMPLATE__declaration(node, __ACTION_BEFORE__);

                boolean result_3 = process_declaration(child_3);

                boolean action_result_after = action____explicit_instantiation__EXTERN__TEMPLATE__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [explicit_instantiation] --> [EXTERN TEMPLATE declaration] returns false.");
                    return false;
                }
            }
        }

        return action____explicit_instantiation__default_semantic_action(node);
    }

    protected boolean process_explicit_specialization(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __RIGHT_ANGLE_BRACKET__
               &&child_4_type == __declaration__)
            {
                boolean action_result_before = action____explicit_specialization__TEMPLATE__LEFT_ANGLE_BRACKET__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_BEFORE__);

                boolean result_4 = process_declaration(child_4);

                boolean action_result_after = action____explicit_specialization__TEMPLATE__LEFT_ANGLE_BRACKET__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [explicit_specialization] --> [TEMPLATE '<' '>' declaration] returns false.");
                    return false;
                }
            }
        }

        return action____explicit_specialization__default_semantic_action(node);
    }

    protected boolean process_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __assignment_expression__)
            {
                boolean action_result_before = action____expression__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_assignment_expression(child_1);

                boolean action_result_after = action____expression__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [expression] --> [assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __expression__
               &&child_2_type == __COMMA__
               &&child_3_type == __assignment_expression__)
            {
                boolean action_result_before = action____expression__expression__COMMA__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression(child_1);
                boolean result_3 = process_assignment_expression(child_3);

                boolean action_result_after = action____expression__expression__COMMA__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [expression] --> [expression ',' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____expression__default_semantic_action(node);
    }

    protected boolean process_expression_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __assignment_expression__)
            {
                boolean action_result_before = action____expression_list__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_assignment_expression(child_1);

                boolean action_result_after = action____expression_list__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [expression_list] --> [assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __expression_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __assignment_expression__)
            {
                boolean action_result_before = action____expression_list__expression_list__COMMA__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression_list(child_1);
                boolean result_3 = process_assignment_expression(child_3);

                boolean action_result_after = action____expression_list__expression_list__COMMA__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [expression_list] --> [expression_list ',' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____expression_list__default_semantic_action(node);
    }

    protected boolean process_expression_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __expression__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result_before = action____expression_statement__expression__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression(child_1);

                boolean action_result_after = action____expression_statement__expression__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [expression_statement] --> [expression ';'] returns false.");
                    return false;
                }
            }
        }

        return action____expression_statement__default_semantic_action(node);
    }

    protected boolean process_for_init_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __expression_statement__)
            {
                boolean action_result_before = action____for_init_statement__expression_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression_statement(child_1);

                boolean action_result_after = action____for_init_statement__expression_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [for_init_statement] --> [expression_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __simple_declaration__)
            {
                boolean action_result_before = action____for_init_statement__simple_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_simple_declaration(child_1);

                boolean action_result_after = action____for_init_statement__simple_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [for_init_statement] --> [simple_declaration] returns false.");
                    return false;
                }
            }
        }

        return action____for_init_statement__default_semantic_action(node);
    }

    protected boolean process_function_definition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __function_prefix__
               &&child_2_type == __compound_statement__)
            {
                boolean action_result_before = action____function_definition__function_prefix__compound_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_prefix(child_1);
                boolean result_2 = process_compound_statement(child_2);

                boolean action_result_after = action____function_definition__function_prefix__compound_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_definition] --> [function_prefix compound_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __function_prefix__
               &&child_2_type == __ctor_initializer__
               &&child_3_type == __compound_statement__)
            {
                boolean action_result_before = action____function_definition__function_prefix__ctor_initializer__compound_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_prefix(child_1);
                boolean result_2 = process_ctor_initializer(child_2);
                boolean result_3 = process_compound_statement(child_3);

                boolean action_result_after = action____function_definition__function_prefix__ctor_initializer__compound_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_definition] --> [function_prefix ctor_initializer compound_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __function_prefix__
               &&child_2_type == __function_try_block__)
            {
                boolean action_result_before = action____function_definition__function_prefix__function_try_block(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_prefix(child_1);
                boolean result_2 = process_function_try_block(child_2);

                boolean action_result_after = action____function_definition__function_prefix__function_try_block(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_definition] --> [function_prefix function_try_block] returns false.");
                    return false;
                }
            }
        }

        return action____function_definition__default_semantic_action(node);
    }

    protected boolean process_function_prefix(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator__)
            {
                boolean action_result_before = action____function_prefix__declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator(child_1);

                boolean action_result_after = action____function_prefix__declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_prefix] --> [declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__)
            {
                boolean action_result_before = action____function_prefix__decl_specifier_seq__declarator_head(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);

                boolean action_result_after = action____function_prefix__decl_specifier_seq__declarator_head(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_prefix] --> [decl_specifier_seq            declarator_head] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __attributes__
               &&child_3_type == __declarator_head__)
            {
                boolean action_result_before = action____function_prefix__decl_specifier_seq__attributes__declarator_head(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_attributes(child_2);
                boolean result_3 = process_declarator_head(child_3);

                boolean action_result_after = action____function_prefix__decl_specifier_seq__attributes__declarator_head(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_prefix] --> [decl_specifier_seq attributes declarator_head] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__)
            {
                boolean action_result_before = action____function_prefix__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);

                boolean action_result_after = action____function_prefix__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_prefix] --> [decl_specifier_seq            declarator_head declarator_tail_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __attributes__
               &&child_3_type == __declarator_head__
               &&child_4_type == __declarator_tail_seq__)
            {
                boolean action_result_before = action____function_prefix__decl_specifier_seq__attributes__declarator_head__declarator_tail_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_attributes(child_2);
                boolean result_3 = process_declarator_head(child_3);
                boolean result_4 = process_declarator_tail_seq(child_4);

                boolean action_result_after = action____function_prefix__decl_specifier_seq__attributes__declarator_head__declarator_tail_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_prefix] --> [decl_specifier_seq attributes declarator_head declarator_tail_seq] returns false.");
                    return false;
                }
            }
        }

        return action____function_prefix__default_semantic_action(node);
    }

    protected boolean process_function_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __INLINE__)
            {
                boolean action_result = action____function_specifier__INLINE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_specifier] --> [INLINE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __VIRTUAL__)
            {
                boolean action_result = action____function_specifier__VIRTUAL(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_specifier] --> [VIRTUAL] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __EXPLICIT__)
            {
                boolean action_result = action____function_specifier__EXPLICIT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_specifier] --> [EXPLICIT] returns false.");
                    return false;
                }
            }
        }

        return action____function_specifier__default_semantic_action(node);
    }

    protected boolean process_function_try_block(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __TRY__
               &&child_2_type == __compound_statement__
               &&child_3_type == __handler_seq__)
            {
                boolean action_result_before = action____function_try_block__TRY__compound_statement__handler_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_compound_statement(child_2);
                boolean result_3 = process_handler_seq(child_3);

                boolean action_result_after = action____function_try_block__TRY__compound_statement__handler_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_try_block] --> [TRY compound_statement  handler_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TRY__
               &&child_2_type == __ctor_initializer__
               &&child_3_type == __compound_statement__
               &&child_4_type == __handler_seq__)
            {
                boolean action_result_before = action____function_try_block__TRY__ctor_initializer__compound_statement__handler_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_ctor_initializer(child_2);
                boolean result_3 = process_compound_statement(child_3);
                boolean result_4 = process_handler_seq(child_4);

                boolean action_result_after = action____function_try_block__TRY__ctor_initializer__compound_statement__handler_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [function_try_block] --> [TRY ctor_initializer compound_statement handler_seq] returns false.");
                    return false;
                }
            }
        }

        return action____function_try_block__default_semantic_action(node);
    }

    protected boolean process_handler(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __CATCH__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __exception_declaration__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __compound_statement__)
            {
                boolean action_result_before = action____handler__CATCH__LEFT_PARENTHESIS__exception_declaration__RIGHT_PARENTHESIS__compound_statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_exception_declaration(child_3);
                boolean result_5 = process_compound_statement(child_5);

                boolean action_result_after = action____handler__CATCH__LEFT_PARENTHESIS__exception_declaration__RIGHT_PARENTHESIS__compound_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [handler] --> [CATCH '(' exception_declaration ')' compound_statement] returns false.");
                    return false;
                }
            }
        }

        return action____handler__default_semantic_action(node);
    }

    protected boolean process_handler_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __handler__)
            {
                boolean action_result_before = action____handler_seq__handler(node, __ACTION_BEFORE__);

                boolean result_1 = process_handler(child_1);

                boolean action_result_after = action____handler_seq__handler(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [handler_seq] --> [handler] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __handler_seq__
               &&child_2_type == __handler__)
            {
                boolean action_result_before = action____handler_seq__handler_seq__handler(node, __ACTION_BEFORE__);

                boolean result_1 = process_handler_seq(child_1);
                boolean result_2 = process_handler(child_2);

                boolean action_result_after = action____handler_seq__handler_seq__handler(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [handler_seq] --> [handler_seq handler] returns false.");
                    return false;
                }
            }
        }

        return action____handler_seq__default_semantic_action(node);
    }

    protected boolean process_id_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __unqualified_id__)
            {
                boolean action_result_before = action____id_expression__unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_unqualified_id(child_1);

                boolean action_result_after = action____id_expression__unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [id_expression] --> [unqualified_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __qualified_id__)
            {
                boolean action_result_before = action____id_expression__qualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_qualified_id(child_1);

                boolean action_result_after = action____id_expression__qualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [id_expression] --> [qualified_id] returns false.");
                    return false;
                }
            }
        }

        return action____id_expression__default_semantic_action(node);
    }

    protected boolean process_inclusive_or_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __exclusive_or_expression__)
            {
                boolean action_result_before = action____inclusive_or_expression__exclusive_or_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_exclusive_or_expression(child_1);

                boolean action_result_after = action____inclusive_or_expression__exclusive_or_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [inclusive_or_expression] --> [exclusive_or_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __inclusive_or_expression__
               &&child_2_type == __VERTICAL_BAR__
               &&child_3_type == __exclusive_or_expression__)
            {
                boolean action_result_before = action____inclusive_or_expression__inclusive_or_expression__VERTICAL_BAR__exclusive_or_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_inclusive_or_expression(child_1);
                boolean result_3 = process_exclusive_or_expression(child_3);

                boolean action_result_after = action____inclusive_or_expression__inclusive_or_expression__VERTICAL_BAR__exclusive_or_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [inclusive_or_expression] --> [inclusive_or_expression '|' exclusive_or_expression] returns false.");
                    return false;
                }
            }
        }

        return action____inclusive_or_expression__default_semantic_action(node);
    }

    protected boolean process_init_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator__)
            {
                boolean action_result_before = action____init_declarator__declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator(child_1);

                boolean action_result_after = action____init_declarator__declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [init_declarator] --> [declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __declarator__
               &&child_2_type == __initializer__)
            {
                boolean action_result_before = action____init_declarator__declarator__initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator(child_1);
                boolean result_2 = process_initializer(child_2);

                boolean action_result_after = action____init_declarator__declarator__initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [init_declarator] --> [declarator initializer] returns false.");
                    return false;
                }
            }
        }

        return action____init_declarator__default_semantic_action(node);
    }

    protected boolean process_init_declarator_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __init_declarator__)
            {
                boolean action_result_before = action____init_declarator_list__init_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_init_declarator(child_1);

                boolean action_result_after = action____init_declarator_list__init_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [init_declarator_list] --> [init_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __init_declarator_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __init_declarator__)
            {
                boolean action_result_before = action____init_declarator_list__init_declarator_list__COMMA__init_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_init_declarator_list(child_1);
                boolean result_3 = process_init_declarator(child_3);

                boolean action_result_after = action____init_declarator_list__init_declarator_list__COMMA__init_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [init_declarator_list] --> [init_declarator_list ',' init_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____init_declarator_list__default_semantic_action(node);
    }

    protected boolean process_initializer(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __EQUAL_SIGN__
               &&child_2_type == __initializer_clause__)
            {
                boolean action_result_before = action____initializer__EQUAL_SIGN__initializer_clause(node, __ACTION_BEFORE__);

                boolean result_2 = process_initializer_clause(child_2);

                boolean action_result_after = action____initializer__EQUAL_SIGN__initializer_clause(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer] --> ['=' initializer_clause] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __expression_list__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression_list(child_2);

                boolean action_result_after = action____initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer] --> ['(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____initializer__default_semantic_action(node);
    }

    protected boolean process_initializer_clause(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __assignment_expression__)
            {
                boolean action_result_before = action____initializer_clause__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_assignment_expression(child_1);

                boolean action_result_after = action____initializer_clause__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_clause] --> [assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_BRACE__
               &&child_2_type == __initializer_list__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____initializer_clause__LEFT_BRACE__initializer_list__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_initializer_list(child_2);

                boolean action_result_after = action____initializer_clause__LEFT_BRACE__initializer_list__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_clause] --> ['{' initializer_list '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __LEFT_BRACE__
               &&child_2_type == __initializer_list__
               &&child_3_type == __COMMA__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____initializer_clause__LEFT_BRACE__initializer_list__COMMA__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_initializer_list(child_2);

                boolean action_result_after = action____initializer_clause__LEFT_BRACE__initializer_list__COMMA__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_clause] --> ['{' initializer_list ',' '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_BRACE__
               &&child_2_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____initializer_clause__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_clause] --> ['{' '}'] returns false.");
                    return false;
                }
            }
        }

        return action____initializer_clause__default_semantic_action(node);
    }

    protected boolean process_initializer_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __initializer_clause__)
            {
                boolean action_result_before = action____initializer_list__initializer_clause(node, __ACTION_BEFORE__);

                boolean result_1 = process_initializer_clause(child_1);

                boolean action_result_after = action____initializer_list__initializer_clause(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_list] --> [initializer_clause] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __initializer_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __initializer_clause__)
            {
                boolean action_result_before = action____initializer_list__initializer_list__COMMA__initializer_clause(node, __ACTION_BEFORE__);

                boolean result_1 = process_initializer_list(child_1);
                boolean result_3 = process_initializer_clause(child_3);

                boolean action_result_after = action____initializer_list__initializer_list__COMMA__initializer_clause(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [initializer_list] --> [initializer_list ',' initializer_clause] returns false.");
                    return false;
                }
            }
        }

        return action____initializer_list__default_semantic_action(node);
    }

    protected boolean process_iteration_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __WHILE__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __condition__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __statement__)
            {
                boolean action_result_before = action____iteration_statement__WHILE__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_condition(child_3);
                boolean result_5 = process_statement(child_5);

                boolean action_result_after = action____iteration_statement__WHILE__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [WHILE '(' condition ')' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __DO__
               &&child_2_type == __statement__
               &&child_3_type == __WHILE__
               &&child_4_type == __LEFT_PARENTHESIS__
               &&child_5_type == __expression__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____iteration_statement__DO__statement__WHILE__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_statement(child_2);
                boolean result_5 = process_expression(child_5);

                boolean action_result_after = action____iteration_statement__DO__statement__WHILE__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true && result_5 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [DO statement WHILE '(' expression ')' ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __FOR__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __for_init_statement__
               &&child_4_type == __SEMICOLON__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __statement__)
            {
                boolean action_result_before = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_for_init_statement(child_3);
                boolean result_6 = process_statement(child_6);

                boolean action_result_after = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [FOR '(' for_init_statement           ';'            ')' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __FOR__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __for_init_statement__
               &&child_4_type == __SEMICOLON__
               &&child_5_type == __expression__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __statement__)
            {
                boolean action_result_before = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_for_init_statement(child_3);
                boolean result_5 = process_expression(child_5);
                boolean result_7 = process_statement(child_7);

                boolean action_result_after = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [FOR '(' for_init_statement           ';' expression ')' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __FOR__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __for_init_statement__
               &&child_4_type == __condition__
               &&child_5_type == __SEMICOLON__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __statement__)
            {
                boolean action_result_before = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_for_init_statement(child_3);
                boolean result_4 = process_condition(child_4);
                boolean result_7 = process_statement(child_7);

                boolean action_result_after = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && result_4 && true && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [FOR '(' for_init_statement condition ';'            ')' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __FOR__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __for_init_statement__
               &&child_4_type == __condition__
               &&child_5_type == __SEMICOLON__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__
               &&child_8_type == __statement__)
            {
                boolean action_result_before = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_for_init_statement(child_3);
                boolean result_4 = process_condition(child_4);
                boolean result_6 = process_expression(child_6);
                boolean result_8 = process_statement(child_8);

                boolean action_result_after = action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && result_4 && true && result_6 && true && result_8)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [iteration_statement] --> [FOR '(' for_init_statement condition ';' expression ')' statement] returns false.");
                    return false;
                }
            }
        }

        return action____iteration_statement__default_semantic_action(node);
    }

    protected boolean process_jump_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __BREAK__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result = action____jump_statement__BREAK__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [jump_statement] --> [BREAK ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __CONTINUE__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result = action____jump_statement__CONTINUE__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [jump_statement] --> [CONTINUE ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __RETURN__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result = action____jump_statement__RETURN__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [jump_statement] --> [RETURN ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __RETURN__
               &&child_2_type == __expression__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____jump_statement__RETURN__expression__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression(child_2);

                boolean action_result_after = action____jump_statement__RETURN__expression__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [jump_statement] --> [RETURN expression ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __GOTO__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result = action____jump_statement__GOTO__IDENTIFIER__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [jump_statement] --> [GOTO IDENTIFIER ';'] returns false.");
                    return false;
                }
            }
        }

        return action____jump_statement__default_semantic_action(node);
    }

    protected boolean process_labeled_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __IDENTIFIER__
               &&child_2_type == __COLON__
               &&child_3_type == __statement__)
            {
                boolean action_result_before = action____labeled_statement__IDENTIFIER__COLON__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_statement(child_3);

                boolean action_result_after = action____labeled_statement__IDENTIFIER__COLON__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [labeled_statement] --> [IDENTIFIER ':' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __CASE__
               &&child_2_type == __constant_expression__
               &&child_3_type == __COLON__
               &&child_4_type == __statement__)
            {
                boolean action_result_before = action____labeled_statement__CASE__constant_expression__COLON__statement(node, __ACTION_BEFORE__);

                boolean result_2 = process_constant_expression(child_2);
                boolean result_4 = process_statement(child_4);

                boolean action_result_after = action____labeled_statement__CASE__constant_expression__COLON__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [labeled_statement] --> [CASE constant_expression ':' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __DEFAULT__
               &&child_2_type == __COLON__
               &&child_3_type == __statement__)
            {
                boolean action_result_before = action____labeled_statement__DEFAULT__COLON__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_statement(child_3);

                boolean action_result_after = action____labeled_statement__DEFAULT__COLON__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [labeled_statement] --> [DEFAULT ':' statement] returns false.");
                    return false;
                }
            }
        }

        return action____labeled_statement__default_semantic_action(node);
    }

    protected boolean process_linkage_specification(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __EXTERN__
               &&child_2_type == __STRING_LITERAL__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____linkage_specification__EXTERN__STRING_LITERAL__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [linkage_specification] --> [EXTERN STRING_LITERAL '{' '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __EXTERN__
               &&child_2_type == __STRING_LITERAL__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __declaration_seq__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____linkage_specification__EXTERN__STRING_LITERAL__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_4 = process_declaration_seq(child_4);

                boolean action_result_after = action____linkage_specification__EXTERN__STRING_LITERAL__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [linkage_specification] --> [EXTERN STRING_LITERAL '{' declaration_seq '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __EXTERN__
               &&child_2_type == __STRING_LITERAL__
               &&child_3_type == __declaration__)
            {
                boolean action_result_before = action____linkage_specification__EXTERN__STRING_LITERAL__declaration(node, __ACTION_BEFORE__);

                boolean result_3 = process_declaration(child_3);

                boolean action_result_after = action____linkage_specification__EXTERN__STRING_LITERAL__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [linkage_specification] --> [EXTERN STRING_LITERAL declaration] returns false.");
                    return false;
                }
            }
        }

        return action____linkage_specification__default_semantic_action(node);
    }

    protected boolean process_literal(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CONSTANT__)
            {
                boolean action_result = action____literal__CONSTANT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [literal] --> [CONSTANT] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __STRING_LITERAL_seq__)
            {
                boolean action_result_before = action____literal__STRING_LITERAL_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_STRING_LITERAL_seq(child_1);

                boolean action_result_after = action____literal__STRING_LITERAL_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [literal] --> [STRING_LITERAL_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __boolean_literal__)
            {
                boolean action_result_before = action____literal__boolean_literal(node, __ACTION_BEFORE__);

                boolean result_1 = process_boolean_literal(child_1);

                boolean action_result_after = action____literal__boolean_literal(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [literal] --> [boolean_literal] returns false.");
                    return false;
                }
            }
        }

        return action____literal__default_semantic_action(node);
    }

    protected boolean process_logical_and_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __inclusive_or_expression__)
            {
                boolean action_result_before = action____logical_and_expression__inclusive_or_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_inclusive_or_expression(child_1);

                boolean action_result_after = action____logical_and_expression__inclusive_or_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [logical_and_expression] --> [inclusive_or_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __logical_and_expression__
               &&child_2_type == __AND_OP__
               &&child_3_type == __inclusive_or_expression__)
            {
                boolean action_result_before = action____logical_and_expression__logical_and_expression__AND_OP__inclusive_or_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_and_expression(child_1);
                boolean result_3 = process_inclusive_or_expression(child_3);

                boolean action_result_after = action____logical_and_expression__logical_and_expression__AND_OP__inclusive_or_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [logical_and_expression] --> [logical_and_expression AND_OP inclusive_or_expression] returns false.");
                    return false;
                }
            }
        }

        return action____logical_and_expression__default_semantic_action(node);
    }

    protected boolean process_logical_or_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __logical_and_expression__)
            {
                boolean action_result_before = action____logical_or_expression__logical_and_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_and_expression(child_1);

                boolean action_result_after = action____logical_or_expression__logical_and_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [logical_or_expression] --> [logical_and_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __logical_or_expression__
               &&child_2_type == __OR_OP__
               &&child_3_type == __logical_and_expression__)
            {
                boolean action_result_before = action____logical_or_expression__logical_or_expression__OR_OP__logical_and_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_logical_or_expression(child_1);
                boolean result_3 = process_logical_and_expression(child_3);

                boolean action_result_after = action____logical_or_expression__logical_or_expression__OR_OP__logical_and_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [logical_or_expression] --> [logical_or_expression OR_OP logical_and_expression] returns false.");
                    return false;
                }
            }
        }

        return action____logical_or_expression__default_semantic_action(node);
    }

    protected boolean process_mem_initializer(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __mem_initializer_id__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_mem_initializer_id(child_1);

                boolean action_result_after = action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer] --> [mem_initializer_id '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __mem_initializer_id__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression_list__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_mem_initializer_id(child_1);
                boolean result_3 = process_expression_list(child_3);

                boolean action_result_after = action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer] --> [mem_initializer_id '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____mem_initializer__default_semantic_action(node);
    }

    protected boolean process_mem_initializer_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_class_name__)
            {
                boolean action_result_before = action____mem_initializer_id__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_class_name(child_1);

                boolean action_result_after = action____mem_initializer_id__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer_id] --> [scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____mem_initializer_id__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____mem_initializer_id__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer_id] --> [SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        return action____mem_initializer_id__default_semantic_action(node);
    }

    protected boolean process_mem_initializer_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __mem_initializer__)
            {
                boolean action_result_before = action____mem_initializer_list__mem_initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_mem_initializer(child_1);

                boolean action_result_after = action____mem_initializer_list__mem_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer_list] --> [mem_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __mem_initializer_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __mem_initializer__)
            {
                boolean action_result_before = action____mem_initializer_list__mem_initializer_list__COMMA__mem_initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_mem_initializer_list(child_1);
                boolean result_3 = process_mem_initializer(child_3);

                boolean action_result_after = action____mem_initializer_list__mem_initializer_list__COMMA__mem_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [mem_initializer_list] --> [mem_initializer_list ',' mem_initializer] returns false.");
                    return false;
                }
            }
        }

        return action____mem_initializer_list__default_semantic_action(node);
    }

    protected boolean process_member_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __decl_specifier_seq__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);

                boolean action_result_after = action____member_declaration__decl_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __attributes__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__attributes(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_attributes(child_2);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__attributes(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq attributes] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __member_declarator_list__)
            {
                boolean action_result_before = action____member_declaration__member_declarator_list(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_declarator_list(child_1);

                boolean action_result_after = action____member_declaration__member_declarator_list(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [member_declarator_list] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_member_declarator_list_tail(child_3);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __constant_initializer__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_constant_initializer(child_3);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head constant_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __constant_initializer__
               &&child_4_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_constant_initializer(child_3);
                boolean result_4 = process_member_declarator_list_tail(child_4);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head constant_initializer member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_member_declarator_list_tail(child_4);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __constant_initializer__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_constant_initializer(child_4);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq constant_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __constant_initializer__
               &&child_5_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_constant_initializer(child_4);
                boolean result_5 = process_member_declarator_list_tail(child_5);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4 && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq constant_initializer member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __COLON__
               &&child_3_type == __constant_expression__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__COLON__constant_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__COLON__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq ':' constant_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __COLON__
               &&child_3_type == __constant_expression__
               &&child_4_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__COLON__constant_expression__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_3 = process_constant_expression(child_3);
                boolean result_4 = process_member_declarator_list_tail(child_4);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__COLON__constant_expression__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq ':' constant_expression member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __COLON__
               &&child_4_type == __constant_expression__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_4 = process_constant_expression(child_4);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq IDENTIFIER ':' constant_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __COLON__
               &&child_4_type == __constant_expression__
               &&child_5_type == __member_declarator_list_tail__)
            {
                boolean action_result_before = action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression__member_declarator_list_tail(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_4 = process_constant_expression(child_4);
                boolean result_5 = process_member_declarator_list_tail(child_5);

                boolean action_result_after = action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression__member_declarator_list_tail(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4 && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [decl_specifier_seq IDENTIFIER ':' constant_expression member_declarator_list_tail] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_unqualified_id__)
            {
                boolean action_result_before = action____member_declaration__scoped_unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_unqualified_id(child_1);

                boolean action_result_after = action____member_declaration__scoped_unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [scoped_unqualified_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __scoped_unqualified_id__)
            {
                boolean action_result_before = action____member_declaration__SCOPE__scoped_unqualified_id(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_unqualified_id(child_2);

                boolean action_result_after = action____member_declaration__SCOPE__scoped_unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration] --> [SCOPE scoped_unqualified_id] returns false.");
                    return false;
                }
            }
        }

        return action____member_declaration__default_semantic_action(node);
    }

    protected boolean process_member_declaration_alt(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __function_definition__)
            {
                boolean action_result_before = action____member_declaration_alt__function_definition(node, __ACTION_BEFORE__);

                boolean result_1 = process_function_definition(child_1);

                boolean action_result_after = action____member_declaration_alt__function_definition(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration_alt] --> [function_definition] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __using_declaration__)
            {
                boolean action_result_before = action____member_declaration_alt__using_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_using_declaration(child_1);

                boolean action_result_after = action____member_declaration_alt__using_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration_alt] --> [using_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __template_declaration__)
            {
                boolean action_result_before = action____member_declaration_alt__template_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_declaration(child_1);

                boolean action_result_after = action____member_declaration_alt__template_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration_alt] --> [template_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __access_specifier__
               &&child_2_type == __COLON__)
            {
                boolean action_result_before = action____member_declaration_alt__access_specifier__COLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_access_specifier(child_1);

                boolean action_result_after = action____member_declaration_alt__access_specifier__COLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declaration_alt] --> [access_specifier ':'] returns false.");
                    return false;
                }
            }
        }

        return action____member_declaration_alt__default_semantic_action(node);
    }

    protected boolean process_member_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declarator__)
            {
                boolean action_result_before = action____member_declarator__declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator(child_1);

                boolean action_result_after = action____member_declarator__declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator] --> [declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __declarator__
               &&child_2_type == __constant_initializer__)
            {
                boolean action_result_before = action____member_declarator__declarator__constant_initializer(node, __ACTION_BEFORE__);

                boolean result_1 = process_declarator(child_1);
                boolean result_2 = process_constant_initializer(child_2);

                boolean action_result_after = action____member_declarator__declarator__constant_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator] --> [declarator constant_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __COLON__
               &&child_2_type == __constant_expression__)
            {
                boolean action_result_before = action____member_declarator__COLON__constant_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_constant_expression(child_2);

                boolean action_result_after = action____member_declarator__COLON__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator] --> [':' constant_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __IDENTIFIER__
               &&child_2_type == __COLON__
               &&child_3_type == __constant_expression__)
            {
                boolean action_result_before = action____member_declarator__IDENTIFIER__COLON__constant_expression(node, __ACTION_BEFORE__);

                boolean result_3 = process_constant_expression(child_3);

                boolean action_result_after = action____member_declarator__IDENTIFIER__COLON__constant_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator] --> [IDENTIFIER ':' constant_expression] returns false.");
                    return false;
                }
            }
        }

        return action____member_declarator__default_semantic_action(node);
    }

    protected boolean process_member_declarator_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __member_declarator__)
            {
                boolean action_result_before = action____member_declarator_list__member_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_declarator(child_1);

                boolean action_result_after = action____member_declarator_list__member_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator_list] --> [member_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __member_declarator_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __member_declarator__)
            {
                boolean action_result_before = action____member_declarator_list__member_declarator_list__COMMA__member_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_declarator_list(child_1);
                boolean result_3 = process_member_declarator(child_3);

                boolean action_result_after = action____member_declarator_list__member_declarator_list__COMMA__member_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator_list] --> [member_declarator_list ',' member_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____member_declarator_list__default_semantic_action(node);
    }

    protected boolean process_member_declarator_list_tail(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __COMMA__
               &&child_2_type == __member_declarator_list__)
            {
                boolean action_result_before = action____member_declarator_list_tail__COMMA__member_declarator_list(node, __ACTION_BEFORE__);

                boolean result_2 = process_member_declarator_list(child_2);

                boolean action_result_after = action____member_declarator_list_tail__COMMA__member_declarator_list(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_declarator_list_tail] --> [',' member_declarator_list] returns false.");
                    return false;
                }
            }
        }

        return action____member_declarator_list_tail__default_semantic_action(node);
    }

    protected boolean process_member_specification(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SEMICOLON__)
            {
                boolean action_result = action____member_specification__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __member_declaration__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result_before = action____member_specification__member_declaration__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_declaration(child_1);

                boolean action_result_after = action____member_specification__member_declaration__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_declaration ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __member_declaration_alt__)
            {
                boolean action_result_before = action____member_specification__member_declaration_alt(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_declaration_alt(child_1);

                boolean action_result_after = action____member_specification__member_declaration_alt(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_declaration_alt] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __EXTENSION__
               &&child_2_type == __member_declaration__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____member_specification__EXTENSION__member_declaration__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_member_declaration(child_2);

                boolean action_result_after = action____member_specification__EXTENSION__member_declaration__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [EXTENSION member_declaration ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __EXTENSION__
               &&child_2_type == __member_declaration_alt__)
            {
                boolean action_result_before = action____member_specification__EXTENSION__member_declaration_alt(node, __ACTION_BEFORE__);

                boolean result_2 = process_member_declaration_alt(child_2);

                boolean action_result_after = action____member_specification__EXTENSION__member_declaration_alt(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [EXTENSION member_declaration_alt] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __member_specification__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result_before = action____member_specification__member_specification__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_specification(child_1);

                boolean action_result_after = action____member_specification__member_specification__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_specification ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __member_specification__
               &&child_2_type == __member_declaration__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____member_specification__member_specification__member_declaration__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_specification(child_1);
                boolean result_2 = process_member_declaration(child_2);

                boolean action_result_after = action____member_specification__member_specification__member_declaration__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_specification member_declaration ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __member_specification__
               &&child_2_type == __member_declaration_alt__)
            {
                boolean action_result_before = action____member_specification__member_specification__member_declaration_alt(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_specification(child_1);
                boolean result_2 = process_member_declaration_alt(child_2);

                boolean action_result_after = action____member_specification__member_specification__member_declaration_alt(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_specification member_declaration_alt] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __member_specification__
               &&child_2_type == __EXTENSION__
               &&child_3_type == __member_declaration__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____member_specification__member_specification__EXTENSION__member_declaration__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_specification(child_1);
                boolean result_3 = process_member_declaration(child_3);

                boolean action_result_after = action____member_specification__member_specification__EXTENSION__member_declaration__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_specification EXTENSION member_declaration ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __member_specification__
               &&child_2_type == __EXTENSION__
               &&child_3_type == __member_declaration_alt__)
            {
                boolean action_result_before = action____member_specification__member_specification__EXTENSION__member_declaration_alt(node, __ACTION_BEFORE__);

                boolean result_1 = process_member_specification(child_1);
                boolean result_3 = process_member_declaration_alt(child_3);

                boolean action_result_after = action____member_specification__member_specification__EXTENSION__member_declaration_alt(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [member_specification] --> [member_specification EXTENSION member_declaration_alt] returns false.");
                    return false;
                }
            }
        }

        return action____member_specification__default_semantic_action(node);
    }

    protected boolean process_multiplicative_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __pm_expression__)
            {
                boolean action_result_before = action____multiplicative_expression__pm_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_pm_expression(child_1);

                boolean action_result_after = action____multiplicative_expression__pm_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [multiplicative_expression] --> [pm_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __multiplicative_expression__
               &&child_2_type == __ASTERISK__
               &&child_3_type == __pm_expression__)
            {
                boolean action_result_before = action____multiplicative_expression__multiplicative_expression__ASTERISK__pm_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_multiplicative_expression(child_1);
                boolean result_3 = process_pm_expression(child_3);

                boolean action_result_after = action____multiplicative_expression__multiplicative_expression__ASTERISK__pm_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [multiplicative_expression] --> [multiplicative_expression '*' pm_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __multiplicative_expression__
               &&child_2_type == __SLASH__
               &&child_3_type == __pm_expression__)
            {
                boolean action_result_before = action____multiplicative_expression__multiplicative_expression__SLASH__pm_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_multiplicative_expression(child_1);
                boolean result_3 = process_pm_expression(child_3);

                boolean action_result_after = action____multiplicative_expression__multiplicative_expression__SLASH__pm_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [multiplicative_expression] --> [multiplicative_expression '/' pm_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __multiplicative_expression__
               &&child_2_type == __PERCENT_SIGN__
               &&child_3_type == __pm_expression__)
            {
                boolean action_result_before = action____multiplicative_expression__multiplicative_expression__PERCENT_SIGN__pm_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_multiplicative_expression(child_1);
                boolean result_3 = process_pm_expression(child_3);

                boolean action_result_after = action____multiplicative_expression__multiplicative_expression__PERCENT_SIGN__pm_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [multiplicative_expression] --> [multiplicative_expression '%' pm_expression] returns false.");
                    return false;
                }
            }
        }

        return action____multiplicative_expression__default_semantic_action(node);
    }

    protected boolean process_namespace_alias_definition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __NAMESPACE__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __qualified_namespace_specifier__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____namespace_alias_definition__NAMESPACE__IDENTIFIER__EQUAL_SIGN__qualified_namespace_specifier__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_4 = process_qualified_namespace_specifier(child_4);

                boolean action_result_after = action____namespace_alias_definition__NAMESPACE__IDENTIFIER__EQUAL_SIGN__qualified_namespace_specifier__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [namespace_alias_definition] --> [NAMESPACE IDENTIFIER '=' qualified_namespace_specifier ';'] returns false.");
                    return false;
                }
            }
        }

        return action____namespace_alias_definition__default_semantic_action(node);
    }

    protected boolean process_namespace_definition(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __NAMESPACE__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____namespace_definition__NAMESPACE__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [namespace_definition] --> [NAMESPACE              '{'                 '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __NAMESPACE__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __declaration_seq__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____namespace_definition__NAMESPACE__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_3 = process_declaration_seq(child_3);

                boolean action_result_after = action____namespace_definition__NAMESPACE__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [namespace_definition] --> [NAMESPACE            '{' declaration_seq '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __NAMESPACE__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____namespace_definition__NAMESPACE__IDENTIFIER__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [namespace_definition] --> [NAMESPACE IDENTIFIER '{'                 '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __NAMESPACE__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __declaration_seq__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____namespace_definition__NAMESPACE__IDENTIFIER__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_4 = process_declaration_seq(child_4);

                boolean action_result_after = action____namespace_definition__NAMESPACE__IDENTIFIER__LEFT_BRACE__declaration_seq__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [namespace_definition] --> [NAMESPACE IDENTIFIER '{' declaration_seq '}'] returns false.");
                    return false;
                }
            }
        }

        return action____namespace_definition__default_semantic_action(node);
    }

    protected boolean process_nested_name_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__)
            {
                boolean action_result_before = action____nested_name_specifier__class_name__SCOPE(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);

                boolean action_result_after = action____nested_name_specifier__class_name__SCOPE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [nested_name_specifier] --> [class_name    SCOPE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __nested_name_specifier__)
            {
                boolean action_result_before = action____nested_name_specifier__class_name__SCOPE__nested_name_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_3 = process_nested_name_specifier(child_3);

                boolean action_result_after = action____nested_name_specifier__class_name__SCOPE__nested_name_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [nested_name_specifier] --> [class_name SCOPE nested_name_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __nested_name_specifier__)
            {
                boolean action_result_before = action____nested_name_specifier__class_name__SCOPE__TEMPLATE__nested_name_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_4 = process_nested_name_specifier(child_4);

                boolean action_result_after = action____nested_name_specifier__class_name__SCOPE__TEMPLATE__nested_name_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [nested_name_specifier] --> [class_name  SCOPE TEMPLATE nested_name_specifier] returns false.");
                    return false;
                }
            }
        }

        return action____nested_name_specifier__default_semantic_action(node);
    }

    protected boolean process_new_declarator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ptr_operator__)
            {
                boolean action_result_before = action____new_declarator__ptr_operator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);

                boolean action_result_after = action____new_declarator__ptr_operator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_declarator] --> [ptr_operator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ptr_operator__
               &&child_2_type == __new_declarator__)
            {
                boolean action_result_before = action____new_declarator__ptr_operator__new_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_ptr_operator(child_1);
                boolean result_2 = process_new_declarator(child_2);

                boolean action_result_after = action____new_declarator__ptr_operator__new_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_declarator] --> [ptr_operator new_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __direct_new_declarator__)
            {
                boolean action_result_before = action____new_declarator__direct_new_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_direct_new_declarator(child_1);

                boolean action_result_after = action____new_declarator__direct_new_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_declarator] --> [direct_new_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____new_declarator__default_semantic_action(node);
    }

    protected boolean process_new_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_type_id__)
            {
                boolean action_result_before = action____new_expression__NEW__new_type_id(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_type_id(child_2);

                boolean action_result_after = action____new_expression__NEW__new_type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW               new_type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_type_id__
               &&child_3_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__NEW__new_type_id__new_initializer(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_type_id(child_2);
                boolean result_3 = process_new_initializer(child_3);

                boolean action_result_after = action____new_expression__NEW__new_type_id__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW               new_type_id new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_placement__
               &&child_3_type == __new_type_id__)
            {
                boolean action_result_before = action____new_expression__NEW__new_placement__new_type_id(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_placement(child_2);
                boolean result_3 = process_new_type_id(child_3);

                boolean action_result_after = action____new_expression__NEW__new_placement__new_type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW new_placement new_type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_placement__
               &&child_3_type == __new_type_id__
               &&child_4_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__NEW__new_placement__new_type_id__new_initializer(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_placement(child_2);
                boolean result_3 = process_new_type_id(child_3);
                boolean result_4 = process_new_initializer(child_4);

                boolean action_result_after = action____new_expression__NEW__new_placement__new_type_id__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW new_placement new_type_id new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_type_id__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_type_id(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_type_id(child_3);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW               new_type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_type_id__
               &&child_4_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_type_id__new_initializer(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_type_id(child_3);
                boolean result_4 = process_new_initializer(child_4);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_type_id__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW               new_type_id new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_placement__
               &&child_4_type == __new_type_id__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_placement__new_type_id(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_placement(child_3);
                boolean result_4 = process_new_type_id(child_4);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_placement__new_type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW new_placement new_type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_placement__
               &&child_4_type == __new_type_id__
               &&child_5_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_placement__new_type_id__new_initializer(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_placement(child_3);
                boolean result_4 = process_new_type_id(child_4);
                boolean result_5 = process_new_initializer(child_5);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_placement__new_type_id__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && result_4 && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW new_placement new_type_id new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW               '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);
                boolean result_5 = process_new_initializer(child_5);

                boolean action_result_after = action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW               '(' type_id ')' new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_placement__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __type_id__
               &&child_5_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_placement(child_2);
                boolean result_4 = process_type_id(child_4);

                boolean action_result_after = action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW new_placement '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __new_placement__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __type_id__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_BEFORE__);

                boolean result_2 = process_new_placement(child_2);
                boolean result_4 = process_type_id(child_4);
                boolean result_6 = process_new_initializer(child_6);

                boolean action_result_after = action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [NEW new_placement '(' type_id ')' new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __type_id__
               &&child_5_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_4 = process_type_id(child_4);

                boolean action_result_after = action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW               '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __type_id__
               &&child_5_type == __RIGHT_PARENTHESIS__
               &&child_6_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_BEFORE__);

                boolean result_4 = process_type_id(child_4);
                boolean result_6 = process_new_initializer(child_6);

                boolean action_result_after = action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW               '(' type_id ')' new_initializer] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_placement__
               &&child_4_type == __LEFT_PARENTHESIS__
               &&child_5_type == __type_id__
               &&child_6_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_placement(child_3);
                boolean result_5 = process_type_id(child_5);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW new_placement '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __NEW__
               &&child_3_type == __new_placement__
               &&child_4_type == __LEFT_PARENTHESIS__
               &&child_5_type == __type_id__
               &&child_6_type == __RIGHT_PARENTHESIS__
               &&child_7_type == __new_initializer__)
            {
                boolean action_result_before = action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_BEFORE__);

                boolean result_3 = process_new_placement(child_3);
                boolean result_5 = process_type_id(child_5);
                boolean result_7 = process_new_initializer(child_7);

                boolean action_result_after = action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_expression] --> [SCOPE NEW new_placement '(' type_id ')' new_initializer] returns false.");
                    return false;
                }
            }
        }

        return action____new_expression__default_semantic_action(node);
    }

    protected boolean process_new_initializer(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result = action____new_initializer__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_initializer] --> ['(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __expression_list__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression_list(child_2);

                boolean action_result_after = action____new_initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_initializer] --> ['(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____new_initializer__default_semantic_action(node);
    }

    protected boolean process_new_placement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __expression_list__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____new_placement__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression_list(child_2);

                boolean action_result_after = action____new_placement__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_placement] --> ['(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        return action____new_placement__default_semantic_action(node);
    }

    protected boolean process_new_type_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier_seq__)
            {
                boolean action_result_before = action____new_type_id__type_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);

                boolean action_result_after = action____new_type_id__type_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_type_id] --> [type_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __new_declarator__)
            {
                boolean action_result_before = action____new_type_id__type_specifier_seq__new_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_new_declarator(child_2);

                boolean action_result_after = action____new_type_id__type_specifier_seq__new_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [new_type_id] --> [type_specifier_seq new_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____new_type_id__default_semantic_action(node);
    }

    protected boolean process_operator_(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __NEW__)
            {
                boolean action_result = action____operator___NEW(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [NEW] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __DELETE__)
            {
                boolean action_result = action____operator___DELETE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [DELETE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __NEW__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result = action____operator___NEW__LEFT_BRACKET__RIGHT_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [NEW '[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __DELETE__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __RIGHT_BRACKET__)
            {
                boolean action_result = action____operator___DELETE__LEFT_BRACKET__RIGHT_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [DELETE '[' ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PLUS_SIGN__)
            {
                boolean action_result = action____operator___PLUS_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['+'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MINUS_SIGN__)
            {
                boolean action_result = action____operator___MINUS_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['-'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ASTERISK__)
            {
                boolean action_result = action____operator___ASTERISK(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['*'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SLASH__)
            {
                boolean action_result = action____operator___SLASH(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['/'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PERCENT_SIGN__)
            {
                boolean action_result = action____operator___PERCENT_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['%'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CARET__)
            {
                boolean action_result = action____operator___CARET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['^'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AMPERSAND__)
            {
                boolean action_result = action____operator___AMPERSAND(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['&'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __VERTICAL_BAR__)
            {
                boolean action_result = action____operator___VERTICAL_BAR(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['|'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __TILDE__)
            {
                boolean action_result = action____operator___TILDE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['~'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __BANG__)
            {
                boolean action_result = action____operator___BANG(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['!'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __EQUAL_SIGN__)
            {
                boolean action_result = action____operator___EQUAL_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['='] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LEFT_ANGLE_BRACKET__)
            {
                boolean action_result = action____operator___LEFT_ANGLE_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['<'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __RIGHT_ANGLE_BRACKET__)
            {
                boolean action_result = action____operator___RIGHT_ANGLE_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['>'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ADD_ASSIGN__)
            {
                boolean action_result = action____operator___ADD_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [ADD_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SUB_ASSIGN__)
            {
                boolean action_result = action____operator___SUB_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [SUB_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MUL_ASSIGN__)
            {
                boolean action_result = action____operator___MUL_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [MUL_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __DIV_ASSIGN__)
            {
                boolean action_result = action____operator___DIV_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [DIV_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MOD_ASSIGN__)
            {
                boolean action_result = action____operator___MOD_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [MOD_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __XOR_ASSIGN__)
            {
                boolean action_result = action____operator___XOR_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [XOR_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AND_ASSIGN__)
            {
                boolean action_result = action____operator___AND_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [AND_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __OR_ASSIGN__)
            {
                boolean action_result = action____operator___OR_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [OR_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LEFT_OP__)
            {
                boolean action_result = action____operator___LEFT_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [LEFT_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __RIGHT_OP__)
            {
                boolean action_result = action____operator___RIGHT_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [RIGHT_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __RIGHT_ASSIGN__)
            {
                boolean action_result = action____operator___RIGHT_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [RIGHT_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LEFT_ASSIGN__)
            {
                boolean action_result = action____operator___LEFT_ASSIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [LEFT_ASSIGN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __EQ_OP__)
            {
                boolean action_result = action____operator___EQ_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [EQ_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __NE_OP__)
            {
                boolean action_result = action____operator___NE_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [NE_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LE_OP__)
            {
                boolean action_result = action____operator___LE_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [LE_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __GE_OP__)
            {
                boolean action_result = action____operator___GE_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [GE_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AND_OP__)
            {
                boolean action_result = action____operator___AND_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [AND_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __OR_OP__)
            {
                boolean action_result = action____operator___OR_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [OR_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __INC_OP__)
            {
                boolean action_result = action____operator___INC_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [INC_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __DEC_OP__)
            {
                boolean action_result = action____operator___DEC_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [DEC_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __COMMA__)
            {
                boolean action_result = action____operator___COMMA(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [','] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PTR_MEMBER__)
            {
                boolean action_result = action____operator___PTR_MEMBER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [PTR_MEMBER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PTR_OP__)
            {
                boolean action_result = action____operator___PTR_OP(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> [PTR_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result = action____operator___LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __LEFT_BRACKET__
               &&child_2_type == __RIGHT_BRACKET__)
            {
                boolean action_result = action____operator___LEFT_BRACKET__RIGHT_BRACKET(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_] --> ['[' ']'] returns false.");
                    return false;
                }
            }
        }

        return action____operator___default_semantic_action(node);
    }

    protected boolean process_operator_function_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __OPERATOR__
               &&child_2_type == __operator___)
            {
                boolean action_result_before = action____operator_function_id__OPERATOR__operator_(node, __ACTION_BEFORE__);

                boolean result_2 = process_operator_(child_2);

                boolean action_result_after = action____operator_function_id__OPERATOR__operator_(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [operator_function_id] --> [OPERATOR operator_] returns false.");
                    return false;
                }
            }
        }

        return action____operator_function_id__default_semantic_action(node);
    }

    protected boolean process_parameter_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__declarator_head(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__declarator_head(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq declarator_head] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __assignment_expression__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__declarator_head__EQUAL_SIGN__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_4 = process_assignment_expression(child_4);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__declarator_head__EQUAL_SIGN__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq declarator_head '=' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __EQUAL_SIGN__
               &&child_5_type == __assignment_expression__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__EQUAL_SIGN__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_5 = process_assignment_expression(child_5);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__EQUAL_SIGN__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq '=' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __decl_specifier_seq__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __abstract_declarator__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__abstract_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_abstract_declarator(child_2);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__abstract_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq abstract_declarator] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __EQUAL_SIGN__
               &&child_3_type == __assignment_expression__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__EQUAL_SIGN__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_3 = process_assignment_expression(child_3);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__EQUAL_SIGN__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq                     '=' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __abstract_declarator__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __assignment_expression__)
            {
                boolean action_result_before = action____parameter_declaration__decl_specifier_seq__abstract_declarator__EQUAL_SIGN__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_abstract_declarator(child_2);
                boolean result_4 = process_assignment_expression(child_4);

                boolean action_result_after = action____parameter_declaration__decl_specifier_seq__abstract_declarator__EQUAL_SIGN__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration] --> [decl_specifier_seq abstract_declarator '=' assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____parameter_declaration__default_semantic_action(node);
    }

    protected boolean process_parameter_declaration_clause(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 0)
        {
            boolean action_result = action____parameter_declaration_clause__empty(node);
            if (action_result == true)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __parameter_declaration_list__)
            {
                boolean action_result_before = action____parameter_declaration_clause__parameter_declaration_list(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration_list(child_1);

                boolean action_result_after = action____parameter_declaration_clause__parameter_declaration_list(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_clause] --> [parameter_declaration_list] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ELLIPSIS__)
            {
                boolean action_result = action____parameter_declaration_clause__ELLIPSIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_clause] --> [ELLIPSIS] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __parameter_declaration_list__
               &&child_2_type == __ELLIPSIS__)
            {
                boolean action_result_before = action____parameter_declaration_clause__parameter_declaration_list__ELLIPSIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration_list(child_1);

                boolean action_result_after = action____parameter_declaration_clause__parameter_declaration_list__ELLIPSIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_clause] --> [parameter_declaration_list ELLIPSIS] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __parameter_declaration_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __ELLIPSIS__)
            {
                boolean action_result_before = action____parameter_declaration_clause__parameter_declaration_list__COMMA__ELLIPSIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration_list(child_1);

                boolean action_result_after = action____parameter_declaration_clause__parameter_declaration_list__COMMA__ELLIPSIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_clause] --> [parameter_declaration_list ',' ELLIPSIS] returns false.");
                    return false;
                }
            }
        }

        return action____parameter_declaration_clause__default_semantic_action(node);
    }

    protected boolean process_parameter_declaration_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __parameter_declaration__)
            {
                boolean action_result_before = action____parameter_declaration_list__parameter_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration(child_1);

                boolean action_result_after = action____parameter_declaration_list__parameter_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_list] --> [parameter_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __parameter_declaration_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __parameter_declaration__)
            {
                boolean action_result_before = action____parameter_declaration_list__parameter_declaration_list__COMMA__parameter_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration_list(child_1);
                boolean result_3 = process_parameter_declaration(child_3);

                boolean action_result_after = action____parameter_declaration_list__parameter_declaration_list__COMMA__parameter_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [parameter_declaration_list] --> [parameter_declaration_list ',' parameter_declaration] returns false.");
                    return false;
                }
            }
        }

        return action____parameter_declaration_list__default_semantic_action(node);
    }

    protected boolean process_pm_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __cast_expression__)
            {
                boolean action_result_before = action____pm_expression__cast_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_cast_expression(child_1);

                boolean action_result_after = action____pm_expression__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [pm_expression] --> [cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __pm_expression__
               &&child_2_type == __DOT_MEMBER__
               &&child_3_type == __cast_expression__)
            {
                boolean action_result_before = action____pm_expression__pm_expression__DOT_MEMBER__cast_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_pm_expression(child_1);
                boolean result_3 = process_cast_expression(child_3);

                boolean action_result_after = action____pm_expression__pm_expression__DOT_MEMBER__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [pm_expression] --> [pm_expression DOT_MEMBER cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __pm_expression__
               &&child_2_type == __PTR_MEMBER__
               &&child_3_type == __cast_expression__)
            {
                boolean action_result_before = action____pm_expression__pm_expression__PTR_MEMBER__cast_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_pm_expression(child_1);
                boolean result_3 = process_cast_expression(child_3);

                boolean action_result_after = action____pm_expression__pm_expression__PTR_MEMBER__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [pm_expression] --> [pm_expression PTR_MEMBER cast_expression] returns false.");
                    return false;
                }
            }
        }

        return action____pm_expression__default_semantic_action(node);
    }

    protected boolean process_postfix_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __primary_expression__)
            {
                boolean action_result_before = action____postfix_expression__primary_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_primary_expression(child_1);

                boolean action_result_after = action____postfix_expression__primary_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [primary_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __LEFT_BRACKET__
               &&child_3_type == __expression__
               &&child_4_type == __RIGHT_BRACKET__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__LEFT_BRACKET__expression__RIGHT_BRACKET(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_3 = process_expression(child_3);

                boolean action_result_after = action____postfix_expression__postfix_expression__LEFT_BRACKET__expression__RIGHT_BRACKET(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '[' expression ']'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);

                boolean action_result_after = action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression_list__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_3 = process_expression_list(child_3);

                boolean action_result_after = action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __simple_type_specifier__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_simple_type_specifier(child_1);

                boolean action_result_after = action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [simple_type_specifier '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __simple_type_specifier__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression_list__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_1 = process_simple_type_specifier(child_1);
                boolean result_3 = process_expression_list(child_3);

                boolean action_result_after = action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [simple_type_specifier '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPENAME       scoped_class_name '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_PARENTHESIS__
               &&child_4_type == __expression_list__
               &&child_5_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_4 = process_expression_list(child_4);

                boolean action_result_after = action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPENAME       scoped_class_name '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__
               &&child_4_type == __LEFT_PARENTHESIS__
               &&child_5_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPENAME SCOPE scoped_class_name '(' ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__
               &&child_4_type == __LEFT_PARENTHESIS__
               &&child_5_type == __expression_list__
               &&child_6_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);
                boolean result_5 = process_expression_list(child_5);

                boolean action_result_after = action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPENAME SCOPE scoped_class_name '(' expression_list ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __DOT__
               &&child_3_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__DOT__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_3 = process_id_expression(child_3);

                boolean action_result_after = action____postfix_expression__postfix_expression__DOT__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '.'                   id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __DOT__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__DOT__TEMPLATE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_4 = process_id_expression(child_4);

                boolean action_result_after = action____postfix_expression__postfix_expression__DOT__TEMPLATE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '.'    TEMPLATE       id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __DOT__
               &&child_3_type == __SCOPE__
               &&child_4_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__DOT__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_4 = process_id_expression(child_4);

                boolean action_result_after = action____postfix_expression__postfix_expression__DOT__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '.'             SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __DOT__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __SCOPE__
               &&child_5_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__DOT__TEMPLATE__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_5 = process_id_expression(child_5);

                boolean action_result_after = action____postfix_expression__postfix_expression__DOT__TEMPLATE__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression '.'    TEMPLATE SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __PTR_OP__
               &&child_3_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__PTR_OP__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_3 = process_id_expression(child_3);

                boolean action_result_after = action____postfix_expression__postfix_expression__PTR_OP__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression PTR_OP                id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __PTR_OP__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_4 = process_id_expression(child_4);

                boolean action_result_after = action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression PTR_OP TEMPLATE       id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __PTR_OP__
               &&child_3_type == __SCOPE__
               &&child_4_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__PTR_OP__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_4 = process_id_expression(child_4);

                boolean action_result_after = action____postfix_expression__postfix_expression__PTR_OP__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression PTR_OP          SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __PTR_OP__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __SCOPE__
               &&child_5_type == __id_expression__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);
                boolean result_5 = process_id_expression(child_5);

                boolean action_result_after = action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression PTR_OP TEMPLATE SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __INC_OP__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__INC_OP(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);

                boolean action_result_after = action____postfix_expression__postfix_expression__INC_OP(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression INC_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __postfix_expression__
               &&child_2_type == __DEC_OP__)
            {
                boolean action_result_before = action____postfix_expression__postfix_expression__DEC_OP(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);

                boolean action_result_after = action____postfix_expression__postfix_expression__DEC_OP(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [postfix_expression DEC_OP] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __DYNAMIC_CAST__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __LEFT_PARENTHESIS__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__DYNAMIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);
                boolean result_6 = process_expression(child_6);

                boolean action_result_after = action____postfix_expression__DYNAMIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [DYNAMIC_CAST     '<' type_id '>' '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __STATIC_CAST__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __LEFT_PARENTHESIS__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__STATIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);
                boolean result_6 = process_expression(child_6);

                boolean action_result_after = action____postfix_expression__STATIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [STATIC_CAST      '<' type_id '>' '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __REINTERPRET_CAST__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __LEFT_PARENTHESIS__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__REINTERPRET_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);
                boolean result_6 = process_expression(child_6);

                boolean action_result_after = action____postfix_expression__REINTERPRET_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [REINTERPRET_CAST '<' type_id '>' '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __CONST_CAST__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __LEFT_PARENTHESIS__
               &&child_6_type == __expression__
               &&child_7_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__CONST_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);
                boolean result_6 = process_expression(child_6);

                boolean action_result_after = action____postfix_expression__CONST_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [CONST_CAST       '<' type_id '>' '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPEID__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPEID__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_expression(child_3);

                boolean action_result_after = action____postfix_expression__TYPEID__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPEID '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPEID__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__TYPEID__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____postfix_expression__TYPEID__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [TYPEID '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __VA_ARG__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression__
               &&child_4_type == __COMMA__
               &&child_5_type == __type_id__
               &&child_6_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____postfix_expression__VA_ARG__LEFT_PARENTHESIS__expression__COMMA__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_expression(child_3);
                boolean result_5 = process_type_id(child_5);

                boolean action_result_after = action____postfix_expression__VA_ARG__LEFT_PARENTHESIS__expression__COMMA__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [postfix_expression] --> [VA_ARG '(' expression ',' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        return action____postfix_expression__default_semantic_action(node);
    }

    protected boolean process_primary_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __literal__)
            {
                boolean action_result_before = action____primary_expression__literal(node, __ACTION_BEFORE__);

                boolean result_1 = process_literal(child_1);

                boolean action_result_after = action____primary_expression__literal(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [primary_expression] --> [literal] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __THIS__)
            {
                boolean action_result = action____primary_expression__THIS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [primary_expression] --> [THIS] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __id_expression__)
            {
                boolean action_result_before = action____primary_expression__SCOPE__id_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_id_expression(child_2);

                boolean action_result_after = action____primary_expression__SCOPE__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [primary_expression] --> [SCOPE id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __LEFT_PARENTHESIS__
               &&child_2_type == __expression__
               &&child_3_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____primary_expression__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_2 = process_expression(child_2);

                boolean action_result_after = action____primary_expression__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [primary_expression] --> ['(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __id_expression__)
            {
                boolean action_result_before = action____primary_expression__id_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_id_expression(child_1);

                boolean action_result_after = action____primary_expression__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [primary_expression] --> [id_expression] returns false.");
                    return false;
                }
            }
        }

        return action____primary_expression__default_semantic_action(node);
    }

    protected boolean process_ptr_operator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ASTERISK__)
            {
                boolean action_result = action____ptr_operator__ASTERISK(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> ['*'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ASTERISK__
               &&child_2_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____ptr_operator__ASTERISK__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_cv_qualifier_seq(child_2);

                boolean action_result_after = action____ptr_operator__ASTERISK__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> ['*' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AMPERSAND__)
            {
                boolean action_result = action____ptr_operator__AMPERSAND(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> ['&'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __nested_name_specifier__
               &&child_2_type == __ASTERISK__)
            {
                boolean action_result_before = action____ptr_operator__nested_name_specifier__ASTERISK(node, __ACTION_BEFORE__);

                boolean result_1 = process_nested_name_specifier(child_1);

                boolean action_result_after = action____ptr_operator__nested_name_specifier__ASTERISK(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> [nested_name_specifier '*'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __nested_name_specifier__
               &&child_2_type == __ASTERISK__
               &&child_3_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____ptr_operator__nested_name_specifier__ASTERISK__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_nested_name_specifier(child_1);
                boolean result_3 = process_cv_qualifier_seq(child_3);

                boolean action_result_after = action____ptr_operator__nested_name_specifier__ASTERISK__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> [nested_name_specifier '*' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __nested_name_specifier__
               &&child_3_type == __ASTERISK__)
            {
                boolean action_result_before = action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK(node, __ACTION_BEFORE__);

                boolean result_2 = process_nested_name_specifier(child_2);

                boolean action_result_after = action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> [SCOPE nested_name_specifier '*'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __nested_name_specifier__
               &&child_3_type == __ASTERISK__
               &&child_4_type == __cv_qualifier_seq__)
            {
                boolean action_result_before = action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK__cv_qualifier_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_nested_name_specifier(child_2);
                boolean result_4 = process_cv_qualifier_seq(child_4);

                boolean action_result_after = action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK__cv_qualifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [ptr_operator] --> [SCOPE nested_name_specifier '*' cv_qualifier_seq] returns false.");
                    return false;
                }
            }
        }

        return action____ptr_operator__default_semantic_action(node);
    }

    protected boolean process_qualified_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_unqualified_id__)
            {
                boolean action_result_before = action____qualified_id__scoped_unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_unqualified_id(child_1);

                boolean action_result_after = action____qualified_id__scoped_unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [qualified_id] --> [scoped_unqualified_id] returns false.");
                    return false;
                }
            }
        }

        return action____qualified_id__default_semantic_action(node);
    }

    protected boolean process_qualified_namespace_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_id__)
            {
                boolean action_result_before = action____qualified_namespace_specifier__scoped_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_id(child_1);

                boolean action_result_after = action____qualified_namespace_specifier__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [qualified_namespace_specifier] --> [scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __scoped_id__)
            {
                boolean action_result_before = action____qualified_namespace_specifier__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_id(child_2);

                boolean action_result_after = action____qualified_namespace_specifier__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [qualified_namespace_specifier] --> [SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        return action____qualified_namespace_specifier__default_semantic_action(node);
    }

    protected boolean process_relational_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __shift_expression__)
            {
                boolean action_result_before = action____relational_expression__shift_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_shift_expression(child_1);

                boolean action_result_after = action____relational_expression__shift_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [relational_expression] --> [shift_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __relational_expression__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __shift_expression__)
            {
                boolean action_result_before = action____relational_expression__relational_expression__LEFT_ANGLE_BRACKET__shift_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_relational_expression(child_1);
                boolean result_3 = process_shift_expression(child_3);

                boolean action_result_after = action____relational_expression__relational_expression__LEFT_ANGLE_BRACKET__shift_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [relational_expression] --> [relational_expression '<' shift_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __relational_expression__
               &&child_2_type == __RIGHT_ANGLE_BRACKET__
               &&child_3_type == __shift_expression__)
            {
                boolean action_result_before = action____relational_expression__relational_expression__RIGHT_ANGLE_BRACKET__shift_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_relational_expression(child_1);
                boolean result_3 = process_shift_expression(child_3);

                boolean action_result_after = action____relational_expression__relational_expression__RIGHT_ANGLE_BRACKET__shift_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [relational_expression] --> [relational_expression '>' shift_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __relational_expression__
               &&child_2_type == __LE_OP__
               &&child_3_type == __shift_expression__)
            {
                boolean action_result_before = action____relational_expression__relational_expression__LE_OP__shift_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_relational_expression(child_1);
                boolean result_3 = process_shift_expression(child_3);

                boolean action_result_after = action____relational_expression__relational_expression__LE_OP__shift_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [relational_expression] --> [relational_expression LE_OP shift_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __relational_expression__
               &&child_2_type == __GE_OP__
               &&child_3_type == __shift_expression__)
            {
                boolean action_result_before = action____relational_expression__relational_expression__GE_OP__shift_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_relational_expression(child_1);
                boolean result_3 = process_shift_expression(child_3);

                boolean action_result_after = action____relational_expression__relational_expression__GE_OP__shift_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [relational_expression] --> [relational_expression GE_OP shift_expression] returns false.");
                    return false;
                }
            }
        }

        return action____relational_expression__default_semantic_action(node);
    }

    protected boolean process_scoped_class_name(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __class_name__)
            {
                boolean action_result_before = action____scoped_class_name__class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);

                boolean action_result_after = action____scoped_class_name__class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_class_name] --> [class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____scoped_class_name__class_name__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____scoped_class_name__class_name__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_class_name] --> [class_name SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __scoped_class_name__)
            {
                boolean action_result_before = action____scoped_class_name__class_name__SCOPE__TEMPLATE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_4 = process_scoped_class_name(child_4);

                boolean action_result_after = action____scoped_class_name__class_name__SCOPE__TEMPLATE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_class_name] --> [class_name SCOPE TEMPLATE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        return action____scoped_class_name__default_semantic_action(node);
    }

    protected boolean process_scoped_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __IDENTIFIER__)
            {
                boolean action_result = action____scoped_id__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_id] --> [IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_id__)
            {
                boolean action_result_before = action____scoped_id__class_name__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_3 = process_scoped_id(child_3);

                boolean action_result_after = action____scoped_id__class_name__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_id] --> [class_name SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __scoped_id__)
            {
                boolean action_result_before = action____scoped_id__class_name__SCOPE__TEMPLATE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_4 = process_scoped_id(child_4);

                boolean action_result_after = action____scoped_id__class_name__SCOPE__TEMPLATE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_id] --> [class_name SCOPE TEMPLATE scoped_id] returns false.");
                    return false;
                }
            }
        }

        return action____scoped_id__default_semantic_action(node);
    }

    protected boolean process_scoped_unqualified_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __unqualified_id__)
            {
                boolean action_result_before = action____scoped_unqualified_id__class_name__SCOPE__unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_3 = process_unqualified_id(child_3);

                boolean action_result_after = action____scoped_unqualified_id__class_name__SCOPE__unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_unqualified_id] --> [class_name SCOPE unqualified_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __unqualified_id__)
            {
                boolean action_result_before = action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_4 = process_unqualified_id(child_4);

                boolean action_result_after = action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_unqualified_id] --> [class_name SCOPE TEMPLATE unqualified_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_unqualified_id__)
            {
                boolean action_result_before = action____scoped_unqualified_id__class_name__SCOPE__scoped_unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_3 = process_scoped_unqualified_id(child_3);

                boolean action_result_after = action____scoped_unqualified_id__class_name__SCOPE__scoped_unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_unqualified_id] --> [class_name SCOPE scoped_unqualified_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __class_name__
               &&child_2_type == __SCOPE__
               &&child_3_type == __TEMPLATE__
               &&child_4_type == __scoped_unqualified_id__)
            {
                boolean action_result_before = action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__scoped_unqualified_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);
                boolean result_4 = process_scoped_unqualified_id(child_4);

                boolean action_result_after = action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__scoped_unqualified_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [scoped_unqualified_id] --> [class_name SCOPE TEMPLATE scoped_unqualified_id] returns false.");
                    return false;
                }
            }
        }

        return action____scoped_unqualified_id__default_semantic_action(node);
    }

    protected boolean process_selection_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __IF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __condition__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __statement__)
            {
                boolean action_result_before = action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_condition(child_3);
                boolean result_5 = process_statement(child_5);

                boolean action_result_after = action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [selection_statement] --> [IF '(' condition ')' statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __IF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __condition__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __statement__
               &&child_6_type == __ELSE__
               &&child_7_type == __statement__)
            {
                boolean action_result_before = action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement__ELSE__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_condition(child_3);
                boolean result_5 = process_statement(child_5);
                boolean result_7 = process_statement(child_7);

                boolean action_result_after = action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement__ELSE__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5 && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [selection_statement] --> [IF '(' condition ')' statement ELSE statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __SWITCH__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __condition__
               &&child_4_type == __RIGHT_PARENTHESIS__
               &&child_5_type == __statement__)
            {
                boolean action_result_before = action____selection_statement__SWITCH__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_BEFORE__);

                boolean result_3 = process_condition(child_3);
                boolean result_5 = process_statement(child_5);

                boolean action_result_after = action____selection_statement__SWITCH__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [selection_statement] --> [SWITCH '(' condition ')' statement] returns false.");
                    return false;
                }
            }
        }

        return action____selection_statement__default_semantic_action(node);
    }

    protected boolean process_shift_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __additive_expression__)
            {
                boolean action_result_before = action____shift_expression__additive_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_additive_expression(child_1);

                boolean action_result_after = action____shift_expression__additive_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [shift_expression] --> [additive_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __shift_expression__
               &&child_2_type == __LEFT_OP__
               &&child_3_type == __additive_expression__)
            {
                boolean action_result_before = action____shift_expression__shift_expression__LEFT_OP__additive_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_shift_expression(child_1);
                boolean result_3 = process_additive_expression(child_3);

                boolean action_result_after = action____shift_expression__shift_expression__LEFT_OP__additive_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [shift_expression] --> [shift_expression LEFT_OP additive_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __shift_expression__
               &&child_2_type == __RIGHT_OP__
               &&child_3_type == __additive_expression__)
            {
                boolean action_result_before = action____shift_expression__shift_expression__RIGHT_OP__additive_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_shift_expression(child_1);
                boolean result_3 = process_additive_expression(child_3);

                boolean action_result_after = action____shift_expression__shift_expression__RIGHT_OP__additive_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [shift_expression] --> [shift_expression RIGHT_OP additive_expression] returns false.");
                    return false;
                }
            }
        }

        return action____shift_expression__default_semantic_action(node);
    }

    protected boolean process_simple_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SEMICOLON__)
            {
                boolean action_result = action____simple_declaration__SEMICOLON(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __attributes__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__attributes__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_attributes(child_2);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__attributes__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq attributes ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __init_declarator_list__
               &&child_2_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_init_declarator_list(child_1);

                boolean action_result_after = action____simple_declaration__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __attributes__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__attributes__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_attributes(child_3);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__attributes__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head attributes ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __COMMA__
               &&child_4_type == __init_declarator_list__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_4 = process_init_declarator_list(child_4);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __attributes__
               &&child_4_type == __COMMA__
               &&child_5_type == __init_declarator_list__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__attributes__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_attributes(child_3);
                boolean result_5 = process_init_declarator_list(child_5);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__attributes__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head attributes ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __attributes__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_attributes(child_4);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq attributes ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __COMMA__
               &&child_5_type == __init_declarator_list__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_5 = process_init_declarator_list(child_5);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __attributes__
               &&child_5_type == __COMMA__
               &&child_6_type == __init_declarator_list__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_attributes(child_4);
                boolean result_6 = process_init_declarator_list(child_6);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4 && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq attributes ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __initializer__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__initializer__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_initializer(child_3);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__initializer__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head initializer ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __initializer__
               &&child_4_type == __COMMA__
               &&child_5_type == __init_declarator_list__
               &&child_6_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__initializer__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_initializer(child_3);
                boolean result_5 = process_init_declarator_list(child_5);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__initializer__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head initializer ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __initializer__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_initializer(child_4);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq initializer ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __decl_specifier_seq__
               &&child_2_type == __declarator_head__
               &&child_3_type == __declarator_tail_seq__
               &&child_4_type == __initializer__
               &&child_5_type == __COMMA__
               &&child_6_type == __init_declarator_list__
               &&child_7_type == __SEMICOLON__)
            {
                boolean action_result_before = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_1 = process_decl_specifier_seq(child_1);
                boolean result_2 = process_declarator_head(child_2);
                boolean result_3 = process_declarator_tail_seq(child_3);
                boolean result_4 = process_initializer(child_4);
                boolean result_6 = process_init_declarator_list(child_6);

                boolean action_result_after = action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__COMMA__init_declarator_list__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2 && result_3 && result_4 && true && result_6 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_declaration] --> [decl_specifier_seq declarator_head declarator_tail_seq initializer ',' init_declarator_list ';'] returns false.");
                    return false;
                }
            }
        }

        return action____simple_declaration__default_semantic_action(node);
    }

    protected boolean process_simple_type_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __scoped_class_name__)
            {
                boolean action_result_before = action____simple_type_specifier__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_scoped_class_name(child_1);

                boolean action_result_after = action____simple_type_specifier__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SCOPE__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____simple_type_specifier__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____simple_type_specifier__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CHAR__)
            {
                boolean action_result = action____simple_type_specifier__CHAR(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [CHAR] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __WCHAR_T__)
            {
                boolean action_result = action____simple_type_specifier__WCHAR_T(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [WCHAR_T] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CBOOL__)
            {
                boolean action_result = action____simple_type_specifier__CBOOL(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [CBOOL] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SHORT__)
            {
                boolean action_result = action____simple_type_specifier__SHORT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [SHORT] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __INT__)
            {
                boolean action_result = action____simple_type_specifier__INT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [INT] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __LONG__)
            {
                boolean action_result = action____simple_type_specifier__LONG(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [LONG] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __SIGNED__)
            {
                boolean action_result = action____simple_type_specifier__SIGNED(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [SIGNED] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __UNSIGNED__)
            {
                boolean action_result = action____simple_type_specifier__UNSIGNED(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [UNSIGNED] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __FLOAT__)
            {
                boolean action_result = action____simple_type_specifier__FLOAT(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [FLOAT] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __DOUBLE__)
            {
                boolean action_result = action____simple_type_specifier__DOUBLE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [DOUBLE] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __VOID__)
            {
                boolean action_result = action____simple_type_specifier__VOID(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [VOID] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __COMPLEX__)
            {
                boolean action_result = action____simple_type_specifier__COMPLEX(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [COMPLEX] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPEOF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __expression__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_expression(child_3);

                boolean action_result_after = action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [TYPEOF '(' expression ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPEOF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [simple_type_specifier] --> [TYPEOF '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        return action____simple_type_specifier__default_semantic_action(node);
    }

    protected boolean process_statement(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __labeled_statement__)
            {
                boolean action_result_before = action____statement__labeled_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_labeled_statement(child_1);

                boolean action_result_after = action____statement__labeled_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [labeled_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __expression_statement__)
            {
                boolean action_result_before = action____statement__expression_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_expression_statement(child_1);

                boolean action_result_after = action____statement__expression_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [expression_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __compound_statement__)
            {
                boolean action_result_before = action____statement__compound_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_compound_statement(child_1);

                boolean action_result_after = action____statement__compound_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [compound_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __selection_statement__)
            {
                boolean action_result_before = action____statement__selection_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_selection_statement(child_1);

                boolean action_result_after = action____statement__selection_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [selection_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __iteration_statement__)
            {
                boolean action_result_before = action____statement__iteration_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_iteration_statement(child_1);

                boolean action_result_after = action____statement__iteration_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [iteration_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __jump_statement__)
            {
                boolean action_result_before = action____statement__jump_statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_jump_statement(child_1);

                boolean action_result_after = action____statement__jump_statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [jump_statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __block_declaration__)
            {
                boolean action_result_before = action____statement__block_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_block_declaration(child_1);

                boolean action_result_after = action____statement__block_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [block_declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __try_block__)
            {
                boolean action_result_before = action____statement__try_block(node, __ACTION_BEFORE__);

                boolean result_1 = process_try_block(child_1);

                boolean action_result_after = action____statement__try_block(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement] --> [try_block] returns false.");
                    return false;
                }
            }
        }

        return action____statement__default_semantic_action(node);
    }

    protected boolean process_statement_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __statement__)
            {
                boolean action_result_before = action____statement_seq__statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_statement(child_1);

                boolean action_result_after = action____statement_seq__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement_seq] --> [statement] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __statement_seq__
               &&child_2_type == __statement__)
            {
                boolean action_result_before = action____statement_seq__statement_seq__statement(node, __ACTION_BEFORE__);

                boolean result_1 = process_statement_seq(child_1);
                boolean result_2 = process_statement(child_2);

                boolean action_result_after = action____statement_seq__statement_seq__statement(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [statement_seq] --> [statement_seq statement] returns false.");
                    return false;
                }
            }
        }

        return action____statement_seq__default_semantic_action(node);
    }

    protected boolean process_storage_class_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AUTO__)
            {
                boolean action_result = action____storage_class_specifier__AUTO(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [storage_class_specifier] --> [AUTO] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __REGISTER__)
            {
                boolean action_result = action____storage_class_specifier__REGISTER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [storage_class_specifier] --> [REGISTER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __STATIC__)
            {
                boolean action_result = action____storage_class_specifier__STATIC(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [storage_class_specifier] --> [STATIC] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __EXTERN__)
            {
                boolean action_result = action____storage_class_specifier__EXTERN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [storage_class_specifier] --> [EXTERN] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MUTABLE__)
            {
                boolean action_result = action____storage_class_specifier__MUTABLE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [storage_class_specifier] --> [MUTABLE] returns false.");
                    return false;
                }
            }
        }

        return action____storage_class_specifier__default_semantic_action(node);
    }

    protected boolean process_template_argument(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __assignment_expression__)
            {
                boolean action_result_before = action____template_argument__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_assignment_expression(child_1);

                boolean action_result_after = action____template_argument__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_argument] --> [assignment_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_id__)
            {
                boolean action_result_before = action____template_argument__type_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_id(child_1);

                boolean action_result_after = action____template_argument__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_argument] --> [type_id] returns false.");
                    return false;
                }
            }
        }

        return action____template_argument__default_semantic_action(node);
    }

    protected boolean process_template_argument_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __template_argument__)
            {
                boolean action_result_before = action____template_argument_list__template_argument(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_argument(child_1);

                boolean action_result_after = action____template_argument_list__template_argument(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_argument_list] --> [template_argument] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __template_argument_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __template_argument__)
            {
                boolean action_result_before = action____template_argument_list__template_argument_list__COMMA__template_argument(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_argument_list(child_1);
                boolean result_3 = process_template_argument(child_3);

                boolean action_result_after = action____template_argument_list__template_argument_list__COMMA__template_argument(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_argument_list] --> [template_argument_list ',' template_argument] returns false.");
                    return false;
                }
            }
        }

        return action____template_argument_list__default_semantic_action(node);
    }

    protected boolean process_template_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __template_parameter_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __declaration__)
            {
                boolean action_result_before = action____template_declaration__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_parameter_list(child_3);
                boolean result_5 = process_declaration(child_5);

                boolean action_result_after = action____template_declaration__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && result_5)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_declaration] --> [TEMPLATE '<' template_parameter_list '>' declaration] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __EXPORT__
               &&child_2_type == __TEMPLATE__
               &&child_3_type == __LEFT_ANGLE_BRACKET__
               &&child_4_type == __template_parameter_list__
               &&child_5_type == __RIGHT_ANGLE_BRACKET__
               &&child_6_type == __declaration__)
            {
                boolean action_result_before = action____template_declaration__EXPORT__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_BEFORE__);

                boolean result_4 = process_template_parameter_list(child_4);
                boolean result_6 = process_declaration(child_6);

                boolean action_result_after = action____template_declaration__EXPORT__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_declaration] --> [EXPORT TEMPLATE '<' template_parameter_list '>' declaration] returns false.");
                    return false;
                }
            }
        }

        return action____template_declaration__default_semantic_action(node);
    }

    protected boolean process_template_parameter(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_parameter__)
            {
                boolean action_result_before = action____template_parameter__type_parameter(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_parameter(child_1);

                boolean action_result_after = action____template_parameter__type_parameter(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_parameter] --> [type_parameter] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __parameter_declaration__)
            {
                boolean action_result_before = action____template_parameter__parameter_declaration(node, __ACTION_BEFORE__);

                boolean result_1 = process_parameter_declaration(child_1);

                boolean action_result_after = action____template_parameter__parameter_declaration(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_parameter] --> [parameter_declaration] returns false.");
                    return false;
                }
            }
        }

        return action____template_parameter__default_semantic_action(node);
    }

    protected boolean process_template_parameter_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __template_parameter__)
            {
                boolean action_result_before = action____template_parameter_list__template_parameter(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_parameter(child_1);

                boolean action_result_after = action____template_parameter_list__template_parameter(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_parameter_list] --> [template_parameter] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __template_parameter_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __template_parameter__)
            {
                boolean action_result_before = action____template_parameter_list__template_parameter_list__COMMA__template_parameter(node, __ACTION_BEFORE__);

                boolean result_1 = process_template_parameter_list(child_1);
                boolean result_3 = process_template_parameter(child_3);

                boolean action_result_after = action____template_parameter_list__template_parameter_list__COMMA__template_parameter(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [template_parameter_list] --> [template_parameter_list ',' template_parameter] returns false.");
                    return false;
                }
            }
        }

        return action____template_parameter_list__default_semantic_action(node);
    }

    protected boolean process_throw_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __THROW__)
            {
                boolean action_result = action____throw_expression__THROW(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [throw_expression] --> [THROW] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __THROW__
               &&child_2_type == __assignment_expression__)
            {
                boolean action_result_before = action____throw_expression__THROW__assignment_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_assignment_expression(child_2);

                boolean action_result_after = action____throw_expression__THROW__assignment_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [throw_expression] --> [THROW assignment_expression] returns false.");
                    return false;
                }
            }
        }

        return action____throw_expression__default_semantic_action(node);
    }

    protected boolean process_translation_unit(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __declaration_seq__)
            {
                boolean action_result_before = action____translation_unit__declaration_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_declaration_seq(child_1);

                boolean action_result_after = action____translation_unit__declaration_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [translation_unit] --> [declaration_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 0)
        {
            boolean action_result = action____translation_unit__empty(node);
            if (action_result == true)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return action____translation_unit__default_semantic_action(node);
    }

    protected boolean process_try_block(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __TRY__
               &&child_2_type == __compound_statement__
               &&child_3_type == __handler_seq__)
            {
                boolean action_result_before = action____try_block__TRY__compound_statement__handler_seq(node, __ACTION_BEFORE__);

                boolean result_2 = process_compound_statement(child_2);
                boolean result_3 = process_handler_seq(child_3);

                boolean action_result_after = action____try_block__TRY__compound_statement__handler_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [try_block] --> [TRY compound_statement handler_seq] returns false.");
                    return false;
                }
            }
        }

        return action____try_block__default_semantic_action(node);
    }

    protected boolean process_type_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier_seq__)
            {
                boolean action_result_before = action____type_id__type_specifier_seq(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);

                boolean action_result_after = action____type_id__type_specifier_seq(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_id] --> [type_specifier_seq] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __abstract_declarator__)
            {
                boolean action_result_before = action____type_id__type_specifier_seq__abstract_declarator(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_abstract_declarator(child_2);

                boolean action_result_after = action____type_id__type_specifier_seq__abstract_declarator(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_id] --> [type_specifier_seq abstract_declarator] returns false.");
                    return false;
                }
            }
        }

        return action____type_id__default_semantic_action(node);
    }

    protected boolean process_type_id_list(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_id__)
            {
                boolean action_result_before = action____type_id_list__type_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_id(child_1);

                boolean action_result_after = action____type_id_list__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_id_list] --> [type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __type_id_list__
               &&child_2_type == __COMMA__
               &&child_3_type == __type_id__)
            {
                boolean action_result_before = action____type_id_list__type_id_list__COMMA__type_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_id_list(child_1);
                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____type_id_list__type_id_list__COMMA__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_id_list] --> [type_id_list ',' type_id] returns false.");
                    return false;
                }
            }
        }

        return action____type_id_list__default_semantic_action(node);
    }

    protected boolean process_type_parameter(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __CLASS__)
            {
                boolean action_result = action____type_parameter__CLASS(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [CLASS] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __IDENTIFIER__)
            {
                boolean action_result = action____type_parameter__CLASS__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [CLASS IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __EQUAL_SIGN__
               &&child_3_type == __type_id__)
            {
                boolean action_result_before = action____type_parameter__CLASS__EQUAL_SIGN__type_id(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____type_parameter__CLASS__EQUAL_SIGN__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [CLASS            '=' type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __type_id__)
            {
                boolean action_result_before = action____type_parameter__CLASS__IDENTIFIER__EQUAL_SIGN__type_id(node, __ACTION_BEFORE__);

                boolean result_4 = process_type_id(child_4);

                boolean action_result_after = action____type_parameter__CLASS__IDENTIFIER__EQUAL_SIGN__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [CLASS IDENTIFIER '=' type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __TYPENAME__)
            {
                boolean action_result = action____type_parameter__TYPENAME(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TYPENAME] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __IDENTIFIER__)
            {
                boolean action_result = action____type_parameter__TYPENAME__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TYPENAME IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __EQUAL_SIGN__
               &&child_3_type == __type_id__)
            {
                boolean action_result_before = action____type_parameter__TYPENAME__EQUAL_SIGN__type_id(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____type_parameter__TYPENAME__EQUAL_SIGN__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TYPENAME            '=' type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __EQUAL_SIGN__
               &&child_4_type == __type_id__)
            {
                boolean action_result_before = action____type_parameter__TYPENAME__IDENTIFIER__EQUAL_SIGN__type_id(node, __ACTION_BEFORE__);

                boolean result_4 = process_type_id(child_4);

                boolean action_result_after = action____type_parameter__TYPENAME__IDENTIFIER__EQUAL_SIGN__type_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TYPENAME IDENTIFIER '=' type_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __template_parameter_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __CLASS__)
            {
                boolean action_result_before = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_parameter_list(child_3);

                boolean action_result_after = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TEMPLATE '<' template_parameter_list '>' CLASS] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __template_parameter_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __CLASS__
               &&child_6_type == __IDENTIFIER__)
            {
                boolean action_result_before = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_parameter_list(child_3);

                boolean action_result_after = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TEMPLATE '<' template_parameter_list '>' CLASS IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __template_parameter_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __CLASS__
               &&child_6_type == __EQUAL_SIGN__
               &&child_7_type == __id_expression__)
            {
                boolean action_result_before = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__EQUAL_SIGN__id_expression(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_parameter_list(child_3);
                boolean result_7 = process_id_expression(child_7);

                boolean action_result_after = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__EQUAL_SIGN__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TEMPLATE '<' template_parameter_list '>' CLASS            '=' id_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __TEMPLATE__
               &&child_2_type == __LEFT_ANGLE_BRACKET__
               &&child_3_type == __template_parameter_list__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __CLASS__
               &&child_6_type == __IDENTIFIER__
               &&child_7_type == __EQUAL_SIGN__
               &&child_8_type == __id_expression__)
            {
                boolean action_result_before = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER__EQUAL_SIGN__id_expression(node, __ACTION_BEFORE__);

                boolean result_3 = process_template_parameter_list(child_3);
                boolean result_8 = process_id_expression(child_8);

                boolean action_result_after = action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER__EQUAL_SIGN__id_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true && true && true && true && result_8)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_parameter] --> [TEMPLATE '<' template_parameter_list '>' CLASS IDENTIFIER '=' id_expression] returns false.");
                    return false;
                }
            }
        }

        return action____type_parameter__default_semantic_action(node);
    }

    protected boolean process_type_specifier(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __simple_type_specifier__)
            {
                boolean action_result_before = action____type_specifier__simple_type_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_simple_type_specifier(child_1);

                boolean action_result_after = action____type_specifier__simple_type_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [simple_type_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____type_specifier__CLASS__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS                               '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __member_specification__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_3 = process_member_specification(child_3);

                boolean action_result_after = action____type_specifier__CLASS__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS                               '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);

                boolean action_result_after = action____type_specifier__CLASS__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS                   base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__CLASS__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS                   base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS scoped_class_name             '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS scoped_class_name             '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);

                boolean action_result_after = action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS scoped_class_name base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __member_specification__
               &&child_6_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);
                boolean result_5 = process_member_specification(child_5);

                boolean action_result_after = action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS scoped_class_name base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____type_specifier__STRUCT__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT                               '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __member_specification__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_3 = process_member_specification(child_3);

                boolean action_result_after = action____type_specifier__STRUCT__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT                               '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);

                boolean action_result_after = action____type_specifier__STRUCT__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT                   base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__STRUCT__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT                   base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT scoped_class_name             '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT scoped_class_name             '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);

                boolean action_result_after = action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT scoped_class_name base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __member_specification__
               &&child_6_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);
                boolean result_5 = process_member_specification(child_5);

                boolean action_result_after = action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT scoped_class_name base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____type_specifier__UNION__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION                               '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __member_specification__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_3 = process_member_specification(child_3);

                boolean action_result_after = action____type_specifier__UNION__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION                               '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);

                boolean action_result_after = action____type_specifier__UNION__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION                   base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __base_clause__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_base_clause(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__UNION__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION                   base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION scoped_class_name             '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __member_specification__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_4 = process_member_specification(child_4);

                boolean action_result_after = action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION scoped_class_name             '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);

                boolean action_result_after = action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION scoped_class_name base_clause '{'                      '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __scoped_class_name__
               &&child_3_type == __base_clause__
               &&child_4_type == __LEFT_BRACE__
               &&child_5_type == __member_specification__
               &&child_6_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);
                boolean result_3 = process_base_clause(child_3);
                boolean result_5 = process_member_specification(child_5);

                boolean action_result_after = action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && result_3 && true && result_5 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION scoped_class_name base_clause '{' member_specification '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____type_specifier__ENUM__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM            '{'                 '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __LEFT_BRACE__
               &&child_3_type == __enumerator_list__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__ENUM__LEFT_BRACE__enumerator_list__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_3 = process_enumerator_list(child_3);

                boolean action_result_after = action____type_specifier__ENUM__LEFT_BRACE__enumerator_list__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM            '{' enumerator_list '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __RIGHT_BRACE__)
            {
                boolean action_result = action____type_specifier__ENUM__IDENTIFIER__LEFT_BRACE__RIGHT_BRACE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true && true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER '{'                 '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __LEFT_BRACE__
               &&child_4_type == __enumerator_list__
               &&child_5_type == __RIGHT_BRACE__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__LEFT_BRACE__enumerator_list__RIGHT_BRACE(node, __ACTION_BEFORE__);

                boolean result_4 = process_enumerator_list(child_4);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__LEFT_BRACE__enumerator_list__RIGHT_BRACE(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER '{' enumerator_list '}'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__CLASS__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__CLASS__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS        scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __CLASS__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__CLASS__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____type_specifier__CLASS__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [CLASS  SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__STRUCT__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT       scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __STRUCT__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__STRUCT__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____type_specifier__STRUCT__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [STRUCT SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__UNION__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__UNION__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION        scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __UNION__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__UNION__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____type_specifier__UNION__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [UNION  SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__)
            {
                boolean action_result = action____type_specifier__ENUM__IDENTIFIER(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __SCOPE__
               &&child_4_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_4 = process_scoped_id(child_4);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 6)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __BEGIN_TEMPLATE__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __SCOPE__
               &&child_6_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_6 = process_scoped_id(child_6);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && true && true && result_6)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER BEGIN_TEMPLATE '>' SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __BEGIN_TEMPLATE__
               &&child_4_type == __RIGHT_ANGLE_BRACKET__
               &&child_5_type == __SCOPE__
               &&child_6_type == __TEMPLATE__
               &&child_7_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_7 = process_scoped_id(child_7);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && true && true && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER BEGIN_TEMPLATE '>' SCOPE TEMPLATE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 7)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __BEGIN_TEMPLATE__
               &&child_4_type == __template_argument_list__
               &&child_5_type == __RIGHT_ANGLE_BRACKET__
               &&child_6_type == __SCOPE__
               &&child_7_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_4 = process_template_argument_list(child_4);
                boolean result_7 = process_scoped_id(child_7);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true && true && result_7)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER BEGIN_TEMPLATE template_argument_list '>' SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 8)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();
            GeneralSyntaxNode	child_6 = (GeneralSyntaxNode)(node.getChild(5));
            int	child_6_type = child_6.getTypeCode();
            GeneralSyntaxNode	child_7 = (GeneralSyntaxNode)(node.getChild(6));
            int	child_7_type = child_7.getTypeCode();
            GeneralSyntaxNode	child_8 = (GeneralSyntaxNode)(node.getChild(7));
            int	child_8_type = child_8.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __IDENTIFIER__
               &&child_3_type == __BEGIN_TEMPLATE__
               &&child_4_type == __template_argument_list__
               &&child_5_type == __RIGHT_ANGLE_BRACKET__
               &&child_6_type == __SCOPE__
               &&child_7_type == __TEMPLATE__
               &&child_8_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_4 = process_template_argument_list(child_4);
                boolean result_8 = process_scoped_id(child_8);

                boolean action_result_after = action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true && true && true && result_8)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM IDENTIFIER BEGIN_TEMPLATE template_argument_list '>' SCOPE TEMPLATE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __ENUM__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_id__)
            {
                boolean action_result_before = action____type_specifier__ENUM__SCOPE__scoped_id(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_id(child_3);

                boolean action_result_after = action____type_specifier__ENUM__SCOPE__scoped_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [ENUM SCOPE scoped_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__TYPENAME__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_class_name(child_2);

                boolean action_result_after = action____type_specifier__TYPENAME__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [TYPENAME scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __TYPENAME__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_class_name__)
            {
                boolean action_result_before = action____type_specifier__TYPENAME__SCOPE__scoped_class_name(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_class_name(child_3);

                boolean action_result_after = action____type_specifier__TYPENAME__SCOPE__scoped_class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [TYPENAME SCOPE scoped_class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __cv_qualifier__)
            {
                boolean action_result_before = action____type_specifier__cv_qualifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_cv_qualifier(child_1);

                boolean action_result_after = action____type_specifier__cv_qualifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier] --> [cv_qualifier] returns false.");
                    return false;
                }
            }
        }

        return action____type_specifier__default_semantic_action(node);
    }

    protected boolean process_type_specifier_seq(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __type_specifier__)
            {
                boolean action_result_before = action____type_specifier_seq__type_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier(child_1);

                boolean action_result_after = action____type_specifier_seq__type_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier_seq] --> [type_specifier] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __type_specifier_seq__
               &&child_2_type == __type_specifier__)
            {
                boolean action_result_before = action____type_specifier_seq__type_specifier_seq__type_specifier(node, __ACTION_BEFORE__);

                boolean result_1 = process_type_specifier_seq(child_1);
                boolean result_2 = process_type_specifier(child_2);

                boolean action_result_after = action____type_specifier_seq__type_specifier_seq__type_specifier(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [type_specifier_seq] --> [type_specifier_seq type_specifier] returns false.");
                    return false;
                }
            }
        }

        return action____type_specifier_seq__default_semantic_action(node);
    }

    protected boolean process_unary_expression(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __postfix_expression__)
            {
                boolean action_result_before = action____unary_expression__postfix_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_postfix_expression(child_1);

                boolean action_result_after = action____unary_expression__postfix_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [postfix_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __INC_OP__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__INC_OP__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__INC_OP__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [INC_OP cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __DEC_OP__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__DEC_OP__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__DEC_OP__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [DEC_OP cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __unary_operator__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__unary_operator__cast_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_unary_operator(child_1);
                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__unary_operator__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1 && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [unary_operator cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __SIZEOF__
               &&child_2_type == __unary_expression__)
            {
                boolean action_result_before = action____unary_expression__SIZEOF__unary_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_unary_expression(child_2);

                boolean action_result_after = action____unary_expression__SIZEOF__unary_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [SIZEOF unary_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __SIZEOF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____unary_expression__SIZEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____unary_expression__SIZEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [SIZEOF '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __new_expression__)
            {
                boolean action_result_before = action____unary_expression__new_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_new_expression(child_1);

                boolean action_result_after = action____unary_expression__new_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [new_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __delete_expression__)
            {
                boolean action_result_before = action____unary_expression__delete_expression(node, __ACTION_BEFORE__);

                boolean result_1 = process_delete_expression(child_1);

                boolean action_result_after = action____unary_expression__delete_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [delete_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __ALIGNOF__
               &&child_2_type == __unary_expression__)
            {
                boolean action_result_before = action____unary_expression__ALIGNOF__unary_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_unary_expression(child_2);

                boolean action_result_after = action____unary_expression__ALIGNOF__unary_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [ALIGNOF unary_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __ALIGNOF__
               &&child_2_type == __LEFT_PARENTHESIS__
               &&child_3_type == __type_id__
               &&child_4_type == __RIGHT_PARENTHESIS__)
            {
                boolean action_result_before = action____unary_expression__ALIGNOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_BEFORE__);

                boolean result_3 = process_type_id(child_3);

                boolean action_result_after = action____unary_expression__ALIGNOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [ALIGNOF '(' type_id ')'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __REALPART__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__REALPART__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__REALPART__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [REALPART cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __IMAGPART__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__IMAGPART__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__IMAGPART__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [IMAGPART cast_expression] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __EXTENSION__
               &&child_2_type == __cast_expression__)
            {
                boolean action_result_before = action____unary_expression__EXTENSION__cast_expression(node, __ACTION_BEFORE__);

                boolean result_2 = process_cast_expression(child_2);

                boolean action_result_after = action____unary_expression__EXTENSION__cast_expression(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_expression] --> [EXTENSION cast_expression] returns false.");
                    return false;
                }
            }
        }

        return action____unary_expression__default_semantic_action(node);
    }

    protected boolean process_unary_operator(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __ASTERISK__)
            {
                boolean action_result = action____unary_operator__ASTERISK(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['*'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __AMPERSAND__)
            {
                boolean action_result = action____unary_operator__AMPERSAND(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['&'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __PLUS_SIGN__)
            {
                boolean action_result = action____unary_operator__PLUS_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['+'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __MINUS_SIGN__)
            {
                boolean action_result = action____unary_operator__MINUS_SIGN(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['-'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __BANG__)
            {
                boolean action_result = action____unary_operator__BANG(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['!'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __TILDE__)
            {
                boolean action_result = action____unary_operator__TILDE(node);

                if (action_result == false)
                {
                    return false;
                }
                if (true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unary_operator] --> ['~'] returns false.");
                    return false;
                }
            }
        }

        return action____unary_operator__default_semantic_action(node);
    }

    protected boolean process_unqualified_id(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __class_name__)
            {
                boolean action_result_before = action____unqualified_id__class_name(node, __ACTION_BEFORE__);

                boolean result_1 = process_class_name(child_1);

                boolean action_result_after = action____unqualified_id__class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unqualified_id] --> [class_name] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __operator_function_id__)
            {
                boolean action_result_before = action____unqualified_id__operator_function_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_operator_function_id(child_1);

                boolean action_result_after = action____unqualified_id__operator_function_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unqualified_id] --> [operator_function_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 1)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();

            if (child_1_type == __conversion_function_id__)
            {
                boolean action_result_before = action____unqualified_id__conversion_function_id(node, __ACTION_BEFORE__);

                boolean result_1 = process_conversion_function_id(child_1);

                boolean action_result_after = action____unqualified_id__conversion_function_id(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (result_1)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unqualified_id] --> [conversion_function_id] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 2)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();

            if (child_1_type == __TILDE__
               &&child_2_type == __class_name__)
            {
                boolean action_result_before = action____unqualified_id__TILDE__class_name(node, __ACTION_BEFORE__);

                boolean result_2 = process_class_name(child_2);

                boolean action_result_after = action____unqualified_id__TILDE__class_name(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [unqualified_id] --> ['~' class_name] returns false.");
                    return false;
                }
            }
        }

        return action____unqualified_id__default_semantic_action(node);
    }

    protected boolean process_using_declaration(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 3)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __scoped_unqualified_id__
               &&child_3_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_declaration__USING__scoped_unqualified_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_2 = process_scoped_unqualified_id(child_2);

                boolean action_result_after = action____using_declaration__USING__scoped_unqualified_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && result_2 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_declaration] --> [USING                  scoped_unqualified_id ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __TYPENAME__
               &&child_3_type == __scoped_unqualified_id__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_declaration__USING__TYPENAME__scoped_unqualified_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_unqualified_id(child_3);

                boolean action_result_after = action____using_declaration__USING__TYPENAME__scoped_unqualified_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_declaration] --> [USING TYPENAME       scoped_unqualified_id ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __SCOPE__
               &&child_3_type == __scoped_unqualified_id__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_declaration__USING__SCOPE__scoped_unqualified_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_unqualified_id(child_3);

                boolean action_result_after = action____using_declaration__USING__SCOPE__scoped_unqualified_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_declaration] --> [USING          SCOPE scoped_unqualified_id ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __TYPENAME__
               &&child_3_type == __SCOPE__
               &&child_4_type == __scoped_unqualified_id__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_declaration__USING__TYPENAME__SCOPE__scoped_unqualified_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_4 = process_scoped_unqualified_id(child_4);

                boolean action_result_after = action____using_declaration__USING__TYPENAME__SCOPE__scoped_unqualified_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_declaration] --> [USING TYPENAME SCOPE scoped_unqualified_id ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __SCOPE__
               &&child_3_type == __unqualified_id__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_declaration__USING__SCOPE__unqualified_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_unqualified_id(child_3);

                boolean action_result_after = action____using_declaration__USING__SCOPE__unqualified_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_declaration] --> [USING          SCOPE unqualified_id ';'] returns false.");
                    return false;
                }
            }
        }

        return action____using_declaration__default_semantic_action(node);
    }

    protected boolean process_using_directive(GeneralSyntaxNode node)
    {
        int num_of_children = node.numOfChildren();

        if (num_of_children == 4)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __NAMESPACE__
               &&child_3_type == __scoped_id__
               &&child_4_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_directive__USING__NAMESPACE__scoped_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_3 = process_scoped_id(child_3);

                boolean action_result_after = action____using_directive__USING__NAMESPACE__scoped_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && result_3 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_directive] --> [USING   NAMESPACE       scoped_id ';'] returns false.");
                    return false;
                }
            }
        }

        if (num_of_children == 5)
        {
            GeneralSyntaxNode	child_1 = (GeneralSyntaxNode)(node.getChild(0));
            int	child_1_type = child_1.getTypeCode();
            GeneralSyntaxNode	child_2 = (GeneralSyntaxNode)(node.getChild(1));
            int	child_2_type = child_2.getTypeCode();
            GeneralSyntaxNode	child_3 = (GeneralSyntaxNode)(node.getChild(2));
            int	child_3_type = child_3.getTypeCode();
            GeneralSyntaxNode	child_4 = (GeneralSyntaxNode)(node.getChild(3));
            int	child_4_type = child_4.getTypeCode();
            GeneralSyntaxNode	child_5 = (GeneralSyntaxNode)(node.getChild(4));
            int	child_5_type = child_5.getTypeCode();

            if (child_1_type == __USING__
               &&child_2_type == __NAMESPACE__
               &&child_3_type == __SCOPE__
               &&child_4_type == __scoped_id__
               &&child_5_type == __SEMICOLON__)
            {
                boolean action_result_before = action____using_directive__USING__NAMESPACE__SCOPE__scoped_id__SEMICOLON(node, __ACTION_BEFORE__);

                boolean result_4 = process_scoped_id(child_4);

                boolean action_result_after = action____using_directive__USING__NAMESPACE__SCOPE__scoped_id__SEMICOLON(node, __ACTION_AFTER__);

                if ((action_result_before && action_result_after) == false)
                {
                    return false;
                }
                if (true && true && true && result_4 && true)
                {
                    return true;
                }
                else
                {
                    System.out.println("CAUTION: [using_directive] --> [USING NAMESPACE SCOPE scoped_id ';'] returns false.");
                    return false;
                }
            }
        }

        return action____using_directive__default_semantic_action(node);
    }

    abstract protected boolean action____STRING_LITERAL_seq__STRING_LITERAL(GeneralSyntaxNode node);
    abstract protected boolean action____STRING_LITERAL_seq__STRING_LITERAL_seq__STRING_LITERAL(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____STRING_LITERAL_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____abstract_declarator__ptr_operator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____abstract_declarator__ptr_operator__abstract_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____abstract_declarator__direct_abstract_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____abstract_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____access_specifier__PRIVATE(GeneralSyntaxNode node);
    abstract protected boolean action____access_specifier__PROTECTED(GeneralSyntaxNode node);
    abstract protected boolean action____access_specifier__PUBLIC(GeneralSyntaxNode node);
    abstract protected boolean action____access_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____additive_expression__multiplicative_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____additive_expression__additive_expression__PLUS_SIGN__multiplicative_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____additive_expression__additive_expression__MINUS_SIGN__multiplicative_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____additive_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____and_expression__equality_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____and_expression__and_expression__AMPERSAND__equality_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____and_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____any_word__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____any_word__storage_class_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____any_word__cv_qualifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____any_word__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____asm_clobbers__STRING_LITERAL(GeneralSyntaxNode node);
    abstract protected boolean action____asm_clobbers__asm_clobbers__COMMA__STRING_LITERAL(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_clobbers__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__COLON__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__SCOPE__asm_operands__COLON__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__ASM__cv_qualifier__LEFT_PARENTHESIS__STRING_LITERAL_seq__COLON__asm_operands__SCOPE__asm_clobbers__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_definition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____asm_operand__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_operand__LEFT_BRACKET__IDENTIFIER__RIGHT_BRACKET__STRING_LITERAL__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_operand__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____asm_operands__asm_operand(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_operands__asm_operands__COMMA__asm_operand(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____asm_operands__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_expression__conditional_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____assignment_expression__logical_or_expression__assignment_operator__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____assignment_expression__throw_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____assignment_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__EQUAL_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__MUL_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__DIV_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__MOD_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__ADD_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__SUB_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__RIGHT_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__LEFT_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__AND_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__XOR_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__OR_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____assignment_operator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____attrib__any_word(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attrib__any_word__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attrib__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____attribute__ATTRIBUTE__LEFT_PARENTHESIS__LEFT_PARENTHESIS__attribute_list__RIGHT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attribute__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____attribute_list__attrib(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attribute_list__attribute_list__COMMA__attrib(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attribute_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____attributes__attribute(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attributes__attributes__attribute(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____attributes__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____base_clause__COLON__base_specifier_list(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_clause__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____base_specifier__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__VIRTUAL__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__VIRTUAL__access_specifier__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__VIRTUAL__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__VIRTUAL__access_specifier__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__access_specifier__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__access_specifier__VIRTUAL__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__access_specifier__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__access_specifier__VIRTUAL__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____base_specifier_list__base_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier_list__base_specifier_list__COMMA__base_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____base_specifier_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____block_declaration__simple_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__asm_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__namespace_alias_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__using_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__using_directive(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__EXTENSION__simple_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____block_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____boolean_literal__CTRUE(GeneralSyntaxNode node);
    abstract protected boolean action____boolean_literal__CFALSE(GeneralSyntaxNode node);
    abstract protected boolean action____boolean_literal__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____cast_expression__unary_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____cast_expression__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____cast_expression__LEFT_PARENTHESIS__compound_statement__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____cast_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____class_name__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____class_name__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____class_name__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____class_name__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____compound_statement__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____compound_statement__LEFT_BRACE__statement_seq__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____compound_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____condition__expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____condition__type_specifier_seq__declarator__EQUAL_SIGN__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____condition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____conditional_expression__logical_or_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conditional_expression__logical_or_expression__QUESTION_MARK__expression__COLON__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conditional_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____constant_expression__conditional_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____constant_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____constant_initializer__EQUAL_SIGN__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____constant_initializer__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____conversion_declarator__ptr_operator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conversion_declarator__ptr_operator__conversion_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conversion_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____conversion_function_id__OPERATOR__conversion_type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conversion_function_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____conversion_type_id__type_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conversion_type_id__type_specifier_seq__conversion_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____conversion_type_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____ctor_initializer__COLON__mem_initializer_list(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ctor_initializer__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____cv_qualifier__CONST(GeneralSyntaxNode node);
    abstract protected boolean action____cv_qualifier__VOLATILE(GeneralSyntaxNode node);
    abstract protected boolean action____cv_qualifier__RESTRICT(GeneralSyntaxNode node);
    abstract protected boolean action____cv_qualifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____cv_qualifier_seq__cv_qualifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____cv_qualifier_seq__cv_qualifier_seq__cv_qualifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____cv_qualifier_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____decl_specifier__storage_class_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____decl_specifier__type_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____decl_specifier__function_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____decl_specifier__FRIEND(GeneralSyntaxNode node);
    abstract protected boolean action____decl_specifier__TYPEDEF(GeneralSyntaxNode node);
    abstract protected boolean action____decl_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____decl_specifier_seq__decl_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____decl_specifier_seq__decl_specifier_seq__decl_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____decl_specifier_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declaration__block_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__function_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__template_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__explicit_instantiation(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__explicit_specialization(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__linkage_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__namespace_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declaration_seq__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration_seq__declaration_seq__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declaration_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declarator__direct_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator__ptr_operator__declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declarator_head__declarator_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_head__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_head__ptr_operator__declarator_head(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_head__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declarator_id__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_id__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____declarator_tail__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____declarator_tail_seq__declarator_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail_seq__declarator_tail_seq__declarator_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____declarator_tail_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____delete_expression__DELETE__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____delete_expression__SCOPE__DELETE__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____delete_expression__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____delete_expression__SCOPE__DELETE__LEFT_BRACKET__RIGHT_BRACKET__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____delete_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__direct_abstract_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__LEFT_PARENTHESIS__abstract_declarator__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_abstract_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____direct_declarator__declarator_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_PARENTHESIS__parameter_declaration_clause__RIGHT_PARENTHESIS__cv_qualifier_seq__exception_specification(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__direct_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__LEFT_PARENTHESIS__declarator__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____direct_new_declarator__LEFT_BRACKET__expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_new_declarator__direct_new_declarator__LEFT_BRACKET__constant_expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____direct_new_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____enumerator_definition__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____enumerator_definition__IDENTIFIER__EQUAL_SIGN__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____enumerator_definition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____enumerator_list__enumerator_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____enumerator_list__enumerator_list__COMMA__enumerator_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____enumerator_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____equality_expression__relational_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____equality_expression__equality_expression__EQ_OP__relational_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____equality_expression__equality_expression__NE_OP__relational_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____equality_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____exception_declaration__type_specifier_seq__declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exception_declaration__type_specifier_seq__abstract_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exception_declaration__type_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exception_declaration__ELLIPSIS(GeneralSyntaxNode node);
    abstract protected boolean action____exception_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____exception_specification__THROW__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node);
    abstract protected boolean action____exception_specification__THROW__LEFT_PARENTHESIS__type_id_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exception_specification__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____exclusive_or_expression__and_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exclusive_or_expression__exclusive_or_expression__CARET__and_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____exclusive_or_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____explicit_instantiation__TEMPLATE__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____explicit_instantiation__EXTERN__TEMPLATE__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____explicit_instantiation__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____explicit_specialization__TEMPLATE__LEFT_ANGLE_BRACKET__RIGHT_ANGLE_BRACKET__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____explicit_specialization__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____expression__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____expression__expression__COMMA__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____expression_list__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____expression_list__expression_list__COMMA__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____expression_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____expression_statement__expression__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____expression_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____for_init_statement__expression_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____for_init_statement__simple_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____for_init_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____function_definition__function_prefix__compound_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_definition__function_prefix__ctor_initializer__compound_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_definition__function_prefix__function_try_block(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_definition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____function_prefix__declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_prefix__decl_specifier_seq__declarator_head(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_prefix__decl_specifier_seq__attributes__declarator_head(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_prefix__decl_specifier_seq__declarator_head__declarator_tail_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_prefix__decl_specifier_seq__attributes__declarator_head__declarator_tail_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_prefix__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____function_specifier__INLINE(GeneralSyntaxNode node);
    abstract protected boolean action____function_specifier__VIRTUAL(GeneralSyntaxNode node);
    abstract protected boolean action____function_specifier__EXPLICIT(GeneralSyntaxNode node);
    abstract protected boolean action____function_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____function_try_block__TRY__compound_statement__handler_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_try_block__TRY__ctor_initializer__compound_statement__handler_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____function_try_block__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____handler__CATCH__LEFT_PARENTHESIS__exception_declaration__RIGHT_PARENTHESIS__compound_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____handler__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____handler_seq__handler(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____handler_seq__handler_seq__handler(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____handler_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____id_expression__unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____id_expression__qualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____id_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____inclusive_or_expression__exclusive_or_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____inclusive_or_expression__inclusive_or_expression__VERTICAL_BAR__exclusive_or_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____inclusive_or_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____init_declarator__declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____init_declarator__declarator__initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____init_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____init_declarator_list__init_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____init_declarator_list__init_declarator_list__COMMA__init_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____init_declarator_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____initializer__EQUAL_SIGN__initializer_clause(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____initializer_clause__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer_clause__LEFT_BRACE__initializer_list__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer_clause__LEFT_BRACE__initializer_list__COMMA__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____initializer_clause__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____initializer_list__initializer_clause(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer_list__initializer_list__COMMA__initializer_clause(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____initializer_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____iteration_statement__WHILE__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__DO__statement__WHILE__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__FOR__LEFT_PARENTHESIS__for_init_statement__condition__SEMICOLON__expression__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____iteration_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____jump_statement__BREAK__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____jump_statement__CONTINUE__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____jump_statement__RETURN__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____jump_statement__RETURN__expression__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____jump_statement__GOTO__IDENTIFIER__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____jump_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____labeled_statement__IDENTIFIER__COLON__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____labeled_statement__CASE__constant_expression__COLON__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____labeled_statement__DEFAULT__COLON__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____labeled_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____linkage_specification__EXTERN__STRING_LITERAL__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____linkage_specification__EXTERN__STRING_LITERAL__LEFT_BRACE__declaration_seq__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____linkage_specification__EXTERN__STRING_LITERAL__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____linkage_specification__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____literal__CONSTANT(GeneralSyntaxNode node);
    abstract protected boolean action____literal__STRING_LITERAL_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____literal__boolean_literal(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____literal__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____logical_and_expression__inclusive_or_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____logical_and_expression__logical_and_expression__AND_OP__inclusive_or_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____logical_and_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____logical_or_expression__logical_and_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____logical_or_expression__logical_or_expression__OR_OP__logical_and_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____logical_or_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer__mem_initializer_id__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____mem_initializer_id__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer_id__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____mem_initializer_list__mem_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer_list__mem_initializer_list__COMMA__mem_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____mem_initializer_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_declaration__decl_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__attributes(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__member_declarator_list(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__constant_initializer__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__constant_initializer__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__COLON__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__COLON__constant_expression__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__decl_specifier_seq__IDENTIFIER__COLON__constant_expression__member_declarator_list_tail(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__scoped_unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__SCOPE__scoped_unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_declaration_alt__function_definition(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration_alt__using_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration_alt__template_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration_alt__access_specifier__COLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declaration_alt__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_declarator__declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator__declarator__constant_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator__COLON__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator__IDENTIFIER__COLON__constant_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_declarator_list__member_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator_list__member_declarator_list__COMMA__member_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_declarator_list_tail__COMMA__member_declarator_list(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_declarator_list_tail__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____member_specification__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____member_specification__member_declaration__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_declaration_alt(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__EXTENSION__member_declaration__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__EXTENSION__member_declaration_alt(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_specification__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_specification__member_declaration__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_specification__member_declaration_alt(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_specification__EXTENSION__member_declaration__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__member_specification__EXTENSION__member_declaration_alt(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____member_specification__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____multiplicative_expression__pm_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____multiplicative_expression__multiplicative_expression__ASTERISK__pm_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____multiplicative_expression__multiplicative_expression__SLASH__pm_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____multiplicative_expression__multiplicative_expression__PERCENT_SIGN__pm_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____multiplicative_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____namespace_alias_definition__NAMESPACE__IDENTIFIER__EQUAL_SIGN__qualified_namespace_specifier__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____namespace_alias_definition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____namespace_definition__NAMESPACE__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____namespace_definition__NAMESPACE__LEFT_BRACE__declaration_seq__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____namespace_definition__NAMESPACE__IDENTIFIER__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____namespace_definition__NAMESPACE__IDENTIFIER__LEFT_BRACE__declaration_seq__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____namespace_definition__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____nested_name_specifier__class_name__SCOPE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____nested_name_specifier__class_name__SCOPE__nested_name_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____nested_name_specifier__class_name__SCOPE__TEMPLATE__nested_name_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____nested_name_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____new_declarator__ptr_operator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_declarator__ptr_operator__new_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_declarator__direct_new_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_declarator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____new_expression__NEW__new_type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__new_type_id__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__new_placement__new_type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__new_placement__new_type_id__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_type_id__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_placement__new_type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_placement__new_type_id__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__SCOPE__NEW__new_placement__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS__new_initializer(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____new_initializer__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node);
    abstract protected boolean action____new_initializer__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_initializer__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____new_placement__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_placement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____new_type_id__type_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_type_id__type_specifier_seq__new_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____new_type_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____operator___NEW(GeneralSyntaxNode node);
    abstract protected boolean action____operator___DELETE(GeneralSyntaxNode node);
    abstract protected boolean action____operator___NEW__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___DELETE__LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___PLUS_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___MINUS_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___ASTERISK(GeneralSyntaxNode node);
    abstract protected boolean action____operator___SLASH(GeneralSyntaxNode node);
    abstract protected boolean action____operator___PERCENT_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___CARET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___AMPERSAND(GeneralSyntaxNode node);
    abstract protected boolean action____operator___VERTICAL_BAR(GeneralSyntaxNode node);
    abstract protected boolean action____operator___TILDE(GeneralSyntaxNode node);
    abstract protected boolean action____operator___BANG(GeneralSyntaxNode node);
    abstract protected boolean action____operator___EQUAL_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LEFT_ANGLE_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___RIGHT_ANGLE_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___ADD_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___SUB_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___MUL_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___DIV_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___MOD_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___XOR_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___AND_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___OR_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LEFT_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___RIGHT_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___RIGHT_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LEFT_ASSIGN(GeneralSyntaxNode node);
    abstract protected boolean action____operator___EQ_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___NE_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LE_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___GE_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___AND_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___OR_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___INC_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___DEC_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___COMMA(GeneralSyntaxNode node);
    abstract protected boolean action____operator___PTR_MEMBER(GeneralSyntaxNode node);
    abstract protected boolean action____operator___PTR_OP(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node);
    abstract protected boolean action____operator___LEFT_BRACKET__RIGHT_BRACKET(GeneralSyntaxNode node);
    abstract protected boolean action____operator___default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____operator_function_id__OPERATOR__operator_(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____operator_function_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__declarator_head(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__declarator_head__EQUAL_SIGN__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__EQUAL_SIGN__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__abstract_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__EQUAL_SIGN__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__decl_specifier_seq__abstract_declarator__EQUAL_SIGN__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____parameter_declaration_clause__empty(GeneralSyntaxNode node);
    abstract protected boolean action____parameter_declaration_clause__parameter_declaration_list(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration_clause__ELLIPSIS(GeneralSyntaxNode node);
    abstract protected boolean action____parameter_declaration_clause__parameter_declaration_list__ELLIPSIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration_clause__parameter_declaration_list__COMMA__ELLIPSIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration_clause__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____parameter_declaration_list__parameter_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration_list__parameter_declaration_list__COMMA__parameter_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____parameter_declaration_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____pm_expression__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____pm_expression__pm_expression__DOT_MEMBER__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____pm_expression__pm_expression__PTR_MEMBER__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____pm_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____postfix_expression__primary_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__LEFT_BRACKET__expression__RIGHT_BRACKET(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__simple_type_specifier__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPENAME__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPENAME__SCOPE__scoped_class_name__LEFT_PARENTHESIS__expression_list__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__DOT__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__DOT__TEMPLATE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__DOT__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__DOT__TEMPLATE__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__PTR_OP__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__PTR_OP__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__PTR_OP__TEMPLATE__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__INC_OP(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__postfix_expression__DEC_OP(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__DYNAMIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__STATIC_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__REINTERPRET_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__CONST_CAST__LEFT_ANGLE_BRACKET__type_id__RIGHT_ANGLE_BRACKET__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPEID__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__TYPEID__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__VA_ARG__LEFT_PARENTHESIS__expression__COMMA__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____postfix_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____primary_expression__literal(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____primary_expression__THIS(GeneralSyntaxNode node);
    abstract protected boolean action____primary_expression__SCOPE__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____primary_expression__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____primary_expression__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____primary_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____ptr_operator__ASTERISK(GeneralSyntaxNode node);
    abstract protected boolean action____ptr_operator__ASTERISK__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ptr_operator__AMPERSAND(GeneralSyntaxNode node);
    abstract protected boolean action____ptr_operator__nested_name_specifier__ASTERISK(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ptr_operator__nested_name_specifier__ASTERISK__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ptr_operator__SCOPE__nested_name_specifier__ASTERISK__cv_qualifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____ptr_operator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____qualified_id__scoped_unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____qualified_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____qualified_namespace_specifier__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____qualified_namespace_specifier__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____qualified_namespace_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____relational_expression__shift_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____relational_expression__relational_expression__LEFT_ANGLE_BRACKET__shift_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____relational_expression__relational_expression__RIGHT_ANGLE_BRACKET__shift_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____relational_expression__relational_expression__LE_OP__shift_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____relational_expression__relational_expression__GE_OP__shift_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____relational_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____scoped_class_name__class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_class_name__class_name__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_class_name__class_name__SCOPE__TEMPLATE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_class_name__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____scoped_id__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____scoped_id__class_name__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_id__class_name__SCOPE__TEMPLATE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____scoped_unqualified_id__class_name__SCOPE__unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_unqualified_id__class_name__SCOPE__scoped_unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_unqualified_id__class_name__SCOPE__TEMPLATE__scoped_unqualified_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____scoped_unqualified_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____selection_statement__IF__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement__ELSE__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____selection_statement__SWITCH__LEFT_PARENTHESIS__condition__RIGHT_PARENTHESIS__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____selection_statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____shift_expression__additive_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____shift_expression__shift_expression__LEFT_OP__additive_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____shift_expression__shift_expression__RIGHT_OP__additive_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____shift_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____simple_declaration__SEMICOLON(GeneralSyntaxNode node);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__attributes__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__attributes__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__attributes__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__attributes__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__initializer__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__initializer__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__decl_specifier_seq__declarator_head__declarator_tail_seq__initializer__COMMA__init_declarator_list__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_type_specifier__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_type_specifier__CHAR(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__WCHAR_T(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__CBOOL(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__SHORT(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__INT(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__LONG(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__SIGNED(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__UNSIGNED(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__FLOAT(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__DOUBLE(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__VOID(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__COMPLEX(GeneralSyntaxNode node);
    abstract protected boolean action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__expression__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_type_specifier__TYPEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____simple_type_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____statement__labeled_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__expression_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__compound_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__selection_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__iteration_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__jump_statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__block_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__try_block(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____statement_seq__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement_seq__statement_seq__statement(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____statement_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__AUTO(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__REGISTER(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__STATIC(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__EXTERN(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__MUTABLE(GeneralSyntaxNode node);
    abstract protected boolean action____storage_class_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____template_argument__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_argument__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_argument__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____template_argument_list__template_argument(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_argument_list__template_argument_list__COMMA__template_argument(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_argument_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____template_declaration__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_declaration__EXPORT__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____template_parameter__type_parameter(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_parameter__parameter_declaration(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_parameter__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____template_parameter_list__template_parameter(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_parameter_list__template_parameter_list__COMMA__template_parameter(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____template_parameter_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____throw_expression__THROW(GeneralSyntaxNode node);
    abstract protected boolean action____throw_expression__THROW__assignment_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____throw_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____translation_unit__declaration_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____translation_unit__empty(GeneralSyntaxNode node);
    abstract protected boolean action____translation_unit__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____try_block__TRY__compound_statement__handler_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____try_block__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____type_id__type_specifier_seq(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_id__type_specifier_seq__abstract_declarator(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____type_id_list__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_id_list__type_id_list__COMMA__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_id_list__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____type_parameter__CLASS(GeneralSyntaxNode node);
    abstract protected boolean action____type_parameter__CLASS__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____type_parameter__CLASS__EQUAL_SIGN__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__CLASS__IDENTIFIER__EQUAL_SIGN__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TYPENAME(GeneralSyntaxNode node);
    abstract protected boolean action____type_parameter__TYPENAME__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____type_parameter__TYPENAME__EQUAL_SIGN__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TYPENAME__IDENTIFIER__EQUAL_SIGN__type_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__EQUAL_SIGN__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__TEMPLATE__LEFT_ANGLE_BRACKET__template_parameter_list__RIGHT_ANGLE_BRACKET__CLASS__IDENTIFIER__EQUAL_SIGN__id_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_parameter__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__simple_type_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__CLASS__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__STRUCT__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__UNION__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__scoped_class_name__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__scoped_class_name__base_clause__LEFT_BRACE__member_specification__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__ENUM__LEFT_BRACE__enumerator_list__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__LEFT_BRACE__RIGHT_BRACE(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__LEFT_BRACE__enumerator_list__RIGHT_BRACE(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__CLASS__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__STRUCT__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__UNION__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__IDENTIFIER__BEGIN_TEMPLATE__template_argument_list__RIGHT_ANGLE_BRACKET__SCOPE__TEMPLATE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__ENUM__SCOPE__scoped_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__TYPENAME__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__TYPENAME__SCOPE__scoped_class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__cv_qualifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____type_specifier_seq__type_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier_seq__type_specifier_seq__type_specifier(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____type_specifier_seq__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____unary_expression__postfix_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__INC_OP__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__DEC_OP__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__unary_operator__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__SIZEOF__unary_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__SIZEOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__new_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__delete_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__ALIGNOF__unary_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__ALIGNOF__LEFT_PARENTHESIS__type_id__RIGHT_PARENTHESIS(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__REALPART__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__IMAGPART__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__EXTENSION__cast_expression(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unary_expression__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__ASTERISK(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__AMPERSAND(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__PLUS_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__MINUS_SIGN(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__BANG(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__TILDE(GeneralSyntaxNode node);
    abstract protected boolean action____unary_operator__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____unqualified_id__class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unqualified_id__operator_function_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unqualified_id__conversion_function_id(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unqualified_id__TILDE__class_name(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____unqualified_id__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____using_declaration__USING__scoped_unqualified_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_declaration__USING__TYPENAME__scoped_unqualified_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_declaration__USING__SCOPE__scoped_unqualified_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_declaration__USING__TYPENAME__SCOPE__scoped_unqualified_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_declaration__USING__SCOPE__unqualified_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_declaration__default_semantic_action(GeneralSyntaxNode node);
    abstract protected boolean action____using_directive__USING__NAMESPACE__scoped_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_directive__USING__NAMESPACE__SCOPE__scoped_id__SEMICOLON(GeneralSyntaxNode node, int __action_status__);
    abstract protected boolean action____using_directive__default_semantic_action(GeneralSyntaxNode node);

}


